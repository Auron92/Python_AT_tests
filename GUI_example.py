import customtkinter as ctk
import threading
import time
import random
from tkinter import messagebox

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("Dark")  # "Light", "Dark", "System"
ctk.set_default_color_theme("blue")  # "blue", "green", "dark-blue"

class TestMonitorApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        self.title("üß™ –ú–æ–Ω–∏—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤")
        self.geometry("1000x600")
        self.minsize(900, 500)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        self.tests = [
            {"name": "–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–æ–∫", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "status": "waiting", "duration": 0},
            {"name": "–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "status": "waiting", "duration": 0}
        ]
        
        self.currently_running = None
        self.create_widgets()
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self, fg_color="transparent")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(main_container, fg_color="transparent")
        header.pack(fill="x", pady=(0, 20))
        
        title = ctk.CTkLabel(
            header,
            text="üß™ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title.pack()
        
        subtitle = ctk.CTkLabel(
            header,
            text="–†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
            font=ctk.CTkFont(size=14),
            text_color="gray"
        )
        subtitle.pack(pady=(5, 0))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ctk.CTkFrame(main_container)
        control_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            control_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:",
            font=ctk.CTkFont(weight="bold")
        ).pack(pady=(15, 10))
        
        btn_container = ctk.CTkFrame(control_frame, fg_color="transparent")
        btn_container.pack(pady=10)
        
        start_all_btn = ctk.CTkButton(
            btn_container,
            text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã",
            command=self.start_all_tests,
            fg_color="#2E8B57",
            hover_color="#3CB371",
            width=150,
            height=40
        )
        start_all_btn.pack(side="left", padx=5)
        
        stop_all_btn = ctk.CTkButton(
            btn_container,
            text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ",
            command=self.stop_all_tests,
            fg_color="#DC143C",
            hover_color="#FF4500",
            width=150,
            height=40
        )
        stop_all_btn.pack(side="left", padx=5)
        
        clear_btn = ctk.CTkButton(
            btn_container,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            command=self.clear_results,
            fg_color="#696969",
            hover_color="#808080",
            width=150,
            height=40
        )
        clear_btn.pack(side="left", padx=5)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        list_frame = ctk.CTkFrame(main_container)
        list_frame.pack(fill="both", expand=True, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        header_frame = ctk.CTkFrame(list_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        ctk.CTkLabel(header_frame, text="–¢–µ—Å—Ç", font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))
        ctk.CTkLabel(header_frame, text="–°—Ç–∞—Ç—É—Å", font=ctk.CTkFont(weight="bold")).pack(side="right", padx=(0, 150))
        ctk.CTkLabel(header_frame, text="–î–µ–π—Å—Ç–≤–∏—è", font=ctk.CTkFont(weight="bold")).pack(side="right", padx=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.canvas = ctk.CTkCanvas(list_frame, bg="#2B2B2B", highlightthickness=0)
        scrollbar = ctk.CTkScrollbar(list_frame, orientation="vertical", command=self.canvas.yview)
        self.scrollable_frame = ctk.CTkFrame(self.canvas, fg_color="transparent")
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True, padx=(10, 0), pady=10)
        scrollbar.pack(side="right", fill="y", padx=(0, 10), pady=10)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        self.canvas.bind("<MouseWheel>", self.on_mousewheel)
        self.scrollable_frame.bind("<MouseWheel>", self.on_mousewheel)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        self.test_widgets = []
        for i, test in enumerate(self.tests):
            self.create_test_row(test, i)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(main_container)
        stats_frame.pack(fill="x", pady=10)
        
        self.stats_label = ctk.CTkLabel(
            stats_frame,
            text="–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: 8 | –û–∂–∏–¥–∞–Ω–∏–µ: 8 | –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: 0 | –£—Å–ø–µ—à–Ω–æ: 0 | –° –æ—à–∏–±–∫–æ–π: 0",
            font=ctk.CTkFont(size=12)
        )
        self.stats_label.pack(pady=10)
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.create_status_bar(main_container)
        
    def create_test_row(self, test, index):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
        row_frame = ctk.CTkFrame(self.scrollable_frame, height=60)
        row_frame.pack(fill="x", padx=10, pady=5)
        row_frame.pack_propagate(False)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        name_label = ctk.CTkLabel(
            row_frame,
            text=test["name"],
            font=ctk.CTkFont(size=12),
            anchor="w"
        )
        name_label.place(x=20, y=20, anchor="w")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        status_indicator = ctk.CTkLabel(
            row_frame,
            text="‚óè",
            font=ctk.CTkFont(size=20),
            text_color="gray"  # —Å–µ—Ä—ã–π - –æ–∂–∏–¥–∞–Ω–∏–µ
        )
        status_indicator.place(relx=0.7, y=20, anchor="center")
        
        status_text = ctk.CTkLabel(
            row_frame,
            text="–û–∂–∏–¥–∞–Ω–∏–µ",
            font=ctk.CTkFont(size=11),
            text_color="gray"
        )
        status_text.place(relx=0.7, y=40, anchor="center")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        start_btn = ctk.CTkButton(
            row_frame,
            text="–ó–∞–ø—É—Å–∫",
            width=80,
            height=30,
            command=lambda t=test: self.start_test(t)
        )
        start_btn.place(relx=0.85, y=20, anchor="center")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        test_widget = {
            "frame": row_frame,
            "name_label": name_label,
            "indicator": status_indicator,
            "status_text": status_text,
            "start_btn": start_btn
        }
        
        self.test_widgets.append(test_widget)
        
    def create_status_bar(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        status_bar = ctk.CTkFrame(parent, height=30, corner_radius=0)
        status_bar.pack(fill="x", side="bottom", pady=(20, 0))
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.status_message = ctk.CTkLabel(
            status_bar,
            text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞.",
            font=ctk.CTkFont(size=12)
        )
        self.status_message.pack(side="left", padx=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ctk.CTkFrame(status_bar, fg_color="transparent")
        info_frame.pack(side="right", padx=10)
        
        ctk.CTkLabel(
            info_frame,
            text="–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä v1.0 | ¬© 2024",
            font=ctk.CTkFont(size=10),
            text_color="gray"
        ).pack(side="right", padx=5)
        
    def update_test_status(self, test, status, color, text):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        index = self.tests.index(test)
        widgets = self.test_widgets[index]
        
        widgets["indicator"].configure(text_color=color)
        widgets["status_text"].configure(text=text, text_color=color)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_stats()
        
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤"""
        total = len(self.tests)
        waiting = sum(1 for t in self.tests if t["status"] == "waiting")
        running = sum(1 for t in self.tests if t["status"] == "running")
        success = sum(1 for t in self.tests if t["status"] == "success")
        error = sum(1 for t in self.tests if t["status"] == "error")
        
        self.stats_label.configure(
            text=f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total} | –û–∂–∏–¥–∞–Ω–∏–µ: {waiting} | –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {running} | –£—Å–ø–µ—à–Ω–æ: {success} | –° –æ—à–∏–±–∫–æ–π: {error}"
        )
        
    def update_status_message(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_message.configure(text=message)
        
    def start_test(self, test):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
        if test["status"] == "running":
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–¢–µ—Å—Ç '{test['name']}' —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
            
        test["status"] = "running"
        self.update_test_status(test, "running", "orange", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
        self.update_status_message(f"üü† –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test['name']}")
        self.currently_running = test["name"]
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.execute_test, args=(test,), daemon=True)
        thread.start()
        
    def start_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
        for test in self.tests:
            if test["status"] == "waiting":
                self.start_test(test)
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
    def stop_all_tests(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è —Ç–µ—Å—Ç—ã"""
        for test in self.tests:
            if test["status"] == "running":
                test["status"] = "waiting"
                self.update_test_status(test, "waiting", "gray", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        self.update_status_message("‚èπ –í—Å–µ —Ç–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        self.currently_running = None
        
    def clear_results(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        for test in self.tests:
            test["status"] = "waiting"
            test["duration"] = 0
            self.update_test_status(test, "waiting", "gray", "–û–∂–∏–¥–∞–Ω–∏–µ")
            
        self.update_status_message("üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã")
        self.update_stats()
        
    def execute_test(self, test):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ 2-8 —Å–µ–∫—É–Ω–¥
            duration = random.uniform(2.0, 8.0)
            start_time = time.time()
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–∞
            while time.time() - start_time < duration:
                if test["status"] != "running":
                    return
                time.sleep(0.1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (80% —É—Å–ø–µ—Ö–∞, 20% –æ—à–∏–±–∫–∏)
            success = random.random() < 0.8
            
            if success:
                test["status"] = "success"
                self.after(0, lambda: self.update_test_status(test, "success", "green", "–£—Å–ø–µ—à–Ω–æ"))
                self.after(0, lambda: self.update_status_message(f"‚úÖ {test['name']} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"))
            else:
                test["status"] = "error"
                self.after(0, lambda: self.update_test_status(test, "error", "red", "–û—à–∏–±–∫–∞"))
                self.after(0, lambda: self.update_status_message(f"‚ùå {test['name']} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!"))
                
            test["duration"] = time.time() - start_time
            
        except Exception as e:
            self.after(0, lambda: self.update_test_status(test, "error", "red", "–û—à–∏–±–∫–∞"))
            self.after(0, lambda: self.update_status_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ {test['name']}: {str(e)}"))
            
    def on_mousewheel(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏"""
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

if __name__ == "__main__":
    app = TestMonitorApp()
    app.mainloop()