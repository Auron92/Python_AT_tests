"""Git utils."""
import subprocess
from pathlib import Path


def get_git_branch(repository_dir: str | Path = './') -> str:
    """
    Get the current branch name.

    :param repository_dir: Directory with repository
    """
    cmd = f'cd "{repository_dir}" && git rev-parse --abbrev-ref HEAD'
    with subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:  # noqa: S602
        proc.wait(timeout=5)
        stdout_data = proc.stdout.read()
        branch_name = stdout_data.decode('utf-8').replace('\n', '')

    return branch_name


def get_git_head(repository_dir: str | Path = './', short: bool = True) -> str:
    """
    Get the current commit.

    :param repository_dir(str): Directory with repository
    :param short(bool): Return short head
    """
    if short:
        cmd = f'cd "{repository_dir}" && git rev-parse --short HEAD'
    else:
        cmd = f'cd "{repository_dir}" && git rev-parse HEAD'
    with subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:  # noqa: S602
        proc.wait(timeout=5)
        stdout_data = proc.stdout.read()
        head = stdout_data.decode('utf-8').replace('\n', '')

    return head


def get_git_remote_origin(repository_dir: str | Path = './') -> str:
    """
    Get the current commit.

    :param repository_dir: Directory with repository
    """
    cmd = f'cd "{repository_dir}" && git config --get remote.origin.url'
    with subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:  # noqa: S602
        proc.wait(timeout=5)
        stdout_data = proc.stdout.read()
        origin = stdout_data.decode('utf-8').replace('\n', '')
        origin = origin.removesuffix('.git')

    return origin
