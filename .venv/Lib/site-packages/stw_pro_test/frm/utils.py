"""Utilities for working with firmware files."""

from configparser import SectionProxy
from pathlib import Path

from stw_gen_sample3_api.types.core.sw.firmware_id_type import FirmwareId
from stw_gen_sample3_api.types.core.sw.version_type import Version

from stw_pro_test.frm.download_from_source import download_from_graveyard


def extract_frm_id_and_version(file_name: str) -> tuple[FirmwareId, Version]:
    """
    Извлечь из названия файла firmware_id и версию ФПО.

    Имя вида <firmware_id>-<version>.bin.
    Например stw-cursed_device.v14-main.r1.r2-1.2.3.4.bin ->
    """
    file_name = file_name.replace('.bin', '')
    if file_name.startswith('stw-'):
        file_name = file_name[4:]
    frm_id, version = file_name.rsplit('-', 1)
    version_elements = [int(element) for element in version.split('.')]
    version = Version(*version_elements)
    frm_id = FirmwareId(frm_id)
    return frm_id, version


def get_file(config: SectionProxy) -> Path:
    """Download or get local file."""
    frm_id = config.get('frm_id_to_download', None)
    frm_version = config.get('frm_version_to_download', None)
    flash_file = config.get('flash_from_file', '-1')
    flash_file = Path(flash_file)

    # Достаем файл из возможных источников: frm_id+frm_version, PATH from CLI/config
    # frm_id+frm_version - приоритетны, т.е. если будут заданы, локальный файл будет проигнорирован
    if any((frm_id, frm_version)):
        # Проверяем, что оба аргумента переданы через CLI
        if not all((frm_id, frm_version)):
            raise AttributeError('Должны быть указаны оба аргумента: frm_id_to_download и frm_version_to_download')
        token = config.get('cemetery_token')
        flash_file = download_from_graveyard(token, frm_id, frm_version)
    return flash_file
