"""Функции для скачивания прошивок из внешних ресурсов."""
import ssl
from pathlib import Path

import requests
from graveyard_upload.upload import GraveyardDownload


def download_from_graveyard(token, firmware_id: str, version: str) -> Path:
    """
    Скачать прошивку из graveyard.

    :param token: token to access
    :param firmware_id: id of firmware to identify
    :param version: version of firmware to identify
    :return: path/to/file. "-1" for non-exist file
    """
    # Вместо verify=False в каждом requests.get. В принципе, шо то, шо это...
    try:
        _create_unverified_https_context = ssl._create_unverified_context
    except AttributeError:
        # Legacy Python that doesn't verify HTTPS certificates by default
        pass
    else:
        # Handle target environment that doesn't support HTTPS verification
        ssl._create_default_https_context = _create_unverified_https_context

    downloader = GraveyardDownload(
        token,
        firmwareId=firmware_id,
        version=version,
        graveyardUrl='https://graveyard.1440.space',
    )
    downloader.download()
    download_path = Path('./download')  # по такому пути работает downloader
    for file in download_path.iterdir():
        if 'bin' not in file.suffix:
            continue
        return file
    return download_path / Path('-1')


def _get_token(client_secret: str, client_id: str):
    data = {
        "grant_type": "client_credentials",
        "client_secret": client_secret,
        "client_id": client_id,
    }
    response = requests.post(
        'https://sw-auth.1440.space/realms/graveyard/protocol/openid-connect/token',
        data=data,
        timeout=1,
    )
    response.raise_for_status()
    as_json = response.json()
    return as_json['access_token']


def _check_token(token: str) -> bool:
    """
    Check if token is alive.

    :param token: token to check
    :return: True if token is valid
    """
    headers = {
        'accept': '*/*',
        'Authorization': f'Bearer {token}',
    }
    response = requests.get(
        '/api/user/info',
        headers=headers,
        timeout=1,
    )
    return response.status_code != 401
