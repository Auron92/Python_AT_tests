"""Watcher classes."""

import itertools
import time
from collections.abc import Callable
from functools import partial

from loguru import logger

from stw_pro_test.logger import install_log


class PeriodicWatcher:
    """Periodically controls parameter."""

    def __init__(self, threading_mode=False):
        """
        Calls callback periodically.

        :param threading_mode: call callback in separate threads if True
        """
        self.callbacks: dict[int, Callable] = {}
        self.callback_id = itertools.count()
        self.in_loop = False
        self._install_logger()
        self.threading_mode = threading_mode

    def _install_logger(self):
        """Add watcher level."""
        install_log(logger)

        logger.level('WATCHER', no=88, color='<cyan>')
        logger.watcher = partial(logger.log, 'WATCHER')

    def add_callback(self, callback: Callable) -> int:
        """Add callback to calling list."""
        new_callback_id: int = next(self.callback_id)
        self.callbacks[new_callback_id] = callback
        return new_callback_id

    def remove_callback(self, callback_id: int):
        """Remove callback from calling list."""
        if callback_id in self.callbacks:
            self.callbacks.pop(callback_id)

    def _call_callbacks(self):
        for callback in self.callbacks.values():
            try:
                output = callback()
            except Exception as exc:
                # На любую ошибка бука ю, кроме прерывания с клавиатуры
                if type(exc) is KeyboardInterrupt:
                    raise exc
                logger.error(str(exc))
                continue
            if not output:
                continue
            logger.watcher(output)

    def monitor_with_period(self, period):
        """
        Period between start of two calls.

        :param period: period in seconds
        """
        self.in_loop = True
        while self.in_loop:
            start = time.perf_counter()
            self._call_callbacks()
            while time.perf_counter() - start < period:
                time.sleep(period / 100)

    def monitor_with_delay(self, delay):
        """Delay between end of one call and start of another call."""
        self.in_loop = True
        while self.in_loop:
            self._call_callbacks()
            time.sleep(delay)


if __name__ == '__main__':

    def hello_callback():
        """Simple callback."""
        time.sleep(0.3)
        return 'Hello'

    watcher = PeriodicWatcher()
    watcher.add_callback(hello_callback)
    watcher.monitor_with_period(1)
