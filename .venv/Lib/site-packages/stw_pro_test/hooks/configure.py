"""Hooks for configuration."""

import pytest
from loguru import logger

from stw_pro_test.config import app as app_config
from stw_pro_test.utils.utils import extract_invocation_params


def pytest_addoption(parser: pytest.Parser) -> None:
    """Add custom cli arguments."""
    options_group: pytest.OptionGroup = parser.getgroup('stw-pro-test.hooks.configure options')
    options_group.addoption(
        '--config_path',
        action='store',
        default='./config/config.ini',
        help='Path to config',
    )
    options_group.addoption(
        '--use_section',
        action='store',
        default='default.device',
        help='section from config to use',
    )

    options_group.addoption(
        '--sreda_server_ip',
        action='store',
        default=None,
        help='sreda server ip: port',
    )
    options_group.addoption(
        '--device_id',
        action='store',
        default=None,
        help='device id on CAN (node id)',
    )


def pytest_configure(config: pytest.Config) -> None:
    """
    Allow plugins and conftest files to perform initial configuration.

    This hook is called for every plugin and initial conftest file after command
    line options have been parsed.
    After that, the hook is called for other conftest files as they are imported
    """
    invocation_params = extract_invocation_params(config)
    config_path = invocation_params.pop('config_path', None)

    app_config.prepare_configs(config_path, invocation_params)
    config.general = app_config.defaults  # Access for other plugins
    if invocation_params:
        logger.debug(f'pro-test beginning with arguments: {invocation_params}')


def pytest_unconfigure(config) -> None:
    """Called before test process is exited."""
    config.using_unconfigure = True  # Flag for notification
    logger.debug(f'pro-test is done for {config.args}')
