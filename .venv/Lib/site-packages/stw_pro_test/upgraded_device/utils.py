"""Utils for upgraded device."""
from typing import TypeVar

DevicePygen = TypeVar('DevicePygen')
Helper = TypeVar('Helper')
TmClass = TypeVar('TmClass')


def collide(class_name, device_class: DevicePygen, helper_class: Helper) -> DevicePygen | Helper:
    """
    Collide two types.

    Works like multiple inheritance but in runtime.

    :param class_name: name of a new class
    :param device_class: Pygen class
    :param helper_class: class "wrapper" with new methods
    :return: subclass of both device_class and helper_class
    """
    # В целом, здесь два момента:
    # 1. Грязный хак сам по себе: создание нового типа в runtime
    # 2. Вроде как, в python 3.13 добавили typehint для type. Тут он некорректно работает
    # Поэтому обманываем (на самом деле, не до конца говорим правду) typechecker

    # works if any of classes has no MetaClass
    return type(class_name, (device_class, helper_class), {})  # type: ignore
