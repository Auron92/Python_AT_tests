"""Общие фикстуры, которые не относятся к отдельным инструментам."""

from collections.abc import Callable
from configparser import SectionProxy
from pathlib import Path

import pytest
from stw_brokers_sreda.bin_broker import SredaBinBroker
from stw_gen_sample3_api.device_class import Sample3Device

from stw_pro_test.config import app as app_config
from stw_pro_test.config.ini_config.structures import DeviceConfig
from stw_pro_test.config.ini_config.utils import TEMPLATE_PATH
from stw_pro_test.uploader.allure.const import (
    ALLURE_REPORT_DIR_KEY,
    DEVICE_META_FILE,
    DEVICE_META_PATH_KEY,
)


@pytest.fixture(scope='session')
def using_allure(request: pytest.FixtureRequest) -> bool:
    """If Allure plugin is using."""
    return request.config.getoption(name='using_allure', default=False)  # type: ignore


@pytest.fixture(scope='session')
def config_section() -> SectionProxy:
    """Config section from config with all parameters."""
    return app_config.defaults


@pytest.fixture(scope='session')
def config_template_path() -> Path:
    """Путь к шаблону конфигурационного файла"""
    return Path(TEMPLATE_PATH)


@pytest.fixture(scope='session')
def device_config(config_section: SectionProxy) -> DeviceConfig:
    """Config for device."""
    return DeviceConfig(**config_section)


@pytest.fixture(scope='session')
def broker_factory(device_config) -> Callable[[], SredaBinBroker]:
    """Фабрика брокеров, для того чтобы можно было работать каждому устройству по "своей" шине (модулю)."""
    sreda_server_ip = device_config['sreda_server_ip']

    def _broker():
        """Broker instance."""
        if not sreda_server_ip:
            return
        broker_ = SredaBinBroker(
            sreda_server_connection=sreda_server_ip,
            timeout=5,
        )
        broker_.init()

        return broker_

    return _broker


@pytest.fixture(scope='session')
def broker(broker_factory) -> SredaBinBroker:
    """Broker instance."""
    return broker_factory()


@pytest.fixture(scope='session')
def device_id(device_config: DeviceConfig) -> int:
    """a.k.a node id on CAN."""
    return device_config.device_id


@pytest.fixture(scope='session')
def device(broker: SredaBinBroker, device_id) -> Sample3Device:
    """Device API."""
    device_obj = Sample3Device(device_id=device_id, broker=broker)
    return device_obj
    # log meta


@pytest.fixture(scope='session')
def device_meta_path(request: pytest.FixtureRequest) -> Path:
    """Путь к файлу конфигурации устройства"""
    path = Path(request.config.general.get(ALLURE_REPORT_DIR_KEY)) / DEVICE_META_FILE
    path = path.resolve()
    request.config.general[DEVICE_META_PATH_KEY] = str(path)
    return path
