"""Hooks and pytest setup for Bot uploader."""

import collections

import pytest
from loguru import logger

from stw_pro_test.notifications.messenger import NotificationBot


def pytest_addoption(parser: pytest.Parser) -> None:
    """Add custom cli arguments."""
    options_group: pytest.OptionGroup = parser.getgroup('stw-pro-test.notifications options')
    options_group.addoption(
        '--notification-bot-token',
        action='store',
        default=None,
        help='Token for bot access',
    )
    options_group.addoption(
        '--chat',
        action='store',
        default=None,
        help='Chat to send notification message',
    )
    options_group.addoption(
        '--upload-to-chat',
        action='store_true',
        default=False,
        help='upload or not to chat',
    )


def pytest_configure(config: pytest.Config):
    """
    Allow plugins and conftest files to perform initial configuration.

    This hook is called for every plugin and initial conftest file after command line options have been parsed.
    After that, the hook is called for other conftest files as they are imported.
    """
    if config.general.getboolean('upload-to-chat', False):
        config.bot = NotificationBot(token=config.general.get('notification-bot-token'))


def pytest_sessionstart(session: pytest.Session):
    """Начало сессии тестирования."""
    session.results = {}


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """Сохраняем результаты тестирования."""
    outcome = yield
    result = outcome.get_result()

    if result.when == 'call':
        item.session.results[item] = result


def pytest_sessionfinish(session: pytest.Session):
    """Create test result message."""
    to_upload = session.config.general.getboolean('upload-to-chat', False)
    collect_only = session.config.option.collectonly
    if not to_upload or collect_only:
        logger.debug('Уведомление о тестировании не отправлено в мессенджер. Настройка upload_to_chat = false')
        return

    cases = collections.defaultdict(int)
    for case in session.results.values():
        cases[case.outcome] += 1

    bot: NotificationBot = session.config.bot
    bot.path_to_fig = bot.save_fig_results(cases, ['limegreen', 'red', 'gainsboro'])
    bot.add_message(bot.get_hostname_msg())


def pytest_unconfigure(config: pytest.Config):
    """Send notification to chat."""
    to_upload = config.general.getboolean('upload-to-chat', False)
    collect_only = config.option.collectonly
    if not to_upload or collect_only:
        return

    bot: NotificationBot = config.bot
    bot.add_message(bot.get_allure_msg(config))
    msg = bot.get_description_message()
    if not msg:
        logger.debug('Результаты тестирования не найдены.')
        return

    answer = bot.send_file(
        chat_id=config.general.get('chat'),
        file_path=bot.path_to_fig,
        text=msg,
    )
    if answer:
        logger.debug('Уведомление о тестировании отправлено в мессенджер.')
    else:
        logger.error('Ошибка отправки уведомления в мессенджер.')
