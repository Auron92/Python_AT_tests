"""Notification message creator."""

import socket
from pathlib import Path

import numpy as np
import pytest
from bot.bot import Bot
from loguru import logger
from matplotlib import pyplot as plt

import stw_pro_test.uploader.allure.const as ac
from stw_pro_test.notifications.utils import put_escape_symbols
from stw_pro_test.utils import get_file_data


class NotificationBot(Bot):
    """Бот отправки уведомлений о тестировании."""

    def __init__(self, *args, **kwargs):
        """Init."""
        super().__init__(*args, **kwargs)
        self._messages = []
        self.path_to_fig = Path('./')

    def add_message(self, msg: str):
        """Add any text to message."""
        self._messages.append(msg)

    def get_description_message(self) -> str:
        """Add message with description."""
        msg = '*Условия:*\n'
        msg += ''.join(str(msg) for msg in self._messages)
        return msg

    def get_allure_msg(self, config: pytest.Config):
        """Return allure description message."""
        upload_to_allure = config.general.getboolean(ac.ALLURE_FLAG, False)
        allure_msg = ''
        if not upload_to_allure:
            return allure_msg

        # TODO считывать всю инфу из одного места после добавления функционала  # NOSONAR
        #  https://j.1440.space/browse/FUNTEST-767
        meta_data = None
        try:
            meta_data = get_file_data(Path(config.general.get(ac.ALLURE_META_PATH_KEY)))
        except FileNotFoundError as err:
            logger.error(f'Файл allure_meta не найден: {err}')

        launch_name, tags = '', ''
        if meta_data:
            launch_name = meta_data.get(ac.AMF_LAUNCH_NAME, '')
            tags = meta_data.get(ac.AMF_TAGS, '')

            launch_name = put_escape_symbols(launch_name)
            tags = put_escape_symbols(tags)

            allure_msg += f'- Имя репорта: {launch_name}\n'

        allure_url = config.allure_results.get('upload_url', '')
        if allure_url:
            allure_msg += f'- [Ссылка на allure]({allure_url})'
        else:
            allure_msg += 'Выгрузка в allure отсутствует'
        allure_msg += f'\n- Теги: `{tags}`' if tags else ''

        return allure_msg

    def get_hostname_msg(self) -> str:
        """Return hostname message."""
        return f'- host: {socket.gethostname()}\n'

    def save_fig_results(
        self,
        cases: dict,
        colors: list[str],
        path_to_save: Path = './',
    ) -> Path:
        """Создать и сохранить картинку с тестированием."""
        _fig, ax = plt.subplots(figsize=(7, 6), subplot_kw={'aspect': 'equal'})

        def make_badge(pct, allvals):
            absolute = np.round(pct / 100 * sum(allvals))
            if absolute == 0:
                return ''
            return f'{pct:.0f}%\n({absolute:.0f})'

        labels = [
            f'Успешно: {cases["passed"]} ',
            f'Провалено: {cases["failed"]} ',
            f'Пропущено: {cases["skipped"]}',
        ]
        cases_number = [cases['passed'], cases['failed'], cases['skipped']]
        wedges, _texts, autotexts = ax.pie(
            cases_number,
            autopct=lambda pct: make_badge(pct, cases_number),
            textprops={'color': 'w'},
            labels=labels,
            colors=colors,
            pctdistance=0.85,
        )

        # draw circle - превращаем pie chart в donut chart
        centre_circle = plt.Circle((0, 0), 0.70, fc='white')
        fig = plt.gcf()

        # Adding Circle in Pie chart
        fig.gca().add_artist(centre_circle)

        ax.legend(
            wedges,
            labels,
            title='Легенда',
            loc='center left',
            bbox_to_anchor=(0.85, 0.5, 0.5, 0.5),
        )

        plt.setp(autotexts, size=8, weight='bold')

        ax.set_title('Результаты тестирования')

        path_to_fig = Path(path_to_save) / 'fig_results.png'

        plt.savefig(path_to_fig)

        return path_to_fig
