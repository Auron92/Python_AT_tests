"""Настройка логирования."""

from __future__ import annotations

import logging
import sys
from pathlib import Path
from typing import TypeAlias

import loguru

from stw_pro_test.utils import generate_time_str


class PropagateHandler(logging.Handler):
    """Для дублирования логов logging.logger."""

    def emit(self, record):
        """Invoked by logging."""
        logging.getLogger(record.name).handle(record)


phrases_stop_list = [
    "core.fs.getData ({'id':",  # ReqRep для скачивания
    'Received rep for command core.frm.sendData: Ok.Ok',  # Rep для скачивания
    'core.frm.sendData sent by REQ_REP with args:',  # Req для скачивания
]


def log_filter(msg):
    """
    Фильтрация сообщений на основе текста в сообщении.

    Применяется, чтобы не отключать логгер каждый раз.
    """
    if msg['function'] == 'ds_wait_tm':
        return False
    for phrase in phrases_stop_list:
        if phrase in msg['message']:
            return False
    return True


PathLike: TypeAlias = str | Path

LOG_FILE_PATH: Path | None = None


def install_log(outer_logger: loguru.Logger, log_dir_path: PathLike | None = None) -> Path:
    """
    Install log.

    log handlers will be added:
    - to file
    - to logging
    - to stdout

    :param outer_logger: loguru.logger instance
    :param log_dir_path: directory for .log files
    :return: log file Path instance
    """
    global LOG_FILE_PATH
    unique_file_name = generate_time_str()
    if log_dir_path and isinstance(log_dir_path, str):
        log_dir_path = Path(log_dir_path)

    if not log_dir_path:
        log_dir_path = Path('./Logs')
        log_dir_path /= unique_file_name
    log_file_path = log_dir_path.with_suffix('.log')
    LOG_FILE_PATH = LOG_FILE_PATH or log_file_path

    if len(outer_logger._core.handlers) > 1:
        # Logger already has handlers
        return LOG_FILE_PATH

    outer_logger.remove()  # All configured handlers are removed

    outer_logger.add(PropagateHandler(), format='{message}', filter=log_filter)
    outer_logger.add(
        sys.stdout,
        format='<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | '
        '<level>{level: ^8}</level> | '
        '<cyan>{function}</cyan> - '
        '<level>{message}</level>',
        filter=log_filter,
    )
    outer_logger.add(log_file_path, delay=True)  # without filter in file
    return log_file_path
