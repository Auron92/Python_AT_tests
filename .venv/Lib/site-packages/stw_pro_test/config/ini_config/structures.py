"""Структуры для упрощения доступа к конфигурациям."""
import configparser

from stw_pro_test.utils.converters import any2bool, any2int


class PowerSupplyConfig:
    """Конфигурация устройства управления питанием (ИП/БКП) из секции конфига."""

    def __init__(self, config_section: configparser.SectionProxy):  # noqa: C901
        """
        Конфигурация устройства управления питанием (ИП/БКП) из секции конфига.

        :param config_section: configParser section
        """
        subnet = config_section.get('inner_subnet')
        self.psu_ip = config_section.get('power_supply_ip', None)
        if self.psu_ip and (subnet not in self.psu_ip):
            self.psu_ip = f'{subnet}.{self.psu_ip}'

        self.pdcu_main_id = config_section.getdecimal('pdcu_main_id', 0)
        self.pdcu_reserve_id = config_section.getdecimal('pdcu_reserve_id', self.pdcu_main_id + 1)
        self.psu_type = config_section.get('power_supply_type', 'PSU').lower()
        self.stay_turned_on = config_section.getboolean('STAY_ON')
        self.save_state = config_section.getboolean('save_psu_state')

        if self.using_pdcu:
            self.pdcu_port = config_section.getint('pdcu_port')
        else:
            self.pdcu_port = None

        if self.using_psu:
            try:
                self.voltage_set = config_section.getfloat('psu_voltage_set')
                self.current_set = config_section.getfloat('psu_current_set')
            except ValueError as exc:
                raise ValueError('Не определены значения для уставки ИП') from exc

            self.voltage_set_reserve = config_section.getfloat('psu_voltage_set_reserve', self.voltage_set)
            self.current_set_reserve = config_section.getfloat('psu_current_set_reserve', self.current_set)
        elif self.psu_type == 'pdcux':  # тут жестко закрепим ибо это уже характеристики БКП Р3
            self.voltage_set = 12.0
            self.current_set = 2.0
            self.voltage_set_reserve = self.voltage_set
            self.current_set_reserve = self.current_set
        elif self.psu_type == 'pdcu':  # тут жестко закрепим ибо это уже характеристики БКП Р1, Р2
            self.voltage_set = 24.0
            self.current_set = 2.0
            self.voltage_set_reserve = self.voltage_set
            self.current_set_reserve = self.current_set

    @property
    def using_psu(self) -> bool:
        """Используется ли ИП для управления питанием прибора."""
        return bool(self.psu_ip) and self.psu_type == 'psu'

    @property
    def using_pdcu(self) -> bool:
        """Используется ли БКП для управления питанием прибора."""
        return bool(self.pdcu_main_id) and self.psu_type in {'pdcu', 'pdcux'}


class DeviceConfig:
    """Конфигурация девайса из секции."""

    def __init__(
            self, device_id: str, power_supply_ip: str, stay_on: str, upload_in_allure: str, launch_name: str, **kwargs,
    ):
        """
        Конфигурация девайса из секции.

        :param device_id: can node_id
        :param power_supply_ip: ip of psu device connected to
        :param stay_on: keep turned on after tests
        :param upload_in_allure: upload or not to allure
        :param launch_name: launch name in uploaded report
        :param kwargs: other parameters from config
        """
        self.device_id = any2int(device_id)
        subnet = kwargs["inner_subnet"]
        if power_supply_ip and (subnet not in power_supply_ip):
            power_supply_ip = f'{subnet}.{power_supply_ip}'
        self.psu_ip = power_supply_ip
        self.stay_on = any2bool(stay_on)
        self.to_upload = any2bool(upload_in_allure)
        self.launch_name = launch_name
        for name, value in kwargs.items():
            setattr(self, name, value)

    def __getitem__(self, item):
        """For getitem syntax - config['parameter_name']."""
        return getattr(self, item)
