"""Hooks and pytest setup for Allure uploader."""

from pathlib import Path

import allure
import pytest

from stw_pro_test.uploader.allure.const import (
    ALLURE_FLAG,
    ALLURE_META_FILE,
    ALLURE_META_PATH_KEY,
    ALLURE_REPORT_DIR_KEY,
    LAUNCH_NAME_KEY,
    LAUNCH_TAGS_KEY,
    PROJECT_DEVICES_FILE,
    PROJECT_ID_KEY,
    PROJECTS_PATH_KEY,
    TOKEN_KEY,
    UPLOAD_RETRY_COUNT_KEY,
    UPLOAD_RETRY_DELAY_KEY,
)
from stw_pro_test.uploader.allure.utils import (
    allure_step,
    create_allure_meta_data,
    define_allure_report_dir,
    update_allure_meta_file,
    upload_allure_report,
)
from stw_pro_test.utils import one_time_unique_str


def pytest_addoption(parser: pytest.Parser) -> None:
    """Add custom cli arguments."""
    options_group: pytest.OptionGroup = parser.getgroup(
        'stw-pro-test.uploader.allure options',
    )
    options_group.addoption(
        f'--{TOKEN_KEY}',
        action='store',
        default=None,
        help='Token for Allure access',
    )
    options_group.addoption(
        f'--{PROJECT_ID_KEY}',
        action='store',
        default=None,
        help='Project id in Allure',
    )
    options_group.addoption(
        f'--{ALLURE_FLAG}',
        action='store_true',
        default=False,
        help='Upload or not in Allure',
    )
    options_group.addoption(
        f'--{LAUNCH_NAME_KEY}',
        action='store',
        default=one_time_unique_str,
        help='Launch name in Allure',
    )
    options_group.addoption(
        f'--{LAUNCH_TAGS_KEY}',
        action='store',
        default=None,
        help='Additional tags for launch',
    )
    options_group.addoption(
        f'--{ALLURE_REPORT_DIR_KEY}',
        action='store',
        help='Directory for allure report and meta file',
    )
    options_group.addoption(
        f'--{UPLOAD_RETRY_COUNT_KEY}',
        action='store',
        help='Retries count for Allure upload',
    )
    options_group.addoption(
        f'--{UPLOAD_RETRY_DELAY_KEY}',
        action='store',
        help='Retry delay for Allure upload',
    )


def pytest_configure(config: pytest.Config) -> None:
    """
    Allow plugins and conftest files to perform initial configuration.

    This hook is called for every plugin and initial conftest file after command
    line options have been parsed.
    After that, the hook is called for other conftest files as they are imported
    """
    config.option.using_allure = True

    meta_file_path: Path = Path(define_allure_report_dir(config=config) / ALLURE_META_FILE).resolve()
    config.general[ALLURE_META_PATH_KEY]: str = str(meta_file_path)  # type: ignore
    create_allure_meta_data(config=config)


def pytest_unconfigure(config: pytest.Config) -> None:
    """
    Called before test process is exited.

    :param config: The pytest config object.
    """
    projects_path = (Path(__file__).parent / PROJECT_DEVICES_FILE).resolve()
    config.general[PROJECTS_PATH_KEY] = str(projects_path)
    update_allure_meta_file(config=config)
    if config.general.getboolean(ALLURE_FLAG, False):
        upload_allure_report(config=config)


# Нельзя взять и просто так использовать декоратор,
# т.к. allure.step может быть менеджером контекста
allure.step = allure_step
