"""Утилиты для работы с Allure в проекте."""

from pathlib import Path
from typing import Any

import allure
import pytest
from loguru import logger

import stw_pro_test.upgraded_device.const as udc
import stw_pro_test.uploader.allure.const as ac
from stw_pro_test.uploader.allure.allurectl import Allurectl
from stw_pro_test.utils import get_file_data, one_time_hash_unique_str, one_time_unique_str, set_file_data

old_step = allure.step
try:
    logger.level('STEP', no=51, color='<magenta>')
except TypeError:
    ...  # If it has been already imported


def allure_step(tittle, *args, **kwargs):
    """Put functionality here."""
    # TODO add report editing (mark step as failed if failed with pytest-check)
    #  https://j.1440.space/browse/FUNTEST-318
    if old_step.__name__ == 'step':
        logger.log('STEP', tittle)  # Чтобы видеть ход проверки в real-time
        return old_step(tittle, *args, **kwargs)
    else:
        return old_step(tittle, *args, **kwargs)


def define_allure_report_dir(config: pytest.Config) -> Path:
    """Определяет путь к директории Allure и возвращает его."""
    allure_report_dir = (
        config.option.allure_report_dir
        or config.general.get(ac.ALLURE_REPORT_DIR_KEY)
        or f'{ac.REPORT_DIR_DEFAULT}/test_results_{one_time_hash_unique_str}'
    )
    allure_report_dir = Path(allure_report_dir).resolve()
    allure_report_dir.mkdir(parents=True, exist_ok=True)
    config.general[ac.ALLURE_REPORT_DIR_KEY] = str(allure_report_dir)
    config.option.allure_report_dir = str(allure_report_dir)
    return allure_report_dir


def create_allure_meta_data(config: pytest.Config) -> None:
    """Собирает данные из конфига и записывает в `allure_meta_file`."""
    tags = config.general.get(ac.LAUNCH_TAGS_KEY) or ''
    super_tags = ','.join([tag.strip() for tag in tags.split(',') if tag.strip()])
    # Именно так, чтобы tags = "a,, , b  " превратилось в "a,b", а не "a,,,b". Доверие? Не слышали.

    try:
        project = config.general.getint(ac.PROJECT_ID_KEY, 0)
    except ValueError:  # При запуске в CI что-то вызывает эту ошибку, я не поймал с разными конфигами.
        project = 0

    meta_data = {
        ac.AMF_TAGS: super_tags,
        ac.AMF_PROJECT_ID: project,
        ac.AMF_LAUNCH_NAME: config.general.get(ac.LAUNCH_NAME_KEY) or one_time_unique_str,
        ac.AMF_UPLOAD_FLAG: False,
    }
    meta_file_path = Path(config.general.get(ac.ALLURE_META_PATH_KEY))

    try:
        set_file_data(meta_file_path, meta_data)
    except TypeError:
        logger.error(f'Не удалось создать {meta_file_path}')
        return
    logger.debug(f'`allure_meta_file` создан по адресу {meta_file_path}')


def update_allure_meta_file(config: pytest.Config) -> None:
    """Обновляет `allure_meta_file` данными из `device_meta_file` (если такой есть)."""
    if config.general.get(ac.DEVICE_META_PATH_KEY) is None:
        return None

    allure_path = Path(config.general.get(ac.ALLURE_META_PATH_KEY))  # Существует, если мы прошли pytest_configure
    device_path = Path(config.general.get(ac.DEVICE_META_PATH_KEY))  # Может не быть
    projects_info_path = Path(config.general.get(ac.PROJECTS_PATH_KEY))  # Точно есть

    allure_meta: dict[str, Any] = get_file_data(file_path=allure_path, required_keys=[ac.AMF_PROJECT_ID, ac.AMF_TAGS])
    allure_projects: dict[str, list[str]] = get_file_data(file_path=projects_info_path)

    try:
        device_meta: dict[str, Any] = get_file_data(file_path=device_path, required_keys=[udc.DMF_NAME])
    except FileNotFoundError:
        logger.info('`device_meta_file` не найден; `allure_meta_file` не будет обновлён.')
        return

    for key, values in allure_projects.items():
        if isinstance(values, list) and device_meta[udc.DMF_NAME] in values:
            allure_meta[ac.AMF_PROJECT_ID] = key
            break

    if not allure_meta[ac.AMF_PROJECT_ID]:
        logger.warning('Не найден allure project-id, соответствующий device_name в device_meta_file.')

    device_tags = {
        device_meta[udc.DMF_VERSION] if udc.DMF_VERSION in device_meta else None,
        device_meta[udc.DMF_BOOT] if udc.DMF_BOOT in device_meta else None,
        device_meta[udc.DMF_SERIAL] if udc.DMF_SERIAL in device_meta else None,
    }
    device_tags.difference_update({'', None, False})
    # TODO: https://j.1440.space/browse/FUNTEST-488 валидация конфигов NOSONAR

    updated_tags = {tag.strip() for tag in allure_meta[ac.AMF_TAGS].split(',') if tag.strip()}.union(device_tags)
    allure_meta[ac.AMF_TAGS] = ','.join(updated_tags)  # type: ignore

    set_file_data(allure_path, allure_meta)


def upload_allure_report(config: pytest.Config) -> None:
    """Загружает отчёт Allure в нужную инстанцию."""
    allure_meta_path = Path(config.general.get(ac.ALLURE_META_PATH_KEY))
    upload_retries: int = config.general.getint(ac.UPLOAD_RETRY_COUNT_KEY, 0)
    upload_delay: int = config.general.getint(ac.UPLOAD_RETRY_DELAY_KEY, 10)

    if allure_meta_path.exists():  # Ибо хранятся запуска параметры там
        uploader = Allurectl(
            token=config.general.get(ac.TOKEN_KEY),
            report_dir=config.general.get(ac.ALLURE_REPORT_DIR_KEY),
        )
        uploader.upload(retries=upload_retries, delay=upload_delay)
        return
    logger.error(f'Файл конфигурации Allure не найден {allure_meta_path}!')
