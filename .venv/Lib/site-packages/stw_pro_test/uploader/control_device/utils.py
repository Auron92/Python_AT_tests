"""Utils for control device"""

from dataclasses import dataclass
from enum import Enum

from stw_pro_test.pygen.gen_cte_i_0_example.device_class import CteI0ExampleDevice
from stw_pro_test.pygen.gen_cte_i_0_example.types.cte_i0_example.cte_i0_example.subprogram_state_type import (
    SubprogramState,
)
from stw_pro_test.pygen.gen_cte_i_0_example.types.repstub.error_type import Error
from stw_pro_test.utils import create_sreda_device


class ReportWhen(Enum):
    """Литералы, используемые в pytest.when"""

    setup = 'setup'
    call = 'call'
    teardown = 'teardown'


@dataclass
class TestsTotals:
    """Данные по прохождению тестов; счетчики и т.п."""

    tests_overall: int
    tests_executed: int = 0
    tests_failed: int = 0
    percent_per_test: float = 0.0
    percent_executed: float | int = 0

    def __post_init__(self):
        """Заполняет бъект TestsTotals"""
        if not isinstance(self.tests_overall, int) or self.tests_overall <= 0:
            raise ValueError('Number of collected tests must be an integer greater than zero.')

        self.percent_per_test = 100 / self.tests_overall
        self.percent_executed = 0


def create_control_device(
    sreda_server_ip: str,
    control_device_id: int,
    control_device_module: str | None = None,
) -> CteI0ExampleDevice:
    """Создает `CteI0ExampleDevice` для работы с КПА"""
    if not (isinstance(sreda_server_ip, str) and isinstance(control_device_id, int)):
        raise TypeError('Incorrect parameter type')

    params = {
        'device_cls': CteI0ExampleDevice,
        'sreda_server_ip': sreda_server_ip,
        'device_id': control_device_id,
        'active_module': control_device_module,
    }
    params = {k: v for k, v in params.items() if v}

    return create_sreda_device(**params)


def get_subprogram_state(device: CteI0ExampleDevice, subprogram_id: int) -> SubprogramState:
    """Получает текущий State КПА"""
    sub_state: Error | SubprogramState = device.cmds.cte_i0_example.cte_i0_example.getSubprogramState(
        subprogram_id=subprogram_id,
    )
    if not isinstance(sub_state, SubprogramState):
        raise TypeError(f'Invalid subprogram state received: {sub_state}')
    return sub_state
