"""Hooks for uploading test progress to control device (cte-i0-example)."""

import pytest

from stw_pro_test.pygen.gen_cte_i_0_example.basic_types import float_type
from stw_pro_test.pygen.gen_cte_i_0_example.device_class import CteI0ExampleDevice
from stw_pro_test.pygen.gen_cte_i_0_example.types.cte_i0_example.cte_i0_example.status_type import Status
from stw_pro_test.pygen.gen_cte_i_0_example.types.cte_i0_example.cte_i0_example.string_type import String
from stw_pro_test.pygen.gen_cte_i_0_example.types.cte_i0_example.cte_i0_example.subprogram_state_type import (
    SubprogramState,
)
from stw_pro_test.uploader.control_device.utils import (
    ReportWhen,
    TestsTotals,
    create_control_device,
    get_subprogram_state,
)

tests_totals_key = pytest.StashKey[TestsTotals]()
subprogram_state_key = pytest.StashKey[SubprogramState]()
control_device_key = pytest.StashKey[CteI0ExampleDevice]()
control_device_enabled = pytest.StashKey[bool]()


def pytest_addoption(parser: pytest.Parser) -> None:
    """Add custom cli arguments."""
    options_group: pytest.OptionGroup = parser.getgroup(
        'stw-pro-test.uploader.control_device options',
    )
    options_group.addoption(
        '--subprogram_id',
        action='store',
        help='Id of running tests program',
    )
    options_group.addoption(
        '--subprogram_name',
        action='store',
        help='Name of running tests program',
    )
    options_group.addoption(
        '--control_device_module',
        action='store',
        help='Name of control device action module',
    )
    options_group.addoption(
        '--control_device_id',
        action='store',
        help='ID of control device',
    )


def pytest_runtestloop(session: pytest.Session) -> None:
    """
    Perform the main runtest loop (after collection finished).

    The default hook implementation performs the runtest protocol for all items
    collected in the session (session.items), unless the collection failed
    or the collectonly pytest option is set.

    ---

    Запускается после сбора тестов, становится доступно
    поле `session.testscollected`
    """
    stash = session.config.stash
    subprogram_id = session.config.general.getint('subprogram_id')
    control_device_module = session.config.general.get('control_device_module')
    control_device_id = session.config.general.getdecimal('control_device_id')
    subprogram_name = session.config.general.get('subprogram_name')
    sreda_server_ip = session.config.general.get('sreda_server_ip')

    stash[control_device_enabled] = subprogram_id and sreda_server_ip and control_device_id
    stash[tests_totals_key] = TestsTotals(tests_overall=session.testscollected)

    if stash[control_device_enabled]:
        # Подключаемся к устройсву и получаем текущий State
        device: CteI0ExampleDevice = create_control_device(sreda_server_ip, control_device_id, control_device_module)
        stash[control_device_key] = device
        sub_state: SubprogramState = get_subprogram_state(device, subprogram_id)

        # Заполняем(сбрасываем) этот стейт
        sub_state.progress = float_type(value=0)
        sub_state.status = Status.Work
        sub_state.name = String(subprogram_name or 'Unspecified')
        stash[subprogram_state_key] = sub_state

        device.cmds.cte_i0_example.cte_i0_example.setSubprogramState(sub_state)


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item: pytest.Item, call: pytest.CallInfo[None]):
    """Called to create a TestReport for each of the setup, call and teardown runtest phases of a test item."""
    outcome = yield
    stash: pytest.Stash = item.session.config.stash

    if stash[control_device_enabled]:
        report: pytest.TestReport = outcome.get_result()
        ttotals: TestsTotals = stash[tests_totals_key]

        subprogram_state: SubprogramState = stash[subprogram_state_key]

        if report.failed:  # Если тест провалился, сразу говорим, что всё сломалось
            ttotals.tests_failed += 1
            subprogram_state.status = Status.Broken

        if report.when == ReportWhen.teardown.value:  # После прохождения теста тикаем счетчик
            ttotals.tests_executed += 1
            if ttotals.tests_executed == ttotals.tests_overall:
                ttotals.percent_executed = 100  # Для ровного счета
            else:
                ttotals.percent_executed += ttotals.percent_per_test

            subprogram_state.progress = float_type(ttotals.percent_executed)

            device: CteI0ExampleDevice = stash[control_device_key]
            device.cmds.cte_i0_example.cte_i0_example.setSubprogramState(subprogram_state)


def pytest_unconfigure(config: pytest.Config) -> None:
    """Called before test process is exited."""
    stash = config.stash
    if (
        hasattr(stash, 'control_device_enabled')
        and stash[control_device_enabled]
        and stash[tests_totals_key].tests_failed == 0
    ):
        subprogram_state: SubprogramState = stash[subprogram_state_key]
        subprogram_state.status = Status.Success

        stash[control_device_key].cmds.cte_i0_example.cte_i0_example.setSubprogramState(subprogram_state)
