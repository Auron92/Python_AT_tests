"""Общий для всех сериализуемых сообщений класс."""
from abc import abstractmethod
from typing import Union


class Serializable(object):
    """Тип данных может быть сериализован и десериализован."""

    @abstractmethod
    def to_json(self) -> Union[str, int, float, bool, dict]:
        """Сериализовать в объект, который можно json.dumps."""
        raise NotImplementedError

    @classmethod
    def from_json(cls, json_data):
        """Собрать из json формата."""
        raise NotImplementedError

    @abstractmethod
    def to_bin(self) -> bytes:
        """Сереализовать в байтики."""
        raise NotImplementedError

    @classmethod
    def from_bin(cls, bin_data: bytes) -> tuple:
        """Собрать из bin данных."""
        raise NotImplementedError
