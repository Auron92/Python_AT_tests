"""Наблюдение за телеметрией."""
from time import time
from typing import Callable, Dict
from uuid import UUID, uuid4

from loguru import logger
from stw_py_api_runtime import app_config, logger_utils
from stw_py_api_runtime.gen_classes.telemetry.predicates import PredicateType, StreamMsgChannel, Subscriber
from stw_py_api_runtime.sdk.brokers.broker_api import TelemetryObserverAPI


class TelemetryObserver(TelemetryObserverAPI):
    """Наблюдатель за потоками телеметрии.

    Отвечает за механизм подписки и мониторинг delta-delta.
    """

    def __init__(self):
        self.subscribers: Dict[UUID, Subscriber] = {}

    def add_subscriber(self, predicate: PredicateType, use_single: bool, callback: Callable) -> UUID:
        """Добавить подписчика на сообщение."""
        subscriber_id = uuid4()
        self.subscribers[subscriber_id] = Subscriber(
            predicate=predicate,
            use_single=use_single,
            callback=callback,
        )

        logger_utils.write_tm_mark(f'Added subscriber {subscriber_id}: {predicate=}')
        return subscriber_id

    def remove_subscriber(self, subscriber_id: UUID):
        """Удалить подписчика по его id."""
        self.subscribers.pop(subscriber_id, None)
        logger_utils.write_tm_mark(f'Removed subscriber: {subscriber_id}')

    def notify_subscribers(self, message, channel: StreamMsgChannel):
        """Уведомить подписчиков о получении сообщения."""
        for subscriber_id in list(self.subscribers):
            subscriber = self.subscribers.get(subscriber_id)
            if not subscriber:
                continue
            if subscriber.predicate.is_match(message, channel):
                subscriber.callback(message)
                if subscriber.use_single:
                    self.remove_subscriber(subscriber_id)

    @staticmethod
    def check_delta_delta(timestamp, init_delta):  # noqa: WPS602
        """Проверить расхождение времени delta-delta на допустимое значение."""
        if not app_config.dd_enable:
            return

        system_time = time()
        device_time = timestamp / 1e9

        current_delta = system_time - device_time
        init_delta = init_delta or current_delta
        delta_delta = current_delta - init_delta

        if delta_delta > app_config.dd_threshold:
            logger.debug(f'{delta_delta=:.4f}')
