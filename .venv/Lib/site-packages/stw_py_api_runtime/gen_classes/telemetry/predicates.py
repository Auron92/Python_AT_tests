"""Модуль для наблюдения и подписки на телеметрию."""
import enum
from abc import abstractmethod
from dataclasses import dataclass
from typing import Any, Callable, Optional, Union

from stw_py_api_runtime.sdk.brokers.message import DeviceAddress


class StreamMsgChannel(enum.Enum):
    """Каналы, по которым приходят сообщения."""

    TM = 'tm'
    EVENT = 'event'
    REQ_REP = 'rep'

    def __repr__(self):
        return self.value

    def __str__(self):
        return self.name

    def __eq__(self, other):
        return self.value == other

    def __hash__(self):
        return hash(self.value)


class Predicate(object):
    """Описание соответствия сообщения какому-либо критерию."""

    @abstractmethod
    def is_match(self, message, channel: Optional[StreamMsgChannel] = None) -> bool:
        """Соответсвует ли сообщение условию предиката."""
        raise NotImplementedError


class AlwaysTruePredicate(Predicate):
    """Любое сообщение подходит под этот предикат."""

    def is_match(self, message, channel: Optional[StreamMsgChannel] = None) -> bool:
        """Соответствует ли сообщение условию предиката."""
        return True


@dataclass
class MessagePredicate(Predicate):
    """Идентификатор подписки на сообщение."""

    message_id: Optional[int] = None
    message_name: Optional[str] = None
    device_id: Optional[int] = None
    ip_address: Optional[str] = None
    channel: Optional[StreamMsgChannel] = None
    is_from_device: bool = True
    _device_address: Optional[DeviceAddress] = None

    def __post_init__(self):
        self._device_address = DeviceAddress(node_id=self.device_id, endpoint=self.ip_address)  # noqa: WPS601

    @abstractmethod
    def is_match(self, message, channel: Optional[StreamMsgChannel] = None) -> bool:
        """Соответсвует ли сообщение условию предиката."""
        raise NotImplementedError


PredicateType = Union[Predicate, Callable[[Any, StreamMsgChannel], bool]]


@dataclass
class Subscriber:
    """Подписчик на телеметрическое сообщение.

    Хранит callback - функцию, обрабатывающую полученное сообщение
    и use_single - флаг, при True значении которого подписка аннулируется после первого сообщения.
    """

    predicate: PredicateType
    callback: Callable
    use_single: bool = False
