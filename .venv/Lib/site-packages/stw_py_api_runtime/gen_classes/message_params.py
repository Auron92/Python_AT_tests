"""Описание сообщений из прошивки."""
import enum
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Callable, Optional, Type

from stw_py_api_runtime.gen_classes.telemetry.parse import Message
from stw_py_api_runtime.sdk.brokers.message import Priority


class FirmwareEntityType(enum.Enum):
    """Сущность сообщения согласно прошивке."""

    CMD = 'CMD'
    TM = 'TM'
    EVENT = 'EVENT'
    CFG = 'CFG'


@dataclass
class MessageParams:
    """Унифицированные параметры сообщения.

    У любой сущности cmd/tm/event есть сообщение формата запрос|ответ|исходящее.
    Но у каждой сущности свой набор форматов.
    Движок оперирует только форматами запрос-ответ и генерация исходящих.
    """

    req_msg_id: Optional[int] = None  # id команды или запроса ТМ
    rep_msg_id: Optional[int] = None  # id ответа на команду или ТМ по запросу
    out_msg_id: Optional[int] = None  # id исходящей ТМ или события
    req_data_type: Optional[Type[Message]] = None
    out_data_type: Optional[Type[Message]] = None
    priority: Priority = Priority.LOW


class EntityParams(ABC):
    """Параметры сообщения - сущности cmds/tms/events - как в исходной прошивке."""

    @abstractmethod
    def get_msg_params(self) -> MessageParams:
        """Получить унифицированные параметры сообщения."""


@dataclass
class CmdParams(EntityParams):
    """Параметры сообщения-команды как в исходной прошивке."""

    msg_id: int
    rep_id: int
    rep_type: Type[Message]
    args_type: Optional[Type[Message]] = None
    type: FirmwareEntityType = FirmwareEntityType.CMD

    def get_msg_params(self) -> MessageParams:
        """Получить унифицированные параметры сообщения."""
        return MessageParams(
            req_msg_id=self.msg_id,
            rep_msg_id=self.rep_id,
            req_data_type=self.args_type,
            out_data_type=self.rep_type,
        )


@dataclass
class TmParams(EntityParams):
    """Параметры ТМ-сообщения как в исходной прошивке."""

    msg_id: int
    req_id: int
    rep_id: int
    msg_type: Type[Message]
    type: FirmwareEntityType = FirmwareEntityType.TM
    priority: Priority = Priority.LOW

    def get_msg_params(self) -> MessageParams:
        """Получить унифицированные параметры сообщения."""
        return MessageParams(
            req_msg_id=self.req_id,
            rep_msg_id=self.rep_id,
            out_msg_id=self.msg_id,
            out_data_type=self.msg_type,
            priority=self.priority,
        )


@dataclass
class EventParams(EntityParams):
    """Параметры сообщения-события как в исходной прошивке."""

    msg_id: int
    msg_type: Type[Message]
    type: FirmwareEntityType = FirmwareEntityType.EVENT

    def get_msg_params(self) -> MessageParams:
        """Получить унифицированные параметры сообщения."""
        return MessageParams(
            out_msg_id=self.msg_id,
            out_data_type=self.msg_type,
        )


@dataclass
class CfgParams(EntityParams):
    """Параметры сообщения-cfg как в исходной прошивке."""

    msg_id: int
    msg_type: Type[Message]
    type: FirmwareEntityType = FirmwareEntityType.CFG

    def get_msg_params(self) -> MessageParams:
        """Получить унифицированные параметры сообщения."""
        return MessageParams(
            out_msg_id=self.msg_id,
            out_data_type=self.msg_type,
        )


@dataclass
class MessageHandler:
    """Обработчик сообщения."""

    name: str
    entity_type: FirmwareEntityType
    # все необходимые айдишники, типы ответов и т.д.
    params: MessageParams
    # метод обработчик сообщения, возвращает полезные данные сообщения - тм или ответ на команду
    response_getter: Callable

    @property
    def priority(self):
        """Приоритет сообщения."""
        return self.params.priority

    @priority.setter
    def priority(self, value: Priority):
        """Сеттер приоритета сообщения."""
        self.params.priority = value


class MessageHandlerStorage:
    """Хранилище хендлеров."""

    type_error_msg = 'Неизвестный тип ключа обработчика сообщения'

    def __init__(self):
        self._name2handler = {}
        self._id2handler = {}
        self._type2handler = {}

    def add(self, handler: MessageHandler):
        """Добавить хендлер в хранилище."""
        message_name = handler.name

        self._name2handler[message_name] = handler
        self._id2handler[handler.params.req_msg_id] = handler

        if handler.entity_type in {FirmwareEntityType.TM, FirmwareEntityType.EVENT}:
            self._id2handler[handler.params.out_msg_id] = handler

        out_data_type = handler.params.out_data_type
        if out_data_type is not None:
            self._type2handler[out_data_type] = handler

    def __contains__(self, item: str | int | Type):
        if isinstance(item, str):
            return item in self._name2handler
        elif isinstance(item, int):
            return item in self._id2handler
        elif isinstance(item, type):
            return item in self._type2handler
        raise TypeError(self.type_error_msg)

    def __getitem__(self, item: str | int | Type):
        if isinstance(item, str):
            return self._name2handler[item]
        elif isinstance(item, int):
            return self._id2handler[item]
        elif isinstance(item, type):
            return self._type2handler[item]
        raise TypeError(self.type_error_msg)

    def get(self, key: str | int | Type, otherwise: Optional[Any] = None):
        """Получить хендлер по ключу (имени, ID или типу out_data_type), иначе вернуть otherwise."""
        if isinstance(key, str):
            return self._name2handler.get(key, otherwise)
        elif isinstance(key, int):
            return self._id2handler.get(key, otherwise)
        elif isinstance(key, type):
            return self._type2handler.get(key, otherwise)
        raise TypeError(self.type_error_msg)
