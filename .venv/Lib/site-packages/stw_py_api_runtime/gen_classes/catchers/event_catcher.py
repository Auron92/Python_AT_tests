"""Обработчик событий."""
from typing import Callable, Generic, TypeVar
from uuid import UUID

from loguru import logger
from stw_py_api_runtime.gen_classes.catchers.catcher import BaseCatcher
from stw_py_api_runtime.gen_classes.catchers.statistic import Stats
from stw_py_api_runtime.gen_classes.telemetry.predicates import StreamMsgChannel
from stw_py_api_runtime.logger_utils import RuntimeAction
from stw_py_api_runtime.sdk.brokers.broker_api import EventCatcherAPI

EventType = TypeVar('EventType')


class EventCatcher(BaseCatcher, EventCatcherAPI, Generic[EventType]):
    """Получение событий."""

    _wait_map = {}

    def start(self):
        """Запустить получение ТМ сообщений."""
        log_msg = '(dev id: {0}, module: {1}) Start monitoring {2}, by {3} channel'.format(
            self.device_address, self.broker.get_active_module(), self.name, StreamMsgChannel.EVENT,
        )
        logger.log(RuntimeAction.STATS, log_msg)
        self.stats = Stats()  # noqa: WPS601
        self._run_getting(StreamMsgChannel.EVENT)

    def wait(
        self,
        timeout: int = None,
        condition: Callable = None,
    ):
        """Вернуть первое полученное event событие."""
        event = self._wait(timeout=timeout, channel=StreamMsgChannel.EVENT, condition=condition)
        log_str = '(dev id: {0}, module: {1}) Received EVENT {2} with data: {3}'.format(
            self.device_address, self.broker.get_active_module(), self.name, str(event),
        )
        logger.log(RuntimeAction.EVENT, log_str)
        return event

    def subscribe(
        self,
        callback: Callable,
        use_single: bool = False,
    ) -> UUID:
        """Подписаться на событие."""
        def internal_cb(transport_msg):
            data, _ = self.msg_type.from_bin(transport_msg.data)
            callback(data)

        predicate = self.broker.predicate_class(message_id=self.msg_id, device_id=self.device_address.node_id)
        return self.broker.subscribe_to_tm(
            predicate=predicate,
            callback=internal_cb,
            use_single=use_single,
        )
