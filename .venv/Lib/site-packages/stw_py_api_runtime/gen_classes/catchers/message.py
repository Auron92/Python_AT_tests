"""Средства для работы с сообщениями на уровне брокера."""
import threading
from typing import Callable, Optional

from stw_py_api_runtime.gen_classes.telemetry.parse import Message
from stw_py_api_runtime.gen_classes.telemetry.predicates import StreamMsgChannel
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI
from stw_py_api_runtime.sdk.brokers.fragments.unpacking import unpack_message
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress


def wait_message(  # noqa: WPS211
    *,
    broker: BrokerAPI,
    message_id: int,
    timeout: int,
    channel: StreamMsgChannel,
    return_types: ReturnTypes,
    device_address: Optional[DeviceAddress] = None,
    message_name: Optional[str] = None,
    condition: Optional[Callable] = None,
    is_from_device: bool = True,
) -> Message:
    """Дождаться сообщение и вернуть в десериализованном виде."""
    message = None
    received_event = threading.Event()

    def _callback(received_message):
        nonlocal message  # noqa: WPS420
        message = unpack_message(broker, received_message, message_name, channel, return_types)  # noqa: WPS442
        if condition is not None and not condition(message):
            return
        received_event.set()

    subscriber_id = broker.subscribe_to_tm(
        predicate=broker.predicate_class(
            device_id=device_address.node_id,
            ip_address=device_address.endpoint,
            message_id=message_id,
            channel=channel,
            is_from_device=is_from_device,
        ),
        callback=_callback,
        use_single=False,
    )
    message_received = received_event.wait(timeout=timeout)
    broker.unsubscribe_from_tm(subscriber_id)

    if message_received is False:
        msg_name = f'({message_name})' if message_name else ''
        raise TimeoutError(
            f'Message not received: id {message_id} {msg_name} '
            f'to/from device {device_address} over a channel {channel}.',  # noqa: WPS326
        )
    return message


def wait_transport_message(*args, **kwargs):
    """Вернуть сообщение недесериализованное: с header и т.д."""
    raise NotImplementedError
