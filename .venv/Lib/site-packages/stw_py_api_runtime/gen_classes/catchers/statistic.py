"""Все для сбора статистика по сообщениям."""
import statistics
from datetime import datetime, timedelta
from uuid import uuid4


class Stats(object):
    """Статистика получения сообщений."""

    def __init__(self):
        self.count = 0
        self.times = []
        self.rps = 0
        self.std_dev = []
        self.median = 0
        self.events = {}

    def __repr__(self):
        return f'Stats: count {self.count}'


def _get_rps(time_between):
    """Считаем rps."""
    rps = 0
    total = sum(time_between)
    rps_pre = total / len(time_between)
    if rps_pre != 0:
        rps = 60 / rps_pre
    return rps


def _time_between_msg(stats_times):
    """Считаем время между сообщениями."""
    return [
        timedelta.total_seconds(some_time - prev_time)
        for prev_time, some_time in zip(stats_times, stats_times[1:])
    ]


def _build_statistics(stats):
    """Обработка self.stats.times для получения более развернутой статистики."""
    if len(stats.times) > 1:
        time_between = _time_between_msg(stats.times)
        stats.std_dev.append(statistics.pstdev(time_between))
        stats.median = statistics.median(time_between)
        stats.rps = _get_rps(time_between)


def update_stats(stats, tm_object):
    """Обновить статистику данными на основе тм объекта."""
    time_now = datetime.now()
    timestamp = uuid4()
    stats.times.append(time_now)
    _build_statistics(stats)
    stats.events[timestamp] = tm_object
    stats.count += 1
