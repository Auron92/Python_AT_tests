"""Модуль работы с файлами на устройстве."""
import zlib
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from rich.progress import Progress
from stw_py_api_runtime.gen_classes.custom_types import Command
from stw_py_api_runtime.gen_shared_types import SharedTypesDevice
from stw_py_api_runtime.gen_shared_types.basic_types import uint32_t
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_crc_type import FileCrc
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_id_type import FileId
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_info_type import FileInfo
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_name_type import FileName
from stw_py_api_runtime.gen_shared_types.types.core.fs.fixed_data_arr_type import FixedDataArr
from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress


@dataclass
class FileHandler:  # noqa: WPS338
    """Класс работы с файлами на устройстве."""

    broker: BrokerAPI
    device_address: DeviceAddress
    file_id: int = 0
    chunk_size: int = 100
    cmd_batch_size: int = 5
    file_name_size: int = 32

    def __post_init__(self):
        self.shared_device = SharedTypesDevice(
            device_id=self.device_address.node_id,
            ip_address=self.device_address.endpoint,
            broker=self.broker,
        )
        self.get_file_info_msg = self.shared_device.cmds.core.fs.getFileInfo_msg

    def crc32_hash(self, bin_data: bytes | bytearray) -> int:
        """Подсчет crc32 хеша."""
        return zlib.crc32(bin_data)

    def _create_file(self, size: int):
        self.shared_device.cmds.core.fs.createFile(
            id=FileId(self.file_id),
            name=FileName([0] * self.file_name_size),  # noqa: WPS435; пока что вместо формирования заполняем нулями
            size=uint32_t(size),
        )

    def download_file(self, out_file_path: Optional[Path] = None) -> bytearray:  # noqa: WPS210
        """Загрузка файла с устройства."""
        file_info = self.get_file_info()
        true_crc = file_info.crc
        file_size = int(file_info.size)

        if file_size <= 0:
            raise FileNotFoundError(f'File device_id={self.shared_device}, file_id={self.file_id} wrong CRC!, {file_size=}')  # noqa: WPS221, E501

        cmds = self._get_download_cmds(file_size)

        with Progress() as progress:
            task = progress.add_task(
                f'Downloading file (device_id={self.device_address}, file_id={self.file_id})',
                total=file_size,
            )
            bin_data = self._exec_download_cmds(cmds, progress, task)[:file_size]

        recv_crc = self.crc32_hash(bin_data)
        if true_crc != recv_crc:
            raise ValueError(f'Wrong CRC! {true_crc=} != {recv_crc=}')

        if out_file_path is not None:
            with out_file_path.open('wb') as file:
                file.write(bin_data)

        return bin_data

    def _exec_download_cmds(self, cmds: List[Command], progress: Progress, task_id) -> bytearray:
        bin_data = bytearray()

        for batch_i in range(0, len(cmds), self.cmd_batch_size):
            rsps = self.shared_device.broker.send_command_batch(
                self.device_address,
                cmds[batch_i:batch_i + self.cmd_batch_size],
            )
            for rsp in rsps:
                bin_data.extend([int(element) for element in rsp.data])
                progress.update(task_id, advance=len(rsp.data))
        return bin_data

    def _exec_upload_cmds(self, cmds: list, progress: Progress, task_id):
        for batch_i in range(0, len(cmds), self.cmd_batch_size):
            rsps = self.shared_device.broker.send_command_batch(
                self.device_address,
                cmds[batch_i:batch_i + self.cmd_batch_size],
            )
            for rsp in rsps:
                if isinstance(rsp, Error):
                    raise IOError('File sending interrupted with error.')
                progress.update(task_id, advance=1)

    def get_file_info(self) -> FileInfo:
        """Получение информации о файле."""
        return self.shared_device.cmds.core.fs.getFileInfo(id=FileId(self.file_id))

    def _get_download_cmds(self, file_size: int) -> List[Command]:
        cmd_msg = self.shared_device.cmds.core.fs.getData_msg
        cmds = []

        for offset in range(0, file_size, self.chunk_size):
            # Если offset + chunk_size переваливает за размер файла, chunk_overflow становится больше 0
            chunk_overflow = max(offset + self.chunk_size - file_size, 0)
            size = self.chunk_size - chunk_overflow

            cmds.append(
                Command(
                    name=cmd_msg.name,
                    message_id=cmd_msg.msg_id,
                    args={
                        'file_id': FileId(self.file_id),
                        'offset': uint32_t(offset),
                        'size': uint32_t(size),
                    },
                    types=cmd_msg.rep_type.return_types,
                ),
            )

        return cmds

    def _get_upload_cmds(self, bin_data: bytes | bytearray) -> list:
        send_data_msg = self.shared_device.cmds.core.fs.sendData_msg
        cmds = []

        for offset in range(0, len(bin_data), self.chunk_size):
            chunk = bytearray(bin_data[offset:offset + self.chunk_size])
            chunk_size = len(chunk)
            chunk.extend([0] * (self.chunk_size - len(chunk)))  # noqa: WPS435

            cmds.append(
                Command(
                    name=send_data_msg.name,
                    message_id=send_data_msg.msg_id,
                    args={
                        'file_id': FileId(self.file_id),
                        'offset': uint32_t(offset),
                        'size': uint32_t(chunk_size),
                        'arr': FixedDataArr(chunk),
                    },
                    types=send_data_msg.rep_type.return_types,
                ),
            )

        return cmds

    def upload_file(self, bin_data: bytes | bytearray):
        """Отгрузка файла на устройство."""
        true_crc = self.crc32_hash(bin_data)

        self._create_file(len(bin_data))
        cmds = self._get_upload_cmds(bin_data)

        with Progress() as progress:
            task = progress.add_task(
                f'Sending file (device_id={self.device_address}, file_id={self.file_id})',
                total=len(cmds),
            )
            self._exec_upload_cmds(cmds, progress, task)
        self._upload_finish(true_crc)

    def _upload_finish(self, target_crc: int) -> None:
        """Закончить запись в файл."""
        self.shared_device.cmds.core.fs.finish(
            id=FileId(self.file_id),
            crc=FileCrc(target_crc),
        )
