"""Логирование ТМИ."""
import os
from datetime import datetime
from enum import Enum

from loguru import logger
from stw_py_api_runtime import app_config

log_tm_format = '>>>{time:YYYY-MM-DD HH:mm:ss} | <level>{level}</> | {message}<<<'

logger_def_format = (
    '<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> |'
    ' <level>{level: <8}</level> |'
    '<magenta>{extra[extra]}</magenta>'
    '{extra[sep]} '
    '<cyan>{name}</cyan>:'
    '<cyan>{function}</cyan>:'
    '<cyan>{line}</cyan> - '
    '<level>{message}</level>'
)


class RuntimeAction(str, Enum):  # noqa: WPS600
    """Типы логируемых действий в брокере и runtime."""

    STATS = 'STATS'
    TM = 'TM'
    COMMAND = 'COMMAND'
    EVENT = 'EVENT'
    MESSAGE = 'MESSAGE'


def new_log_file_name():
    """Имя для нового файла логов."""
    now_str = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
    return f'tm-{now_str}.txt'


def save_other_loggers(tm_logger_id):
    """Добавляем фильтры всем кастомным логгерам, если у них их нет.

    Если есть, то владелец фильтра может его дополнить спасением от нашей телеметрии,
    основываясь на filter_not_tm_logs().
    """
    for handler_id, handler in logger._core.handlers.items():
        if handler._filter is None and handler_id != tm_logger_id:
            handler._filter = filter_not_tm_logs


def activate_tm_log():
    """Активировать логгер для записи ТМ сообщений."""
    if app_config.tm_log_folder:
        file_name = new_log_file_name()
        log_path = os.path.join(app_config.tm_log_folder, file_name)
        logger.debug(f'Tm log will be stored in: {log_path}.')

        tm_logger_id = logger.add(
            log_path, format=log_tm_format, level='INFO', filter=filter_tm_logs,
        )
        save_other_loggers(tm_logger_id)


def write_tm_log(tm_message):
    """Записать ТМ сообщение в лог."""
    if app_config.tm_log_folder:
        logger.info(f'{tm_message}')


def write_tm_mark(mark_text):
    """Добавить метку в лог."""
    if app_config.tm_log_folder:
        logger.info(f'mark: {mark_text}')


def filter_tm_logs(record: dict) -> bool:
    """Выбрать только те сообщения, которые направлены из TM логгера.

    Фильтр реализован в два этапа для производительности и читабельность.
    record['name'] может быть абсолютным путем от корня проекта, тогда он совпадает с __name__.
    А может быть относительным путем, тогда он входит в __name__.
    """
    if record['name'] == __name__:
        return True

    if record['name'] in __name__:
        return True


def filter_not_tm_logs(record: dict) -> bool:
    """Выбрать только те сообщения, которые направлены НЕ из TM логгера."""
    return not filter_tm_logs(record)


def setup_custom_logging():
    """Определение кастомных уровней логирования."""
    try:
        logger.level(RuntimeAction.STATS, no=15, color='<green>')
        logger.level(RuntimeAction.TM, no=16, color='<blue>')
        logger.level(RuntimeAction.COMMAND, no=17, color='<cyan>')
        logger.level(RuntimeAction.EVENT, no=18, color='<yellow>')
    except (TypeError, ValueError):
        logger.debug('Logger level already set up')
