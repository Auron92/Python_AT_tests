"""Сериализация timbrel сообщений."""
import ctypes
from dataclasses import dataclass
from enum import IntEnum
from typing import Union


class CtrlType(IntEnum):
    """Тип сообщения по ctrl каналу."""

    Cmd = 0
    Tm = 1


class BasePacked(ctypes.LittleEndianStructure):
    """Базовый класс для Packed сообщений."""


class CtrlPacked(BasePacked):
    """Описание Packed сообщения с ctrl канала."""

    name = 'Ctrl'
    _pack_ = 1
    _fields_ = [
        ('type', ctypes.c_uint8),
        ('nodeid', ctypes.c_uint8),
        ('msg_counter', ctypes.c_uint8),
        ('msg_id', ctypes.c_uint32),
        ('timestamp', ctypes.c_int64),
    ]


class TmPacked(BasePacked):
    """Описание Packed сообщения с tm канала."""

    name = 'Tm'
    _pack_ = 1
    _fields_ = [
        ('nodeid', ctypes.c_uint8),
        ('msg_counter', ctypes.c_uint8),
        ('msg_id', ctypes.c_uint32),
        ('timestamp', ctypes.c_int64),
    ]


class ReqPacked(BasePacked):
    """Описание Packed сообщения с req канала."""

    name = 'Req'
    _pack_ = 1
    _fields_ = [
        ('nodeid_client', ctypes.c_uint8),
        ('nodeid_server', ctypes.c_uint8),
        ('msg_counter', ctypes.c_uint8),
        ('msg_id', ctypes.c_uint32),
    ]


class RepPacked(BasePacked):
    """Описание Packed сообщения с rep канала."""

    name = 'Rep'
    _pack_ = 1
    _fields_ = [
        ('nodeid_client', ctypes.c_uint8),
        ('nodeid_server', ctypes.c_uint8),
        ('msg_counter', ctypes.c_uint8),
        ('msg_id', ctypes.c_uint32),
        ('timestamp', ctypes.c_int64),
    ]


PackedList = [
    CtrlPacked,
    TmPacked,
    ReqPacked,
    RepPacked,
]

PackedMap = dict(map(lambda packed: (packed.name, packed), PackedList))  # noqa: C417


@dataclass
class Packed:
    """Описание сообщения."""

    header: Union[CtrlPacked, TmPacked, ReqPacked, RepPacked]
    data: bytes


def deserialize(msg_type: str, msg_body: bytes) -> Packed:
    """Десериализовать байты в сообщение в формате Packed."""
    if msg_type not in PackedMap:
        raise KeyError(f'Unknown packed msg: {msg_type}')
    deserializer = PackedMap[msg_type]
    msg_header = deserializer.from_buffer_copy(msg_body)
    msg_payload = msg_body[ctypes.sizeof(deserializer):]
    return Packed(msg_header, msg_payload)


def serialize(packed_message: Packed) -> bytes:
    """Сериализовать в байты сообщение в формате Packed."""
    data_pointer = ctypes.cast(
        ctypes.byref(packed_message.header),
        ctypes.POINTER(ctypes.c_char * ctypes.sizeof(packed_message.header)),
    )
    return data_pointer.contents.raw + packed_message.data
