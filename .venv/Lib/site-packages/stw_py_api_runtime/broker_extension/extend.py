"""Расширение возможностей брокеров."""
import threading
from typing import Callable, Generic, TypeVar

from stw_py_api_runtime.gen_classes.telemetry.predicates import AlwaysTruePredicate
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI

MsgType = TypeVar('MsgType')


class MessageHandler(Generic[MsgType]):
    """Класс с методами для работы с сообщениями на уровне брокера."""

    def wait(self: BrokerAPI, *, condition: Callable[[MsgType], bool], timeout: int) -> MsgType:
        """Ожидать сообщение по условию и таймауту.

        Args:
            condition: булева функция, принимает десериализованное сообщение. Если вернет True, то сообщение получено
            timeout: сколько секунд ждать сообщение
        """
        message = None
        msg_received_event = threading.Event()

        def _callback(received_message):
            nonlocal message  # noqa: WPS420
            if condition(received_message):
                message = received_message  # noqa: WPS442
                msg_received_event.set()

        self.subscribe_to_tm(
            predicate=AlwaysTruePredicate(),
            callback=_callback,
            use_single=False,
        )
        message_received = msg_received_event.wait(timeout=timeout)
        if message_received is False:
            raise TimeoutError()
        return message
