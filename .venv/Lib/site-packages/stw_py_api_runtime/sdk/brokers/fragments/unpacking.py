"""Все для распаковки транспортного сообщения."""
# flake8: noqa WPS326
from typing import Optional, Tuple, Type

from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.gen_classes.types.serializable_base import Serializable
from stw_py_api_runtime.sdk import known_messages
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI
from stw_py_api_runtime.sdk.exceptions import (
    DeserializeError, RepstubMessageError, UnknownMessageError, UnpackMessageError,
)


def unpack_message(
    broker: BrokerAPI,
    message: object,
    message_name: str,
    channel: object,
    data_types: ReturnTypes,
):
    """Преобразовать message транспортного уровня в объект."""
    message_data = broker.get_message_data(message)
    full_msg_info = f'Message: {message_data}\nChannel: {channel}\nVariable returned types: {data_types}'

    try:
        msg_content, msg_type = broker.unpack_transport_message(message, channel, data_types)
    except (IndexError, KeyError) as exp:
        raise UnpackMessageError(
            f'Failed unpack data content and type of message {message_name}\n'
            f'{full_msg_info}\n'
            f'\nDetails: {exp}',
        ) from exp
    except UnknownMessageError as exp:
        raise UnknownMessageError(f'Сommand {message_name} received invalid rep: {exp}')

    try:
        msg_obj = broker.serializer.deserialize_tm(msg_content, msg_type)
    except DeserializeError as des_exp:
        raise DeserializeError(
            f'Failed deserialize data content to pygen type of message {message_name}\n'
            f'{full_msg_info}\n'
            f'Content data: {msg_content}\n'
            f'Pygen type: {msg_type}\n'
            f'\nDetails: {des_exp}',
        ) from des_exp

    msg_obj = msg_obj[0]
    meta = broker.get_message_meta(message)
    setattr(msg_obj, 'meta', meta)  # noqa: B010

    check_content_for_error(broker, data_types.error_type, msg_obj, message_name)

    return msg_obj


def unpack_bin_message(
    broker: BrokerAPI,
    message: object,
    message_id: int,
    data_bytes: bytes,
    data_types: ReturnTypes,
) -> Tuple[bytes, Type[Serializable]]:
    """Вытащить полезные данные и их тип из транспортного сообщения."""
    data_type = data_types.successful_type
    check_message_id(message_id)

    if broker.is_message_rep(message):
        type_index = data_bytes[0]
        data_bytes = data_bytes[1:]
        try:
            data_type = data_types[type_index]
        except IndexError:
            raise IndexError(f'Can not find type by index {type_index} in data types {data_types}')

    return data_bytes, data_type


def check_message_id(message_id: int):
    """Проверить, не является ли message id - id неизвестной ошибки."""
    if message_id in known_messages.error_map:
        error_text = known_messages.error_map.get(message_id)
        raise UnknownMessageError(f'Unknown response for message by id {message_id}: {error_text}')


def check_content_for_error(
    broker: BrokerAPI,
    error_type: Optional[Type],
    message: object,
    message_name: str,
):
    """Проверить содержание сообщение на ошибку от прибора."""
    if broker.raise_on_error_msg and error_type and isinstance(message, error_type):
        raise RepstubMessageError(f'Message {message_name} from device contains repstub error: {message}.')
