from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_py_api_runtime.gen_shared_types.basic_types import *


@dataclass
class StatusTm(_Message):
    """Функциональный статус о текущем состоянии прибора."""

    # Состояние прибора
    from stw_py_api_runtime.gen_shared_types.types.core.heartbeat.state_type import State
    state: State
    # Накопленное количество предупреждений
    warnCnt: uint32_t
    # Накопленное количество ошибок
    errCnt: uint32_t


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.status = broker.tm_catcher_class[StatusTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=StatusTm, name='core.heartbeat.status',
            msg_id=3029201892, req_id=2783637266, rep_id=3538804612,
        )
