from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_py_api_runtime.gen_shared_types.basic_types import *


@dataclass
class ActiveEventsTm(_Message):
    """Вектор активных событий."""

    # Вектор активных событий (ошибок или предупреждений)
    from stw_py_api_runtime.gen_shared_types.types.core.dtc.active_events_type import ActiveEvents
    value: ActiveEvents


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.activeEvents = broker.tm_catcher_class[ActiveEventsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=ActiveEventsTm, name='core.dtc.activeEvents',
            msg_id=2448110288, req_id=846030069, rep_id=1164596323,
        )
