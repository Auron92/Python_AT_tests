import hashlib
from functools import cached_property, partialmethod
from pathlib import Path

import zpaq
from humanfriendly.terminal import message
from loguru import logger
from stw_py_api_runtime.gen_classes.simulator import DeviceSim
from stw_py_api_runtime.gen_classes.telemetry.generator import TmFrequency

from stw_py_api_runtime.gen_shared_types.basic_types import *
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import GetDataRep
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import SendDataRep
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import FinishReq
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import GetFileInfoReq
from stw_py_api_runtime.gen_shared_types.types.core.fs.fixed_data_arr_type import FixedDataArr
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import GetDataReq
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_crc_type import FileCrc
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import GetFileInfoRep
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_id_type import FileId
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import FinishRep
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import CreateFileRep
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import CreateFileReq
from stw_py_api_runtime.gen_shared_types.types.core.dtc.severity_type import Severity
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import GetFilesListRep
from stw_py_api_runtime.gen_shared_types.tms.next_level.core_module.next_level.heartbeat import StatusTm
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.dtc import ClearActiveEventRep
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.dtc import FlushRep
from stw_py_api_runtime.gen_shared_types.tms.next_level.core_module.next_level.dtc import ActiveEventsTm
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.dtc import FlushReq
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_name_type import FileName
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.dtc import ClearActiveEventReq
from stw_py_api_runtime.gen_shared_types.cmds.command_sender_module.next_level.core_module.next_level.fs import SendDataReq


from .entities import entity_message_map
from .types.repstub.error_type import Error
from .types.repstub.ok_type import Ok


class SharedTypesDeviceSim(DeviceSim):

    @property
    def _entity_message_map(self):
        return entity_message_map

    @property
    def yml_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.yml').open('rb') as file:
            return file.read()

    @cached_property
    def zpaq_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.zpaq').open('rb') as file:
            return file.read()

    
    
    def core_dtc_activeEvents(self) -> ActiveEventsTm:
        """TM: Вектор активных событий."""
        
    
    core_heartbeat_status = partialmethod(DeviceSim._core_heartbeat_status)
    
    
    def core_dtc_clearActiveEvent(self, msgid: int) -> ClearActiveEventRep.annotation_type:
        """CMD: Снятие активного события."""
        return Error.NotImplemented
    
    def core_dtc_flush(self, severity: Severity) -> FlushRep.annotation_type:
        """CMD: Записать события в файл."""
        return Error.NotImplemented
    
    def core_fs_getData(self, id: FileId, offset: int, size: int) -> GetDataRep.annotation_type:
        """CMD: Получить часть файла."""
        return Error.NotImplemented
    
    def core_fs_sendData(self, id: FileId, offset: int, size: int, arr: FixedDataArr) -> SendDataRep.annotation_type:
        """CMD: Отправить часть файла."""
        return Error.NotImplemented
    
    def core_fs_getFileInfo(self, id: FileId) -> GetFileInfoRep.annotation_type:
        """CMD: Запросить информацию о файле."""
        return Error.NotImplemented
    
    def core_fs_getFilesList(self) -> GetFilesListRep.annotation_type:
        """CMD: Запросить список id файлов."""
        return Error.NotImplemented
    
    def core_fs_createFile(self, id: FileId, name: FileName, size: int) -> CreateFileRep.annotation_type:
        """CMD: Создать файл."""
        return Error.NotImplemented
    
    def core_fs_finish(self, id: FileId, crc: FileCrc) -> FinishRep.annotation_type:
        """CMD: Закончить запись в файл."""
        return Error.NotImplemented