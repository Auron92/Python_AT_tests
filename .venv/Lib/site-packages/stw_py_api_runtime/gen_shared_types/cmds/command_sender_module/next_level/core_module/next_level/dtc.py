from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_py_api_runtime.gen_shared_types.basic_types import *

from stw_py_api_runtime.gen_shared_types.types.core.dtc.severity_type import Severity



@dataclass
class ClearActiveEventReq(ReqMessage):
    """Описание аргументов команды core.dtc.clearActiveEvent."""

    # Идентификатор события для снятия
    msgid: uint32_t


class ClearActiveEventRep(RepMessage):
    """Описание возможных ответов на команду core.dtc.clearActiveEvent."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class FlushReq(ReqMessage):
    """Описание аргументов команды core.dtc.flush."""

    # Тип событий
    severity: Severity


class FlushRep(RepMessage):
    """Описание возможных ответов на команду core.dtc.flush."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.clearActiveEvent_msg: CmdCatcherAPI = broker.cmd_catcher_class[ClearActiveEventRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ClearActiveEventReq, rep_type=ClearActiveEventRep,
            name='core.dtc.clearActiveEvent', msg_id=2016867397, rep_id=3080081033,
        )
        self.flush_msg: CmdCatcherAPI = broker.cmd_catcher_class[FlushRep.annotation_type](
            broker=broker, device_address=device_address, req_type=FlushReq, rep_type=FlushRep,
            name='core.dtc.flush', msg_id=1816925282, rep_id=3969600687,
        )

    def clearActiveEvent(
        self, msgid: int, **kwargs,
    ) -> ClearActiveEventRep.annotation_type:
        """Снятие активного события"""
        return self.clearActiveEvent_msg(msgid, **kwargs)

    def flush(
        self, severity: Severity, **kwargs,
    ) -> FlushRep.annotation_type:
        """Записать события в файл"""
        return self.flush_msg(severity, **kwargs)

