from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_py_api_runtime.gen_shared_types.basic_types import *

from stw_py_api_runtime.gen_shared_types.types.core.fs.file_crc_type import FileCrc
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_id_type import FileId
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_name_type import FileName
from stw_py_api_runtime.gen_shared_types.types.core.fs.fixed_data_arr_type import FixedDataArr



@dataclass
class GetDataReq(ReqMessage):
    """Описание аргументов команды core.fs.getData."""

    # None
    id: FileId
    # None
    offset: uint32_t
    # None
    size: uint32_t


class GetDataRep(RepMessage):
    """Описание возможных ответов на команду core.fs.getData."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.core.fs.fixed_data_type import FixedData

    annotation_type = Union[Error, FixedData]
    return_types = ReturnTypes(Error, FixedData)


@dataclass
class SendDataReq(ReqMessage):
    """Описание аргументов команды core.fs.sendData."""

    # None
    id: FileId
    # None
    offset: uint32_t
    # None
    size: uint32_t
    # None
    arr: FixedDataArr


class SendDataRep(RepMessage):
    """Описание возможных ответов на команду core.fs.sendData."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class GetFileInfoReq(ReqMessage):
    """Описание аргументов команды core.fs.getFileInfo."""

    # None
    id: FileId


class GetFileInfoRep(RepMessage):
    """Описание возможных ответов на команду core.fs.getFileInfo."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.core.fs.file_info_type import FileInfo

    annotation_type = Union[Error, FileInfo]
    return_types = ReturnTypes(Error, FileInfo)




class GetFilesListRep(RepMessage):
    """Описание возможных ответов на команду core.fs.getFilesList."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.core.fs.files_list_type import FilesList

    annotation_type = Union[Error, FilesList]
    return_types = ReturnTypes(Error, FilesList)


@dataclass
class CreateFileReq(ReqMessage):
    """Описание аргументов команды core.fs.createFile."""

    # None
    id: FileId
    # None
    name: FileName
    # None
    size: uint32_t


class CreateFileRep(RepMessage):
    """Описание возможных ответов на команду core.fs.createFile."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class FinishReq(ReqMessage):
    """Описание аргументов команды core.fs.finish."""

    # None
    id: FileId
    # None
    crc: FileCrc


class FinishRep(RepMessage):
    """Описание возможных ответов на команду core.fs.finish."""

    from stw_py_api_runtime.gen_shared_types.types.repstub.error_type import Error    from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.getData_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetDataRep.annotation_type](
            broker=broker, device_address=device_address, req_type=GetDataReq, rep_type=GetDataRep,
            name='core.fs.getData', msg_id=801026859, rep_id=535790568,
        )
        self.sendData_msg: CmdCatcherAPI = broker.cmd_catcher_class[SendDataRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SendDataReq, rep_type=SendDataRep,
            name='core.fs.sendData', msg_id=1710034971, rep_id=862273129,
        )
        self.getFileInfo_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetFileInfoRep.annotation_type](
            broker=broker, device_address=device_address, req_type=GetFileInfoReq, rep_type=GetFileInfoRep,
            name='core.fs.getFileInfo', msg_id=1640507228, rep_id=4212963590,
        )
        self.getFilesList_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetFilesListRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetFilesListRep,
            name='core.fs.getFilesList', msg_id=3948368546, rep_id=875269826,
        )
        self.createFile_msg: CmdCatcherAPI = broker.cmd_catcher_class[CreateFileRep.annotation_type](
            broker=broker, device_address=device_address, req_type=CreateFileReq, rep_type=CreateFileRep,
            name='core.fs.createFile', msg_id=1147027662, rep_id=3453138007,
        )
        self.finish_msg: CmdCatcherAPI = broker.cmd_catcher_class[FinishRep.annotation_type](
            broker=broker, device_address=device_address, req_type=FinishReq, rep_type=FinishRep,
            name='core.fs.finish', msg_id=3016600587, rep_id=1426865601,
        )

    def getData(
        self, id: FileId, offset: int, size: int, **kwargs,
    ) -> GetDataRep.annotation_type:
        """Получить часть файла"""
        return self.getData_msg(id, offset, size, **kwargs)

    def sendData(
        self, id: FileId, offset: int, size: int, arr: FixedDataArr, **kwargs,
    ) -> SendDataRep.annotation_type:
        """Отправить часть файла"""
        return self.sendData_msg(id, offset, size, arr, **kwargs)

    def getFileInfo(
        self, id: FileId, **kwargs,
    ) -> GetFileInfoRep.annotation_type:
        """Запросить информацию о файле"""
        return self.getFileInfo_msg(id, **kwargs)

    def getFilesList(
        self,  **kwargs,
    ) -> GetFilesListRep.annotation_type:
        """Запросить список id файлов"""
        return self.getFilesList_msg(**kwargs)

    def createFile(
        self, id: FileId, name: FileName, size: int, **kwargs,
    ) -> CreateFileRep.annotation_type:
        """Создать файл"""
        return self.createFile_msg(id, name, size, **kwargs)

    def finish(
        self, id: FileId, crc: FileCrc, **kwargs,
    ) -> FinishRep.annotation_type:
        """Закончить запись в файл"""
        return self.finish_msg(id, crc, **kwargs)

