"""Работа с файлами прибора."""
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Union

from loguru import logger
from stw_py_api_runtime.file_loading.loading import (
    DataDownloader, DataUploader, LoadMode, create_downloader, create_uploader,
)
from stw_py_api_runtime.gen_shared_types import SharedTypesDevice
from stw_py_api_runtime.gen_shared_types.basic_types import uint32_t
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_crc_type import FileCrc
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_id_type import FileId
from stw_py_api_runtime.gen_shared_types.types.core.fs.file_name_type import FileName
from stw_py_api_runtime.gen_shared_types.types.repstub.ok_type import Ok
from stw_py_api_runtime.general import crc32_hash
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI


@dataclass
class FileHandler:  # noqa: WPS338
    """Класс работы с файлом на устройстве."""

    load_mode: LoadMode
    broker: BrokerAPI
    device_id: int
    file_id: int = 0
    file_name: str = ''
    file_name_size: int = 32

    _chunk_size: int = 100
    _uploader: Optional[DataUploader] = None
    _downloader: Optional[DataDownloader] = None

    def __post_init__(self):
        self.device = SharedTypesDevice(self.device_id, self.broker)
        # TODO в рамках PLATSWRIG-2214 пофиксить, если задается строкой, внутри в любом случае приводим к FileName
        self.file_name = self.file_name or [0] * self.file_name_size  # noqa: WPS435, WPS601

        self._uploader = create_uploader(  # noqa: WPS601
            load_mode=self.load_mode,
            file_id=self.file_id,
            chunk_size=self._chunk_size,
            command=self.device.cmds.core.fs.sendData_msg,
            broker=self.broker,
            device_id=self.device_id,
        )
        self._downloader = create_downloader(  # noqa: WPS601
            load_mode=self.load_mode,
            file_id=self.file_id,
            chunk_size=self._chunk_size,
            command=self.device.cmds.core.fs.getData_msg,
            broker=self.broker,
            device_id=self.device_id,
        )

    def upload_file(self, in_file_path: Union[str, Path]):
        """Загрузить файл в прибор."""
        logger.debug(f'Start file (id: {self.file_id}) uploading on board from {in_file_path}')

        with open(in_file_path, 'rb') as in_file:
            bin_data = in_file.read()
            self.upload_file_bin(bin_data)

        # TODO PLATSWRIG-2214 отразить в логах device_id, mode и тд
        logger.debug('Finish file uploading on device')

    def download_file(self, out_file_path: Union[str, Path]):
        """Скачать файл с прибора."""
        logger.debug(f'Start file (id: {self.file_id}) downloading from device (id: {self.device_id})')

        with open(out_file_path, 'wb') as out_file:
            bin_data = self.download_file_bin()
            out_file.write(bin_data)

        logger.debug(f'Finish file downloading to {out_file_path}')

    def upload_file_bin(self, bin_data: Union[bytes, bytearray]):
        """Загрузить массив байтов в файл на приборе."""
        crc = crc32_hash(bin_data)
        size = len(bin_data)

        self._create_file(size)
        self._uploader.upload(bin_data, size=size, crc=crc)
        self._finish_file_upload(crc)

    def download_file_bin(self) -> bytes:
        """Скачать файл с прибора в виде массива байтов."""
        file_info = self.device.cmds.core.fs.getFileInfo(id=FileId(self.file_id))
        crc = file_info.crc
        size = int(file_info.size)

        # TODO PLATSWRIG-2214 отразить в логах, если crc и size = 0, то файла в памяти нет

        return self._downloader.download(size=size, crc=crc)

    def _create_file(self, size: int):
        rep = self.device.cmds.core.fs.createFile(
            id=FileId(self.file_id),
            name=FileName(self.file_name),
            size=uint32_t(size),
        )
        if rep != Ok.Ok:
            raise ValueError(
                f'Failed creating file (id: {self.file_id}, name: {self.file_name}, size: {size}). '
                f'Device responded {rep}',  # noqa: WPS326
            )
        logger.debug(f'Created file (id: {self.file_id}, name: {self.file_name}, size: {size})')  # noqa: WPS221

    def _finish_file_upload(self, target_crc: int):
        """Закончить запись в файл."""
        rep = self.device.cmds.core.fs.finish(
            id=FileId(self.file_id),
            crc=FileCrc(target_crc),
        )
        if rep != Ok.Ok:
            raise ValueError(
                f'Failed finishing of file uploading (id: {self.file_id}, target crc: {target_crc}). '
                f'Device responded {rep}',  # noqa: WPS326
            )
