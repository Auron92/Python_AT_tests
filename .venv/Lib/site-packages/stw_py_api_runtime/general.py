"""Общие функции для runtime части."""
import zlib
from datetime import datetime, timedelta
from math import ceil
from typing import Union

from crccheck import crc

GPS_EPOCH = datetime(year=1980, month=1, day=6)
LEAP_SECONDS = timedelta(seconds=18)


def calculate_msg_id(message_name: str) -> int:
    """Конвертирует однозначно строковое имя ТМ сообщения в id типа int."""
    crc_zlib = crc.Crc32IsoHdlc()
    crc_zlib.process(message_name.encode('utf-8'))
    return crc_zlib.final()


def gps_to_utc(nanoseconds: int) -> datetime:
    """GPS -> UTC."""
    seconds = nanoseconds // 10 ** 9
    microseconds = (nanoseconds % 10 ** 9) // 1000
    delta = timedelta(seconds=seconds, microseconds=microseconds)
    return GPS_EPOCH + delta - LEAP_SECONDS


def get_gps_time_nano_sec() -> int:
    """Получить текущее время в GPS наносекундах."""
    return datetime_to_gps_nano_sec(datetime.now())


def datetime_to_gps_nano_sec(datetime_value: datetime) -> int:
    """Преобразовать datetime формат времени в GPS в наносекундах."""
    timestamp_sec = (datetime_value - GPS_EPOCH).total_seconds()
    timestamp_nano_sec = timestamp_sec * (10 ** 9)
    return int(timestamp_nano_sec)


def get_host_and_port(connection: str) -> tuple:
    """Распарсить адрес на хост и порт."""
    parts = connection.split(':')
    host = parts[0]
    port = parts[1] if len(parts) > 1 else None
    return host, port


def bytes_count(bits_count: int) -> int:
    """Перевести количество бит в количество байт."""
    return int(bits_count / 8)


def enough_bytes_count(bits_count: int) -> int:
    """Получить количество байт, вмещаемое данное количество бит.

    20 бит -> 3 байта
    """
    return ceil(bits_count / 8)


def crc32_hash(bin_data: Union[bytes, bytearray]) -> int:
    """Подсчет crc32 хеша."""
    return zlib.crc32(bin_data)
