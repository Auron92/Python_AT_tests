import hashlib
from functools import cached_property, partialmethod
from pathlib import Path

import zpaq
from humanfriendly.terminal import message
from loguru import logger
from stw_py_api_runtime.gen_classes.simulator import DeviceSim
from stw_py_api_runtime.gen_classes.telemetry.generator import TmFrequency

from stw_gen_sample3_api.basic_types import *
from stw_gen_sample3_api.tms.next_level.core_module.next_level.periph3 import TemperatureTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import HardwareIdTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import DisableRep as CoreTmDisableRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import DisableMsgRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import TransceiverFaultStatsTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sync_module.next_level.can2 import SetSlaveReq
from stw_gen_sample3_api.events.next_level.core_module.next_level.periph3 import PowerEventsEvent
from stw_gen_sample3_api.tms.next_level.core_module.next_level.periph3 import AdcVRefTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.pkg import HashTm
from stw_gen_sample3_api.types.core.time.ms_1_6u_type import ms16u
from stw_gen_sample3_api.tms.next_level.core_module.next_level.dtc import ActivesTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import DisableMsgReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.frm import BurnStatusTm
from stw_gen_sample3_api.types.core.metainfo.area_type import Area
from stw_gen_sample3_api.events.next_level.core_module.next_level.can import DetectedBusOffEvent
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import FrmTypeInfoTm
from stw_gen_sample3_api.events.next_level.core_module.next_level.periph3 import AdcVRefEventsEvent
from stw_gen_sample3_api.events.next_level.core_module.next_level.sync_module.next_level.can2 import ErrorEvent as CoreSyncCan2ErrorEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.pkg import GetChunkRep
from stw_gen_sample3_api.types.core.frm.data_type import Data
from stw_gen_sample3_api.events.next_level.core_module.next_level.sw import FrmTypeEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.rmtx import ExecPeriodicRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetActiveCanReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import InitReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sync_module.next_level.can2 import SetMasterReq
from stw_gen_sample3_api.events.next_level.core_module.next_level.can import ErrorEvent as CoreCanErrorEvent
from stw_gen_sample3_api.tms.next_level.core_module.next_level.frm import StatusTm as CoreFrmStatusTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.rmtx import ExecPeriodicReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import BurnRep
from stw_gen_sample3_api.types.core.periph3.voltage_channels_type import VoltageChannels
from stw_gen_sample3_api.types.core.rmtx.freq_type import Freq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import ReqMsgOnceReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import SetBySerialRep
from stw_gen_sample3_api.types.core.time.ms_3_2u_type import ms32u
from stw_gen_sample3_api.types.core.time.s_1_6u_type import s16u
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SetHardwareIdRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.service_module.next_level.mram import PartialTestResultTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import ReqMsgReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import CalcCrcRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.dtc import FlushRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetRecoveryTimeBusOffReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.pkg import GetChunkReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import GetCanInfoRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.checksum import CalculateReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetRecoveryTimeBusOffRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import VersionTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.metainfo import UpdateAreaReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.pkg import SmallHashTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.service_module.next_level.checksum import LastResultTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.periph3 import VoltageThresholdsTm
from stw_gen_sample3_api.events.next_level.core_module.next_level.sw import FwInfoEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sync_module.next_level.can2 import DisableRep as CoreSyncCan2DisableRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.pkg import GetMetaRep
from stw_gen_sample3_api.types.core.time.gps_type import Gps
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import SaveRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import SetRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetModeReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.frm import InfoTm as CoreFrmInfoTm
from stw_gen_sample3_api.types.core.service.types.pattern_type import Pattern
from stw_gen_sample3_api.tms.next_level.core_module.next_level.debug import StackHighWaterMarkTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SaveSerialRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetActiveCanRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import InitRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import ChannelStatsExtTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.service_module.next_level.mram import FullTestResultTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.metainfo import UpdateAreaRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sync_module.next_level.can2 import SetMasterRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.periph3 import SetVoltageThresholdReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SetSerialReq
from stw_gen_sample3_api.events.next_level.core_module.next_level.sw import BootReportEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import GetBySerialReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import SetPeriodsRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import GetSerialRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import FirmwareIdTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import SwitchBankRep
from stw_gen_sample3_api.events.next_level.core_module.next_level.periph3 import VoltageEventsEvent
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import ChannelStatsTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import OperatingTimeInfoTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import EnableMsgReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.time import NowTm
from stw_gen_sample3_api.cfg.next_level.core_module.next_level.periph3 import OverPowerThresholdCfg
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.periph3 import SetPowerThresholdRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import SwitchBankReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.tm import SettingsTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.service_module.next_level.mram import SafeTestResultTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import ResetRebootCountRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import SendDataReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import UpdateTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import AbortRep
from stw_gen_sample3_api.types.core.periph3.over_power_type import OverPower
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import CanStatsTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.periph3 import PowerThresholdTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import CrcTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import ResetInBootRep
from stw_gen_sample3_api.cfg.next_level.core_module.next_level.periph3 import VoltageThresholdsCfg
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SetModeRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import SizeTm
from stw_gen_sample3_api.types.core.nodeid2.node_id_type import NodeId
from stw_gen_sample3_api.types.core.sw.hardware_id_type import HardwareId
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SetSerialRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SetHardwareIdReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.time import SetTimeReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.tm import TimePeriodsTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import EnableMsgRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.heartbeat import StatusTm as CoreHeartbeatStatusTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import SaveActiveCanRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.mram import PartialTestRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import SaveHardwareIdRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import ExtErrorsTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import FinishRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.dtc import ClearActiveReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import DisableAllMsgsRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.mram import FullTestRep
from stw_gen_sample3_api.events.next_level.core_module.next_level.sw import ErrorEvent as CoreSwErrorEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import ResetRep
from stw_gen_sample3_api.events.next_level.core_module.next_level.metainfo import CorruptedEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import ReqMsgOnceRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.dtc import FlushReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.periph3 import CurVoltageTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.rmtx import ExecDelayedRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import SetReq
from stw_gen_sample3_api.types.core.periph3.voltage_threshold_type import VoltageThreshold, VoltageThresholdDict
from stw_gen_sample3_api.tms.next_level.core_module.next_level.debug import LastHardFaultTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import ResetTotalTimeRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.checksum import CalculateRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.can import GetCanErrorInfoRep
from stw_gen_sample3_api.types.core.sw.serial_type import Serial
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import CanErrorStatsTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import SetBySerialReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sw import ResetReasonTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import MainTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.time import SetTimeRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.time import DateTimeTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import SetPeriodsReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.rmtx import ExecDelayedReq
from stw_gen_sample3_api.types.core.dtc.severity_type import Severity
from stw_gen_sample3_api.events.next_level.core_module.next_level.debug import HardFaultReportEvent
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import BootTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.time import SetDateTimeReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.time import SetDateTimeRep
from stw_gen_sample3_api.types.core.tm.msg_id_type import MsgId
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.periph3 import SetVoltageThresholdRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import EnableRep
from stw_gen_sample3_api.events.next_level.core_module.next_level.debug import AssertReportEvent
from stw_gen_sample3_api.types.core.can.mode_type import Mode
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import SendDataRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.periph3 import SetPowerThresholdReq
from stw_gen_sample3_api.tms.next_level.core_module.next_level.metainfo import InfoTm as CoreMetainfoInfoTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.metainfo import UpdateAllRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sw import GetVersionRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.frm import FinishReq
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.tm import ReqMsgRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.dtc import ClearActiveRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.mram import SafeTestRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.sync_module.next_level.can2 import StatsTm
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import HighLevelStatsTm
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.time import SendSaveTimeRep
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.service_module.next_level.mram import PartialTestReq
from stw_gen_sample3_api.types.core.time.date_time_type import DateTime, DateTimeDict
from stw_gen_sample3_api.types.core.tm.freq_type import Freq
from stw_gen_sample3_api.types.core.can.can_bus_type import CanBus
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.nodeid2 import GetBySerialRep
from stw_gen_sample3_api.events.next_level.core_module.next_level.sync_module.next_level.can2 import StateChangedEvent
from stw_gen_sample3_api.cmds.command_sender_module.next_level.core_module.next_level.sync_module.next_level.can2 import SetSlaveRep
from stw_gen_sample3_api.tms.next_level.core_module.next_level.can import RecoveryTimeBusOffTm
from stw_gen_sample3_api.events.next_level.core_module.next_level.frm import BurnEventsEvent


from .entities import entity_message_map
from .types.repstub.error_type import Error
from .types.repstub.ok_type import Ok


class Sample3DeviceSim(DeviceSim):

    @property
    def _entity_message_map(self):
        return entity_message_map

    @property
    def yml_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.yml').open('rb') as file:
            return file.read()

    @cached_property
    def zpaq_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.zpaq').open('rb') as file:
            return file.read()

    
    
    def core_time_now(self) -> NowTm:
        """TM: Текущее время."""
        
    
    def core_time_dateTime(self) -> DateTimeTm:
        """TM: Текущие дата и время."""
        
    
    def core_can_canStats(self) -> CanStatsTm:
        """TM: Статистика обмена по двум CAN-шинам."""
        
    
    def core_can_canErrorStats(self) -> CanErrorStatsTm:
        """TM: Статистика ошибок по двум CAN-шинам."""
        
    
    def core_can_highLevelStats(self) -> HighLevelStatsTm:
        """TM: Статистика высокоуровневых ошибок по двум CAN-шинам."""
        
    
    def core_can_channelStats(self) -> ChannelStatsTm:
        """TM: Статистика по каналам Timbrel."""
        
    
    def core_can_channelStatsExt(self) -> ChannelStatsExtTm:
        """TM: Статистика по каналам Timbrel."""
        
    
    def core_can_extErrors(self) -> ExtErrorsTm:
        """TM: Расширенные ошибки."""
        
    
    def core_can_transceiverFaultStats(self) -> TransceiverFaultStatsTm:
        """TM: Статистика детектирования сигнала fault от трансивера."""
        
    
    def core_can_recoveryTimeBusOff(self) -> RecoveryTimeBusOffTm:
        """TM: Таймаут восстановления из состояния Bus Off."""
        
    
    def core_frm_status(self) -> CoreFrmStatusTm:
        """TM: Статус загрузки прошивки."""
        
    
    def core_frm_info(self) -> CoreFrmInfoTm:
        """TM: Информация о модуле перепрошивки."""
        
    
    def core_frm_burnStatus(self) -> BurnStatusTm:
        """TM: Статус прожига прошивки."""
        
    
    def core_tm_timePeriods(self) -> TimePeriodsTm:
        """TM: Периоды выдачи ТМ-сообщений."""
        
    
    def core_tm_settings(self) -> SettingsTm:
        """TM: Настройки телеметрии."""
        
    
    def core_dtc_actives(self) -> ActivesTm:
        """TM: Вектор активных неисправностей."""
        
    
    def core_sw_version(self) -> VersionTm:
        """TM: Версия ПО."""
        
    
    def core_sw_resetReason(self) -> ResetReasonTm:
        """TM: Причина перезагрузки."""
        
    
    def core_sw_operatingTimeInfo(self) -> OperatingTimeInfoTm:
        """TM: Информация о количестве перезагрузок, времени работы с последнего включения и общем времени работы прибора."""
        
    
    def core_sw_frmTypeInfo(self) -> FrmTypeInfoTm:
        """TM: Информация о типе исполняемом ПО."""
        
    
    def core_sw_hardwareId(self) -> HardwareIdTm:
        """TM: Программный идентификатор платы."""
        
    
    def core_sw_firmwareId(self) -> FirmwareIdTm:
        """TM: Id ПО."""
        
    
    def core_periph3_curVoltage(self) -> CurVoltageTm:
        """TM: Служебные напряжения и токи."""
        
    
    def core_periph3_temperature(self) -> TemperatureTm:
        """TM: Температуры прибора."""
        
    
    def core_periph3_voltageThresholds(self) -> VoltageThresholdsTm:
        """TM: Текущие пороги напряжения для отслеживания перехода между состояниями (Under<=>Normal<=>Over)."""
        
    
    def core_periph3_powerThreshold(self) -> PowerThresholdTm:
        """TM: Верхний порог мощности."""
        
    
    def core_periph3_adcVRef(self) -> AdcVRefTm:
        """TM: Опорное напряжение АЦП."""
        
    
    def core_pkg_hash(self) -> HashTm:
        """TM: контрольная сумма описания ПО."""
        
    
    def core_pkg_smallHash(self) -> SmallHashTm:
        """TM: короткая контрольная сумма описания ПО."""
        
    
    def core_debug_lastHardFault(self) -> LastHardFaultTm:
        """TM: Последняя информация о hardfault."""
        
    
    def core_debug_stackHighWaterMark(self) -> StackHighWaterMarkTm:
        """TM: Оставшийся объем стека."""
        
    
    core_heartbeat_status = partialmethod(DeviceSim._core_heartbeat_status)
    
    
    def core_metainfo_info(self) -> CoreMetainfoInfoTm:
        """TM: Мета-информация о прошивках."""
        
    
    def core_metainfo_boot(self) -> BootTm:
        """TM: Мета-информация о прошивке загрузчика."""
        
    
    def core_metainfo_main(self) -> MainTm:
        """TM: Мета-информация о прошивке в основной области памяти."""
        
    
    def core_metainfo_update(self) -> UpdateTm:
        """TM: Мета-информация о прошивке в области для загрузки."""
        
    
    def core_metainfo_size(self) -> SizeTm:
        """TM: Размер прошивки."""
        
    
    def core_metainfo_crc(self) -> CrcTm:
        """TM: CRC32 прошивки."""
        
    
    def core_service_mram_fullTestResult(self) -> FullTestResultTm:
        """TM: Результат последнего полного теста."""
        
    
    def core_service_mram_partialTestResult(self) -> PartialTestResultTm:
        """TM: Результат последнего частичного теста."""
        
    
    def core_service_mram_safeTestResult(self) -> SafeTestResultTm:
        """TM: Результат последнего безопасного теста."""
        
    
    def core_service_checksum_lastResult(self) -> LastResultTm:
        """TM: Результат последнего расчёта CRC32."""
        
    
    def core_sync_can2_stats(self) -> StatsTm:
        """TM: Информация о синхронизации времени."""
        
    
    core_can_error = partialmethod(DeviceSim._event_handler, message_name="core.can.error")
    
    
    core_can_detectedBusOff = partialmethod(DeviceSim._event_handler, message_name="core.can.detectedBusOff")
    
    
    core_frm_burnEvents = partialmethod(DeviceSim._event_handler, message_name="core.frm.burnEvents")
    
    
    core_sw_bootReport = partialmethod(DeviceSim._event_handler, message_name="core.sw.bootReport")
    
    
    core_sw_error = partialmethod(DeviceSim._event_handler, message_name="core.sw.error")
    
    
    core_sw_frmType = partialmethod(DeviceSim._event_handler, message_name="core.sw.frmType")
    
    
    core_sw_fwInfo = partialmethod(DeviceSim._event_handler, message_name="core.sw.fwInfo")
    
    
    core_periph3_voltageEvents = partialmethod(DeviceSim._event_handler, message_name="core.periph3.voltageEvents")
    
    
    core_periph3_powerEvents = partialmethod(DeviceSim._event_handler, message_name="core.periph3.powerEvents")
    
    
    core_periph3_adcVRefEvents = partialmethod(DeviceSim._event_handler, message_name="core.periph3.adcVRefEvents")
    
    
    core_debug_assertReport = partialmethod(DeviceSim._event_handler, message_name="core.debug.assertReport")
    
    
    core_debug_hardFaultReport = partialmethod(DeviceSim._event_handler, message_name="core.debug.hardFaultReport")
    
    
    core_metainfo_corrupted = partialmethod(DeviceSim._event_handler, message_name="core.metainfo.corrupted")
    
    
    core_sync_can2_stateChanged = partialmethod(DeviceSim._event_handler, message_name="core.sync.can2.stateChanged")
    
    
    core_sync_can2_error = partialmethod(DeviceSim._event_handler, message_name="core.sync.can2.error")
    
    
    def core_time_setTime(self, system: Gps) -> SetTimeRep.annotation_type:
        """CMD: Задать время."""
        return Error.NotImplemented
    
    def core_time_setDateTime(self, system: DateTime | DateTimeDict) -> SetDateTimeRep.annotation_type:
        """CMD: Задать дату и время."""
        return Error.NotImplemented
    
    def core_time_sendSaveTime(self) -> SendSaveTimeRep.annotation_type:
        """CMD: Отправить всем приборам команду сохранить время."""
        return Error.NotImplemented
    
    def core_can_setActiveCan(self, activeCan: CanBus) -> SetActiveCanRep.annotation_type:
        """CMD: Установить активную CAN-шину."""
        return Error.NotImplemented
    
    def core_can_saveActiveCan(self) -> SaveActiveCanRep.annotation_type:
        """CMD: Сохранить настройку активной CAN-шины."""
        return Error.NotImplemented
    
    def core_can_getCanInfo(self) -> GetCanInfoRep.annotation_type:
        """CMD: Получить информацию по CAN-шинам."""
        return Error.NotImplemented
    
    def core_can_getCanErrorInfo(self) -> GetCanErrorInfoRep.annotation_type:
        """CMD: Получить информацию об ошибках по CAN-шинам."""
        return Error.NotImplemented
    
    def core_can_setMode(self, can: CanBus, mode: Mode) -> SetModeRep.annotation_type:
        """CMD: Установить режим работы CAN."""
        return Error.NotImplemented
    
    def core_can_setRecoveryTimeBusOff(self, can: CanBus, value: s16u) -> SetRecoveryTimeBusOffRep.annotation_type:
        """CMD: Установить таймаут восстановления из состояния Bus Off."""
        return Error.NotImplemented
    
    def core_frm_init(self, size: int) -> InitRep.annotation_type:
        """CMD: Инициировать приём нового ПО."""
        return Error.NotImplemented
    
    def core_frm_finish(self, size: int, crc: int) -> FinishRep.annotation_type:
        """CMD: Закончить приём нового ПО."""
        return Error.NotImplemented
    
    def core_frm_abort(self) -> AbortRep.annotation_type:
        """CMD: Отменить приём нового ПО."""
        return Error.NotImplemented
    
    def core_frm_sendData(self, offset: int, size: int, data: Data) -> SendDataRep.annotation_type:
        """CMD: Блок данных нового ПО."""
        return Error.NotImplemented
    
    def core_frm_burn(self) -> BurnRep.annotation_type:
        """CMD: Обновить ПО."""
        return Error.NotImplemented
    
    def core_frm_switchBank(self, bank: int) -> SwitchBankRep.annotation_type:
        """CMD: Переключить активную область приёма нового ПО."""
        return Error.NotImplemented
    
    def core_frm_resetInBoot(self) -> ResetInBootRep.annotation_type:
        """CMD: Перезапустить ПО и остаться в загрузчике."""
        return Error.NotImplemented
    
    def core_frm_calcCrc(self) -> CalcCrcRep.annotation_type:
        """CMD: Рассчитать CRC загруженной части прошивки."""
        return Error.NotImplemented
    
    def core_tm_enable(self) -> EnableRep.annotation_type:
        """CMD: Разрешить передачу ТМ-сообщений (восстановление после применения команды disable)."""
        return Error.NotImplemented
    
    def core_tm_disable(self) -> CoreTmDisableRep.annotation_type:
        """CMD: Временно отключает отправку ТМ-сообщений (очередь при этом не очищается)."""
        return Error.NotImplemented
    
    core_tm_setPeriods = partialmethod(DeviceSim._core_tm_set_periods, return_types=SetPeriodsRep.return_types)
    
    
    core_tm_enableMsg = partialmethod(DeviceSim._core_tm_enable_msg, return_types=EnableMsgRep.return_types)
    
    
    def core_tm_reqMsgOnce(self, msgId: MsgId) -> ReqMsgOnceRep.annotation_type:
        """CMD: Однократно запросить ТМ-сообщение (устарело, следует пользоваться .reqMsg{})."""
        return Error.NotImplemented
    
    def core_tm_reqMsg(self, msgId: MsgId) -> ReqMsgRep.annotation_type:
        """CMD: Однократно запросить ТМ-сообщение."""
        return Error.NotImplemented
    
    core_tm_disableMsg = partialmethod(DeviceSim._core_tm_disable_msg, return_types=DisableMsgRep.return_types)
    
    
    def core_tm_disableAllMsgs(self) -> DisableAllMsgsRep.annotation_type:
        """CMD: Очистить все очереди отправки ТМ-сообщений."""
        return Error.NotImplemented
    
    def core_dtc_clearActive(self, msgid: MsgId) -> ClearActiveRep.annotation_type:
        """CMD: Снятие активной неисправности."""
        return Error.NotImplemented
    
    def core_dtc_flush(self, severity: Severity) -> FlushRep.annotation_type:
        """CMD: Записать неисправности в файл."""
        return Error.NotImplemented
    
    def core_sw_reset(self) -> ResetRep.annotation_type:
        """CMD: Перезагрузить прибор."""
        return Error.NotImplemented
    
    def core_sw_getVersion(self) -> GetVersionRep.annotation_type:
        """CMD: Запросить версию ПО прибора."""
        return Error.NotImplemented
    
    def core_sw_getSerial(self) -> GetSerialRep.annotation_type:
        """CMD: Запросить серийный номер прибора."""
        return Error.NotImplemented
    
    def core_sw_setSerial(self, newSerial: Serial) -> SetSerialRep.annotation_type:
        """CMD: Установить серийный номер прибора."""
        return Error.NotImplemented
    
    def core_sw_saveSerial(self) -> SaveSerialRep.annotation_type:
        """CMD: Сохранить серийный номер прибора."""
        return Error.NotImplemented
    
    def core_sw_resetRebootCount(self) -> ResetRebootCountRep.annotation_type:
        """CMD: Сбросить счетчик перезагрузок прибора."""
        return Error.NotImplemented
    
    def core_sw_resetTotalTime(self) -> ResetTotalTimeRep.annotation_type:
        """CMD: Сбросить счетчик общего времени работы прибора."""
        return Error.NotImplemented
    
    def core_sw_setHardwareId(self, value: HardwareId) -> SetHardwareIdRep.annotation_type:
        """CMD: Установить программный идентификатор платы."""
        return Error.NotImplemented
    
    def core_sw_saveHardwareId(self) -> SaveHardwareIdRep.annotation_type:
        """CMD: Сохранить программный идентификатор платы."""
        return Error.NotImplemented
    
    def core_nodeid2_set(self, nodeId: NodeId, newNodeId: NodeId) -> SetRep.annotation_type:
        """CMD: Установить новый Node ID."""
        return Error.NotImplemented
    
    def core_nodeid2_setBySerial(self, serialNumber: Serial, newNodeId: NodeId) -> SetBySerialRep.annotation_type:
        """CMD: Установить Node ID по серийному номеру."""
        return Error.NotImplemented
    
    def core_nodeid2_getBySerial(self, serialNumber: Serial) -> GetBySerialRep.annotation_type:
        """CMD: Запросить Node ID по серийному номеру."""
        return Error.NotImplemented
    
    def core_nodeid2_save(self) -> SaveRep.annotation_type:
        """CMD: Сохранить новый Node ID."""
        return Error.NotImplemented
    
    def core_periph3_setVoltageThreshold(self, channel: VoltageChannels, value: VoltageThreshold | VoltageThresholdDict) -> SetVoltageThresholdRep.annotation_type:
        """CMD: Задать пороги для каналов напряжения."""
        return Error.NotImplemented
    
    def core_periph3_setPowerThreshold(self, value: OverPower) -> SetPowerThresholdRep.annotation_type:
        """CMD: Задать верхний порог мощности."""
        return Error.NotImplemented
    
    core_pkg_getChunk = partialmethod(DeviceSim._core_pkg_get_chunk, return_types=GetChunkRep.return_types)
    
    
    core_pkg_getMeta = partialmethod(DeviceSim._core_pkg_get_meta, return_types=GetMetaRep.return_types)
    
    
    def core_rmtx_execDelayed(self, time: Gps, cmd: bytes_type) -> ExecDelayedRep.annotation_type:
        """CMD: отложенное исполнение команды."""
        return Error.NotImplemented
    
    core_rmtx_execPeriodic = partialmethod(DeviceSim._core_tm_enable_msg, return_types=ExecPeriodicRep.return_types)
    
    
    def core_metainfo_updateAll(self) -> UpdateAllRep.annotation_type:
        """CMD: Найти все мета-данные и обновить информацию о них."""
        return Error.NotImplemented
    
    def core_metainfo_updateArea(self, value: Area) -> UpdateAreaRep.annotation_type:
        """CMD: Найти мета-данные в определённой области памяти и обновить информацию о них."""
        return Error.NotImplemented
    
    def core_service_mram_fullTest(self) -> FullTestRep.annotation_type:
        """CMD: Начать полный тест (!) НЕБЕЗОПАСНО."""
        return Error.NotImplemented
    
    def core_service_mram_partialTest(self, value: Pattern) -> PartialTestRep.annotation_type:
        """CMD: Начать частичный тест (!) НЕБЕЗОПАСНО согласно указанному паттерну."""
        return Error.NotImplemented
    
    def core_service_mram_safeTest(self) -> SafeTestRep.annotation_type:
        """CMD: Начать безопасный тест (!) БЕЗОПАСНО."""
        return Error.NotImplemented
    
    def core_service_checksum_calculate(self, address: int, length: int) -> CalculateRep.annotation_type:
        """CMD: Рассчитать CRC32 области памяти."""
        return Error.NotImplemented
    
    def core_sync_can2_setMaster(self, time: ms16u) -> SetMasterRep.annotation_type:
        """CMD: Включение синхронизации в режиме master."""
        return Error.NotImplemented
    
    def core_sync_can2_setSlave(self, time: ms32u) -> SetSlaveRep.annotation_type:
        """CMD: Включение синхронизации в режиме slave."""
        return Error.NotImplemented
    
    def core_sync_can2_disable(self) -> CoreSyncCan2DisableRep.annotation_type:
        """CMD: Отключить синхронизацию времени."""
        return Error.NotImplemented