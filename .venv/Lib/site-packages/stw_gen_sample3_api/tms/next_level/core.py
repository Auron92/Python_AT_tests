from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from .core_module.next_level import time
from .core_module.next_level import can
from .core_module.next_level import frm
from .core_module.next_level import tm
from .core_module.next_level import dtc
from .core_module.next_level import sw
from .core_module.next_level import periph3
from .core_module.next_level import pkg
from .core_module.next_level import debug
from .core_module.next_level import heartbeat
from .core_module.next_level import metainfo
from .core_module.next_level import service
from .core_module.next_level import sync


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""
        self.time: time.Tm = time.Tm(device_address, broker, pygen_device)
        self.can: can.Tm = can.Tm(device_address, broker, pygen_device)
        self.frm: frm.Tm = frm.Tm(device_address, broker, pygen_device)
        self.tm: tm.Tm = tm.Tm(device_address, broker, pygen_device)
        self.dtc: dtc.Tm = dtc.Tm(device_address, broker, pygen_device)
        self.sw: sw.Tm = sw.Tm(device_address, broker, pygen_device)
        self.periph3: periph3.Tm = periph3.Tm(device_address, broker, pygen_device)
        self.pkg: pkg.Tm = pkg.Tm(device_address, broker, pygen_device)
        self.debug: debug.Tm = debug.Tm(device_address, broker, pygen_device)
        self.heartbeat: heartbeat.Tm = heartbeat.Tm(device_address, broker, pygen_device)
        self.metainfo: metainfo.Tm = metainfo.Tm(device_address, broker, pygen_device)
        self.service: service.Tm = service.Tm(device_address, broker, pygen_device)
        self.sync: sync.Tm = sync.Tm(device_address, broker, pygen_device)

