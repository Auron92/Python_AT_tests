from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class TimePeriodsTm(_Message):
    """Периоды выдачи ТМ-сообщений."""

    # Период отправки частой ТМ
    from stw_gen_sample3_api.types.core.time.ms_1_6u_type import ms16u
    often: ms16u
    # Период обычной частой ТМ
    ordinary: ms16u
    # Период отправки редкой ТМ
    rare: ms16u


@dataclass
class SettingsTm(_Message):
    """Настройки телеметрии."""

    # настройки ТМ
    from stw_gen_sample3_api.types.core.tm.settings_type import Settings
    settings: Settings


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.timePeriods = broker.tm_catcher_class[TimePeriodsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=TimePeriodsTm, name='core.tm.timePeriods',
            msg_id=3182733107, req_id=42261824, rep_id=1971580374,
        )
        self.settings = broker.tm_catcher_class[SettingsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=SettingsTm, name='core.tm.settings',
            msg_id=2750376497, req_id=2461706532, rep_id=3854408114,
        )
