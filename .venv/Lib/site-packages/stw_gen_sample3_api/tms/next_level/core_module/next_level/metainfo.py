from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class InfoTm(_Message):
    """Мета-информация о прошивках."""

    # Информация о прошивке загрузчика
    from stw_gen_sample3_api.types.core.metainfo.info__opt__type import Info_Opt_
    boot: Info_Opt_
    # Информация о прошивке в основной области
    main: Info_Opt_
    # Информация о прошивке в области для загрузки
    update: Info_Opt_


@dataclass
class BootTm(_Message):
    """Мета-информация о прошивке загрузчика."""

    # None
    from stw_gen_sample3_api.types.core.metainfo.info__opt__type import Info_Opt_
    value: Info_Opt_


@dataclass
class MainTm(_Message):
    """Мета-информация о прошивке в основной области памяти."""

    # None
    from stw_gen_sample3_api.types.core.metainfo.info__opt__type import Info_Opt_
    value: Info_Opt_


@dataclass
class UpdateTm(_Message):
    """Мета-информация о прошивке в области для загрузки."""

    # None
    from stw_gen_sample3_api.types.core.metainfo.info__opt__type import Info_Opt_
    value: Info_Opt_


@dataclass
class SizeTm(_Message):
    """Размер прошивки."""

    # None
    value: uint32_t


@dataclass
class CrcTm(_Message):
    """CRC32 прошивки."""

    # None
    value: uint32_t


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.info = broker.tm_catcher_class[InfoTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=InfoTm, name='core.metainfo.info',
            msg_id=3373805537, req_id=874881194, rep_id=1126338620,
        )
        self.boot = broker.tm_catcher_class[BootTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=BootTm, name='core.metainfo.boot',
            msg_id=1149022322, req_id=4278665235, rep_id=2281730181,
        )
        self.main = broker.tm_catcher_class[MainTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=MainTm, name='core.metainfo.main',
            msg_id=3183072210, req_id=2316387804, rep_id=4246107466,
        )
        self.update = broker.tm_catcher_class[UpdateTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=UpdateTm, name='core.metainfo.update',
            msg_id=3501523892, req_id=2254670554, rep_id=4049910348,
        )
        self.size = broker.tm_catcher_class[SizeTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=SizeTm, name='core.metainfo.size',
            msg_id=4115741404, req_id=576547206, rep_id=1431984400,
        )
        self.crc = broker.tm_catcher_class[CrcTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=CrcTm, name='core.metainfo.crc',
            msg_id=2163161918, req_id=96504967, rep_id=1925692433,
        )
