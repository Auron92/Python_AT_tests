from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class CanStatsTm(_Message):
    """Статистика обмена по двум CAN-шинам."""

    # Статистика по шинам
    from stw_gen_sample3_api.types.core.can.can_info_type import CanInfo
    can: CanInfo


@dataclass
class CanErrorStatsTm(_Message):
    """Статистика ошибок по двум CAN-шинам."""

    # Статистика ошибок по шинам
    from stw_gen_sample3_api.types.core.can.can_error_info_type import CanErrorInfo
    can: CanErrorInfo


@dataclass
class HighLevelStatsTm(_Message):
    """Статистика высокоуровневых ошибок по двум CAN-шинам."""

    # Статистика высокоуровневых ошибок по шине CAN1
    from stw_gen_sample3_api.types.core.can.high_level_stat_type import HighLevelStat
    can1: HighLevelStat
    # Статистика высокоуровневых ошибок по шине CAN2
    can2: HighLevelStat


@dataclass
class ChannelStatsTm(_Message):
    """Статистика по каналам Timbrel."""

    # Статистика по каналам Timbrel для CAN1
    from stw_gen_sample3_api.types.core.can.channel_stats_type import ChannelStats
    can1Stats: ChannelStats
    # Статистика по каналам Timbrel для CAN2
    can2Stats: ChannelStats


@dataclass
class ChannelStatsExtTm(_Message):
    """Статистика по каналам Timbrel."""

    # Статистика по каналам Timbrel для CAN1
    from stw_gen_sample3_api.types.core.can.channel_stats_ext_type import ChannelStatsExt
    can1Stats: ChannelStatsExt
    # Статистика по каналам Timbrel для CAN2
    can2Stats: ChannelStatsExt


@dataclass
class ExtErrorsTm(_Message):
    """Расширенные ошибки."""

    # Статистика ошибок для CAN1
    from stw_gen_sample3_api.types.core.can.error_counts_type import ErrorCounts
    can1: ErrorCounts
    # Статистика ошибок для CAN2
    can2: ErrorCounts


@dataclass
class TransceiverFaultStatsTm(_Message):
    """Статистика детектирования сигнала fault от трансивера."""

    # Статистика детектирования сигнала fault от трансивера для CAN1
    from stw_gen_sample3_api.types.core.can.fault_transceiver_type import FaultTransceiver
    can1: FaultTransceiver
    # Статистика детектирования сигнала fault от трансивера для CAN2
    can2: FaultTransceiver


@dataclass
class RecoveryTimeBusOffTm(_Message):
    """Таймаут восстановления из состояния Bus Off."""

    # Таймаут восстановления из состояния Bus Off для CAN1
    from stw_gen_sample3_api.types.core.time.s_1_6u_type import s16u
    can1: s16u
    # Таймаут восстановления из состояния Bus Off для CAN2
    can2: s16u


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.canStats = broker.tm_catcher_class[CanStatsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=CanStatsTm, name='core.can.canStats',
            msg_id=3950211540, req_id=3332069387, rep_id=2979817629,
        )
        self.canErrorStats = broker.tm_catcher_class[CanErrorStatsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=CanErrorStatsTm, name='core.can.canErrorStats',
            msg_id=3612741532, req_id=29934051, rep_id=1993339253,
        )
        self.highLevelStats = broker.tm_catcher_class[HighLevelStatsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=HighLevelStatsTm, name='core.can.highLevelStats',
            msg_id=3964294468, req_id=3565113226, rep_id=2742583068,
        )
        self.channelStats = broker.tm_catcher_class[ChannelStatsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=ChannelStatsTm, name='core.can.channelStats',
            msg_id=2748582999, req_id=4229912913, rep_id=2333632967,
        )
        self.channelStatsExt = broker.tm_catcher_class[ChannelStatsExtTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=ChannelStatsExtTm, name='core.can.channelStatsExt',
            msg_id=2103882165, req_id=4202139208, rep_id=2372976350,
        )
        self.extErrors = broker.tm_catcher_class[ExtErrorsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=ExtErrorsTm, name='core.can.extErrors',
            msg_id=1477487418, req_id=1822229684, rep_id=463090722,
        )
        self.transceiverFaultStats = broker.tm_catcher_class[TransceiverFaultStatsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=TransceiverFaultStatsTm, name='core.can.transceiverFaultStats',
            msg_id=2368798145, req_id=922142185, rep_id=1106376063,
        )
        self.recoveryTimeBusOff = broker.tm_catcher_class[RecoveryTimeBusOffTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=RecoveryTimeBusOffTm, name='core.can.recoveryTimeBusOff',
            msg_id=1538518710, req_id=2707487884, rep_id=3597126682,
        )
