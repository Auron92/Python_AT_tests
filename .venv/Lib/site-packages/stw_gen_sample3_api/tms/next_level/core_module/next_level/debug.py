from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class LastHardFaultTm(_Message):
    """Последняя информация о hardfault."""

    # Данные hard fault
    from stw_gen_sample3_api.types.core.debug.hard_fault_data_type import HardFaultData
    value: HardFaultData


@dataclass
class StackHighWaterMarkTm(_Message):
    """Оставшийся объем стека."""

    # Данные стека FreeRTOS
    from stw_gen_sample3_api.types.core.debug.stack_sizes_type import StackSizes
    value: StackSizes


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.lastHardFault = broker.tm_catcher_class[LastHardFaultTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=LastHardFaultTm, name='core.debug.lastHardFault',
            msg_id=2416395856, req_id=151035444, rep_id=2114432674,
        )
        self.stackHighWaterMark = broker.tm_catcher_class[StackHighWaterMarkTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=StackHighWaterMarkTm, name='core.debug.stackHighWaterMark',
            msg_id=3705934317, req_id=2245172690, rep_id=4074089796,
        )
