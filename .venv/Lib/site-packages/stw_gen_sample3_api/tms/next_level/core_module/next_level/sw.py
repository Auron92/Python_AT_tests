from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class VersionTm(_Message):
    """Версия ПО."""

    # Версия прошивки
    from stw_gen_sample3_api.types.core.sw.version_type import Version
    value: Version


@dataclass
class ResetReasonTm(_Message):
    """Причина перезагрузки."""

    # Причина сброса контроллера
    from stw_gen_sample3_api.types.core.sw.reset_reason_type import ResetReason
    value: ResetReason


@dataclass
class OperatingTimeInfoTm(_Message):
    """Информация о количестве перезагрузок, времени работы с последнего включения и общем времени работы прибора."""

    # Информация о количестве перезагрузок, времени работы с последнего включения и общем времени работы прибора
    from stw_gen_sample3_api.types.core.sw.operating_time_info_type import OperatingTimeInfo
    value: OperatingTimeInfo


@dataclass
class FrmTypeInfoTm(_Message):
    """Информация о типе исполняемом ПО."""

    # Тип ПО прибора
    from stw_gen_sample3_api.types.core.sw.firmware_type_type import FirmwareType
    value: FirmwareType


@dataclass
class HardwareIdTm(_Message):
    """Программный идентификатор платы."""

    # Программный идентификатор платы
    from stw_gen_sample3_api.types.core.sw.hardware_id_type import HardwareId
    value: HardwareId


@dataclass
class FirmwareIdTm(_Message):
    """Id ПО."""

    # Строка id ПО прибора
    from stw_gen_sample3_api.types.core.sw.firmware_id_type import FirmwareId
    value: FirmwareId


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.version = broker.tm_catcher_class[VersionTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=VersionTm, name='core.sw.version',
            msg_id=2807729658, req_id=25467106, rep_id=1988339828,
        )
        self.resetReason = broker.tm_catcher_class[ResetReasonTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=ResetReasonTm, name='core.sw.resetReason',
            msg_id=1620957376, req_id=1977514726, rep_id=47794800,
        )
        self.operatingTimeInfo = broker.tm_catcher_class[OperatingTimeInfoTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=OperatingTimeInfoTm, name='core.sw.operatingTimeInfo',
            msg_id=75110575, req_id=3704933273, rep_id=2882796303,
        )
        self.frmTypeInfo = broker.tm_catcher_class[FrmTypeInfoTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=FrmTypeInfoTm, name='core.sw.frmTypeInfo',
            msg_id=1789642440, req_id=3474695192, rep_id=3088880782,
        )
        self.hardwareId = broker.tm_catcher_class[HardwareIdTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=HardwareIdTm, name='core.sw.hardwareId',
            msg_id=1026055715, req_id=3636757686, rep_id=2948838432,
        )
        self.firmwareId = broker.tm_catcher_class[FirmwareIdTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=FirmwareIdTm, name='core.sw.firmwareId',
            msg_id=228690267, req_id=839990494, rep_id=1159072840,
        )
