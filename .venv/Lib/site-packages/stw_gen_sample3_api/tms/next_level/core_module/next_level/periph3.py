from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class CurVoltageTm(_Message):
    """Служебные напряжения и токи."""

    # Напряжение на выходе основного преобразователя
    uMain: uint16_t
    # Напряжение на выходе резервного преобразователя
    uRes: uint16_t
    # Напряжение в точке суммирования
    uSum: uint16_t
    # Ток в точке суммирования
    iSum: uint16_t


@dataclass
class TemperatureTm(_Message):
    """Температуры прибора."""

    # Температура платы
    tempBoard: int8_t
    # Температура микроконтроллера
    tempMcu: int8_t


@dataclass
class VoltageThresholdsTm(_Message):
    """Текущие пороги напряжения для отслеживания перехода между состояниями (Under<=>Normal<=>Over)."""

    # Пороги напряжения по всем каналам
    from stw_gen_sample3_api.types.core.periph3.channels_voltage_thresholds_type import ChannelsVoltageThresholds
    value: ChannelsVoltageThresholds


@dataclass
class PowerThresholdTm(_Message):
    """Верхний порог мощности."""

    # Верхний порог мощности
    from stw_gen_sample3_api.types.core.periph3.over_power_type import OverPower
    value: OverPower


@dataclass
class AdcVRefTm(_Message):
    """Опорное напряжение АЦП."""

    # None
    value: uint16_t


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.curVoltage = broker.tm_catcher_class[CurVoltageTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=CurVoltageTm, name='core.periph3.curVoltage',
            msg_id=4260110819, req_id=3319174439, rep_id=3000083889,
        )
        self.temperature = broker.tm_catcher_class[TemperatureTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=TemperatureTm, name='core.periph3.temperature',
            msg_id=1919804186, req_id=4077697439, rep_id=2215348489,
        )
        self.voltageThresholds = broker.tm_catcher_class[VoltageThresholdsTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=VoltageThresholdsTm, name='core.periph3.voltageThresholds',
            msg_id=1525869936, req_id=1852161501, rep_id=425889099,
        )
        self.powerThreshold = broker.tm_catcher_class[PowerThresholdTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=PowerThresholdTm, name='core.periph3.powerThreshold',
            msg_id=4128995213, req_id=3123833319, rep_id=3442923889,
        )
        self.adcVRef = broker.tm_catcher_class[AdcVRefTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=AdcVRefTm, name='core.periph3.adcVRef',
            msg_id=540093218, req_id=3393490089, rep_id=3175332927,
        )
