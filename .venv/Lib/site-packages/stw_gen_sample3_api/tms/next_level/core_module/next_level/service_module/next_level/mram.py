from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from stw_gen_sample3_api.basic_types import *


@dataclass
class FullTestResultTm(_Message):
    """Результат последнего полного теста."""

    # Последний результат исполнения полного теста
    from stw_gen_sample3_api.types.core.service.types.test_result_type import TestResult
    value: TestResult


@dataclass
class PartialTestResultTm(_Message):
    """Результат последнего частичного теста."""

    # Последний результат исполнения частичного теста
    from stw_gen_sample3_api.types.core.service.types.pattern_type import Pattern
    pattern: Pattern
    # Последний запрошенный паттерн тестирования
    from stw_gen_sample3_api.types.core.service.types.status_type import Status
    status: Status


@dataclass
class SafeTestResultTm(_Message):
    """Результат последнего безопасного теста."""

    # Последний результат исполнения безопасного теста
    from stw_gen_sample3_api.types.core.service.types.test_result_type import TestResult
    value: TestResult


class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""

        self.fullTestResult = broker.tm_catcher_class[FullTestResultTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=FullTestResultTm, name='core.service.mram.fullTestResult',
            msg_id=2491291050, req_id=2008153784, rep_id=11980334,
        )
        self.partialTestResult = broker.tm_catcher_class[PartialTestResultTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=PartialTestResultTm, name='core.service.mram.partialTestResult',
            msg_id=2541238442, req_id=2289556791, rep_id=4285590945,
        )
        self.safeTestResult = broker.tm_catcher_class[SafeTestResultTm](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type=SafeTestResultTm, name='core.service.mram.safeTestResult',
            msg_id=2477481219, req_id=1534120118, rep_id=746053664,
        )
