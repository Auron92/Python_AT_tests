from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.dtc.severity_type import Severity
from stw_gen_sample3_api.types.core.tm.msg_id_type import MsgId



@dataclass
class ClearActiveReq(ReqMessage):
    """Описание аргументов команды core.dtc.clearActive."""

    # Идентификатор неисправности для снятия
    msgid: MsgId


class ClearActiveRep(RepMessage):
    """Описание возможных ответов на команду core.dtc.clearActive."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class FlushReq(ReqMessage):
    """Описание аргументов команды core.dtc.flush."""

    # Минимальный уровень неисправностей
    severity: Severity


class FlushRep(RepMessage):
    """Описание возможных ответов на команду core.dtc.flush."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.clearActive_msg: CmdCatcherAPI = broker.cmd_catcher_class[ClearActiveRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ClearActiveReq, rep_type=ClearActiveRep,
            name='core.dtc.clearActive', msg_id=742828035, rep_id=796291751,
        )
        self.flush_msg: CmdCatcherAPI = broker.cmd_catcher_class[FlushRep.annotation_type](
            broker=broker, device_address=device_address, req_type=FlushReq, rep_type=FlushRep,
            name='core.dtc.flush', msg_id=1816925282, rep_id=3969600687,
        )

    def clearActive(
        self, msgid: MsgId, **kwargs,
    ) -> ClearActiveRep.annotation_type:
        """Снятие активной неисправности.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.clearActive_msg(msgid, **kwargs)

    def flush(
        self, severity: Severity, **kwargs,
    ) -> FlushRep.annotation_type:
        """Записать неисправности в файл.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.flush_msg(severity, **kwargs)

