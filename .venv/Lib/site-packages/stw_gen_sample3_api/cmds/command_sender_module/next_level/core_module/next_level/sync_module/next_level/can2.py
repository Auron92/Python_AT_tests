from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.time.ms_1_6u_type import ms16u
from stw_gen_sample3_api.types.core.time.ms_3_2u_type import ms32u



@dataclass
class SetMasterReq(ReqMessage):
    """Описание аргументов команды core.sync.can2.setMaster."""

    # Период синхронизации
    time: ms16u


class SetMasterRep(RepMessage):
    """Описание возможных ответов на команду core.sync.can2.setMaster."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetSlaveReq(ReqMessage):
    """Описание аргументов команды core.sync.can2.setSlave."""

    # Продолжительность валидности времени с момента последней синхронизации
    time: ms32u


class SetSlaveRep(RepMessage):
    """Описание возможных ответов на команду core.sync.can2.setSlave."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class DisableRep(RepMessage):
    """Описание возможных ответов на команду core.sync.can2.disable."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.setMaster_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetMasterRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetMasterReq, rep_type=SetMasterRep,
            name='core.sync.can2.setMaster', msg_id=3334603083, rep_id=3092198067,
        )
        self.setSlave_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetSlaveRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetSlaveReq, rep_type=SetSlaveRep,
            name='core.sync.can2.setSlave', msg_id=3248254412, rep_id=860908300,
        )
        self.disable_msg: CmdCatcherAPI = broker.cmd_catcher_class[DisableRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=DisableRep,
            name='core.sync.can2.disable', msg_id=4096625637, rep_id=3899161712,
        )

    def setMaster(
        self, time: ms16u, **kwargs,
    ) -> SetMasterRep.annotation_type:
        """Включение синхронизации в режиме master.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setMaster_msg(time, **kwargs)

    def setSlave(
        self, time: ms32u, **kwargs,
    ) -> SetSlaveRep.annotation_type:
        """Включение синхронизации в режиме slave.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setSlave_msg(time, **kwargs)

    def disable(
        self,  **kwargs,
    ) -> DisableRep.annotation_type:
        """Отключить синхронизацию времени.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.disable_msg(**kwargs)

