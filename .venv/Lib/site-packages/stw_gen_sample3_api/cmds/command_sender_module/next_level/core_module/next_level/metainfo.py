from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.metainfo.area_type import Area





class UpdateAllRep(RepMessage):
    """Описание возможных ответов на команду core.metainfo.updateAll."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class UpdateAreaReq(ReqMessage):
    """Описание аргументов команды core.metainfo.updateArea."""

    # Область памяти
    value: Area


class UpdateAreaRep(RepMessage):
    """Описание возможных ответов на команду core.metainfo.updateArea."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.updateAll_msg: CmdCatcherAPI = broker.cmd_catcher_class[UpdateAllRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=UpdateAllRep,
            name='core.metainfo.updateAll', msg_id=1361343969, rep_id=2939050451,
        )
        self.updateArea_msg: CmdCatcherAPI = broker.cmd_catcher_class[UpdateAreaRep.annotation_type](
            broker=broker, device_address=device_address, req_type=UpdateAreaReq, rep_type=UpdateAreaRep,
            name='core.metainfo.updateArea', msg_id=4170284523, rep_id=4164463038,
        )

    def updateAll(
        self,  **kwargs,
    ) -> UpdateAllRep.annotation_type:
        """Найти все мета-данные и обновить информацию о них.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.updateAll_msg(**kwargs)

    def updateArea(
        self, value: Area, **kwargs,
    ) -> UpdateAreaRep.annotation_type:
        """Найти мета-данные в определённой области памяти и обновить информацию о них.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.updateArea_msg(value, **kwargs)

