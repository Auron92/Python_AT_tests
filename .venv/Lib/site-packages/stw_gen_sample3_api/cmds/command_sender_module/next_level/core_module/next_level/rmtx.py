from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.rmtx.freq_type import Freq
from stw_gen_sample3_api.types.core.time.gps_type import Gps



@dataclass
class ExecDelayedReq(ReqMessage):
    """Описание аргументов команды core.rmtx.execDelayed."""

    # Время по шкале GPS
    time: Gps
    # None
    cmd: bytes_type


class ExecDelayedRep(RepMessage):
    """Описание возможных ответов на команду core.rmtx.execDelayed."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class ExecPeriodicReq(ReqMessage):
    """Описание аргументов команды core.rmtx.execPeriodic."""

    # None
    msgId: uint32_t
    # None
    raw_cmd: bytes_type
    # Частота отправки ТМ-сообщения
    freq: Freq


class ExecPeriodicRep(RepMessage):
    """Описание возможных ответов на команду core.rmtx.execPeriodic."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.execDelayed_msg: CmdCatcherAPI = broker.cmd_catcher_class[ExecDelayedRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ExecDelayedReq, rep_type=ExecDelayedRep,
            name='core.rmtx.execDelayed', msg_id=3699073493, rep_id=1700955023,
        )
        self.execPeriodic_msg: CmdCatcherAPI = broker.cmd_catcher_class[ExecPeriodicRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ExecPeriodicReq, rep_type=ExecPeriodicRep,
            name='core.rmtx.execPeriodic', msg_id=3231680919, rep_id=3718117510,
        )

    def execDelayed(
        self, time: Gps, cmd: bytes_type, **kwargs,
    ) -> ExecDelayedRep.annotation_type:
        """отложенное исполнение команды.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.execDelayed_msg(time, cmd, **kwargs)

    def execPeriodic(
        self, msgId: int, raw_cmd: bytes_type, freq: Freq, **kwargs,
    ) -> ExecPeriodicRep.annotation_type:
        """Периодическое исполнение команды.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.execPeriodic_msg(msgId, raw_cmd, freq, **kwargs)

