from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *




@dataclass
class CalculateReq(ReqMessage):
    """Описание аргументов команды core.service.checksum.calculate."""

    # Адрес во flash памяти
    address: uint32_t
    # Размер области памяти
    length: uint32_t


class CalculateRep(RepMessage):
    """Описание возможных ответов на команду core.service.checksum.calculate."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.service.types.mem_flash_crc_3_2_type import MemFlashCrc32

    annotation_type = Union[Error, MemFlashCrc32]
    return_types = ReturnTypes(Error, MemFlashCrc32)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.calculate_msg: CmdCatcherAPI = broker.cmd_catcher_class[CalculateRep.annotation_type](
            broker=broker, device_address=device_address, req_type=CalculateReq, rep_type=CalculateRep,
            name='core.service.checksum.calculate', msg_id=393667852, rep_id=1629135797,
        )

    def calculate(
        self, address: int, length: int, **kwargs,
    ) -> CalculateRep.annotation_type:
        """Рассчитать CRC32 области памяти.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.calculate_msg(address, length, **kwargs)

