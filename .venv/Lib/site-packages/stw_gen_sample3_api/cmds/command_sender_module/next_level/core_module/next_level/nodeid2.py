from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.nodeid2.node_id_type import NodeId
from stw_gen_sample3_api.types.core.sw.serial_type import Serial



@dataclass
class SetReq(ReqMessage):
    """Описание аргументов команды core.nodeid2.set."""

    # Текущий Node ID
    nodeId: NodeId
    # Новый Node ID
    newNodeId: NodeId


class SetRep(RepMessage):
    """Описание возможных ответов на команду core.nodeid2.set."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetBySerialReq(ReqMessage):
    """Описание аргументов команды core.nodeid2.setBySerial."""

    # Серийный номер
    serialNumber: Serial
    # Новый Node ID
    newNodeId: NodeId


class SetBySerialRep(RepMessage):
    """Описание возможных ответов на команду core.nodeid2.setBySerial."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class GetBySerialReq(ReqMessage):
    """Описание аргументов команды core.nodeid2.getBySerial."""

    # Серийный номер
    serialNumber: Serial


class GetBySerialRep(RepMessage):
    """Описание возможных ответов на команду core.nodeid2.getBySerial."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.nodeid2.node_id_type import NodeId

    annotation_type = Union[Error, NodeId]
    return_types = ReturnTypes(Error, NodeId)




class SaveRep(RepMessage):
    """Описание возможных ответов на команду core.nodeid2.save."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.set_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetReq, rep_type=SetRep,
            name='core.nodeid2.set', msg_id=3078747638, rep_id=432808596,
        )
        self.setBySerial_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetBySerialRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetBySerialReq, rep_type=SetBySerialRep,
            name='core.nodeid2.setBySerial', msg_id=1782184322, rep_id=552953570,
        )
        self.getBySerial_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetBySerialRep.annotation_type](
            broker=broker, device_address=device_address, req_type=GetBySerialReq, rep_type=GetBySerialRep,
            name='core.nodeid2.getBySerial', msg_id=1947619019, rep_id=4008418510,
        )
        self.save_msg: CmdCatcherAPI = broker.cmd_catcher_class[SaveRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SaveRep,
            name='core.nodeid2.save', msg_id=2391566040, rep_id=1289685621,
        )

    def set(
        self, nodeId: NodeId, newNodeId: NodeId, **kwargs,
    ) -> SetRep.annotation_type:
        """Установить новый Node ID.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.set_msg(nodeId, newNodeId, **kwargs)

    def setBySerial(
        self, serialNumber: Serial, newNodeId: NodeId, **kwargs,
    ) -> SetBySerialRep.annotation_type:
        """Установить Node ID по серийному номеру.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setBySerial_msg(serialNumber, newNodeId, **kwargs)

    def getBySerial(
        self, serialNumber: Serial, **kwargs,
    ) -> GetBySerialRep.annotation_type:
        """Запросить Node ID по серийному номеру.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getBySerial_msg(serialNumber, **kwargs)

    def save(
        self,  **kwargs,
    ) -> SaveRep.annotation_type:
        """Сохранить новый Node ID.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.save_msg(**kwargs)

