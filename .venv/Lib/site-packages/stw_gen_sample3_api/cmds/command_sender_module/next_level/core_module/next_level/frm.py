from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.frm.data_type import Data



@dataclass
class InitReq(ReqMessage):
    """Описание аргументов команды core.frm.init."""

    # Размер нового ПО
    size: uint32_t


class InitRep(RepMessage):
    """Описание возможных ответов на команду core.frm.init."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class FinishReq(ReqMessage):
    """Описание аргументов команды core.frm.finish."""

    # Размер нового ПО
    size: uint32_t
    # Контрольная сумма нового ПО
    crc: uint32_t


class FinishRep(RepMessage):
    """Описание возможных ответов на команду core.frm.finish."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class AbortRep(RepMessage):
    """Описание возможных ответов на команду core.frm.abort."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SendDataReq(ReqMessage):
    """Описание аргументов команды core.frm.sendData."""

    # Смещение блока данных
    offset: uint32_t
    # Действительный размер блока данных
    size: uint32_t
    # Данные
    data: Data


class SendDataRep(RepMessage):
    """Описание возможных ответов на команду core.frm.sendData."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class BurnRep(RepMessage):
    """Описание возможных ответов на команду core.frm.burn."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SwitchBankReq(ReqMessage):
    """Описание аргументов команды core.frm.switchBank."""

    # Идентификатор области приёма ПО
    bank: uint8_t


class SwitchBankRep(RepMessage):
    """Описание возможных ответов на команду core.frm.switchBank."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class ResetInBootRep(RepMessage):
    """Описание возможных ответов на команду core.frm.resetInBoot."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class CalcCrcRep(RepMessage):
    """Описание возможных ответов на команду core.frm.calcCrc."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.frm.crc_info_type import CrcInfo

    annotation_type = Union[Error, CrcInfo]
    return_types = ReturnTypes(Error, CrcInfo)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.init_msg: CmdCatcherAPI = broker.cmd_catcher_class[InitRep.annotation_type](
            broker=broker, device_address=device_address, req_type=InitReq, rep_type=InitRep,
            name='core.frm.init', msg_id=2111873259, rep_id=3600756933,
        )
        self.finish_msg: CmdCatcherAPI = broker.cmd_catcher_class[FinishRep.annotation_type](
            broker=broker, device_address=device_address, req_type=FinishReq, rep_type=FinishRep,
            name='core.frm.finish', msg_id=2812363728, rep_id=3581240338,
        )
        self.abort_msg: CmdCatcherAPI = broker.cmd_catcher_class[AbortRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=AbortRep,
            name='core.frm.abort', msg_id=2596187829, rep_id=3984941663,
        )
        self.sendData_msg: CmdCatcherAPI = broker.cmd_catcher_class[SendDataRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SendDataReq, rep_type=SendDataRep,
            name='core.frm.sendData', msg_id=932505418, rep_id=2345124252,
        )
        self.burn_msg: CmdCatcherAPI = broker.cmd_catcher_class[BurnRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=BurnRep,
            name='core.frm.burn', msg_id=4005976475, rep_id=2909641180,
        )
        self.switchBank_msg: CmdCatcherAPI = broker.cmd_catcher_class[SwitchBankRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SwitchBankReq, rep_type=SwitchBankRep,
            name='core.frm.switchBank', msg_id=2045445220, rep_id=1498250950,
        )
        self.resetInBoot_msg: CmdCatcherAPI = broker.cmd_catcher_class[ResetInBootRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=ResetInBootRep,
            name='core.frm.resetInBoot', msg_id=427260567, rep_id=62334619,
        )
        self.calcCrc_msg: CmdCatcherAPI = broker.cmd_catcher_class[CalcCrcRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=CalcCrcRep,
            name='core.frm.calcCrc', msg_id=3214781821, rep_id=2845293001,
        )

    def init(
        self, size: int, **kwargs,
    ) -> InitRep.annotation_type:
        """Инициировать приём нового ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.init_msg(size, **kwargs)

    def finish(
        self, size: int, crc: int, **kwargs,
    ) -> FinishRep.annotation_type:
        """Закончить приём нового ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.finish_msg(size, crc, **kwargs)

    def abort(
        self,  **kwargs,
    ) -> AbortRep.annotation_type:
        """Отменить приём нового ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.abort_msg(**kwargs)

    def sendData(
        self, offset: int, size: int, data: Data, **kwargs,
    ) -> SendDataRep.annotation_type:
        """Блок данных нового ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.sendData_msg(offset, size, data, **kwargs)

    def burn(
        self,  **kwargs,
    ) -> BurnRep.annotation_type:
        """Обновить ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.burn_msg(**kwargs)

    def switchBank(
        self, bank: int, **kwargs,
    ) -> SwitchBankRep.annotation_type:
        """Переключить активную область приёма нового ПО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.switchBank_msg(bank, **kwargs)

    def resetInBoot(
        self,  **kwargs,
    ) -> ResetInBootRep.annotation_type:
        """Перезапустить ПО и остаться в загрузчике.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.resetInBoot_msg(**kwargs)

    def calcCrc(
        self,  **kwargs,
    ) -> CalcCrcRep.annotation_type:
        """Рассчитать CRC загруженной части прошивки.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.calcCrc_msg(**kwargs)

