from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.service.types.pattern_type import Pattern





class FullTestRep(RepMessage):
    """Описание возможных ответов на команду core.service.mram.fullTest."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.service.types.test_result_type import TestResult

    annotation_type = Union[Error, TestResult]
    return_types = ReturnTypes(Error, TestResult)


@dataclass
class PartialTestReq(ReqMessage):
    """Описание аргументов команды core.service.mram.partialTest."""

    # Паттерн памяти для тестирования
    value: Pattern


class PartialTestRep(RepMessage):
    """Описание возможных ответов на команду core.service.mram.partialTest."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.service.types.status_type import Status

    annotation_type = Union[Error, Status]
    return_types = ReturnTypes(Error, Status)




class SafeTestRep(RepMessage):
    """Описание возможных ответов на команду core.service.mram.safeTest."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.service.types.test_result_type import TestResult

    annotation_type = Union[Error, TestResult]
    return_types = ReturnTypes(Error, TestResult)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.fullTest_msg: CmdCatcherAPI = broker.cmd_catcher_class[FullTestRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=FullTestRep,
            name='core.service.mram.fullTest', msg_id=465790266, rep_id=3312126366,
        )
        self.partialTest_msg: CmdCatcherAPI = broker.cmd_catcher_class[PartialTestRep.annotation_type](
            broker=broker, device_address=device_address, req_type=PartialTestReq, rep_type=PartialTestRep,
            name='core.service.mram.partialTest', msg_id=1656854258, rep_id=3674188260,
        )
        self.safeTest_msg: CmdCatcherAPI = broker.cmd_catcher_class[SafeTestRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SafeTestRep,
            name='core.service.mram.safeTest', msg_id=276997055, rep_id=4101898921,
        )

    def fullTest(
        self,  **kwargs,
    ) -> FullTestRep.annotation_type:
        """Начать полный тест (!) НЕБЕЗОПАСНО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.fullTest_msg(**kwargs)

    def partialTest(
        self, value: Pattern, **kwargs,
    ) -> PartialTestRep.annotation_type:
        """Начать частичный тест (!) НЕБЕЗОПАСНО согласно указанному паттерну.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.partialTest_msg(value, **kwargs)

    def safeTest(
        self,  **kwargs,
    ) -> SafeTestRep.annotation_type:
        """Начать безопасный тест (!) БЕЗОПАСНО.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.safeTest_msg(**kwargs)

