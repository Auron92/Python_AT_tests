from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.time.date_time_type import DateTime, DateTimeDict
from stw_gen_sample3_api.types.core.time.gps_type import Gps



@dataclass
class SetTimeReq(ReqMessage):
    """Описание аргументов команды core.time.setTime."""

    # Системное время (GPS)
    system: Gps


class SetTimeRep(RepMessage):
    """Описание возможных ответов на команду core.time.setTime."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetDateTimeReq(ReqMessage):
    """Описание аргументов команды core.time.setDateTime."""

    # Дата/время
    system: DateTime


class SetDateTimeRep(RepMessage):
    """Описание возможных ответов на команду core.time.setDateTime."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class SendSaveTimeRep(RepMessage):
    """Описание возможных ответов на команду core.time.sendSaveTime."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.setTime_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetTimeRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetTimeReq, rep_type=SetTimeRep,
            name='core.time.setTime', msg_id=80349688, rep_id=69774315,
        )
        self.setDateTime_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetDateTimeRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetDateTimeReq, rep_type=SetDateTimeRep,
            name='core.time.setDateTime', msg_id=3729843582, rep_id=2169123474,
        )
        self.sendSaveTime_msg: CmdCatcherAPI = broker.cmd_catcher_class[SendSaveTimeRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SendSaveTimeRep,
            name='core.time.sendSaveTime', msg_id=3428377028, rep_id=3488403440,
        )

    def setTime(
        self, system: Gps, **kwargs,
    ) -> SetTimeRep.annotation_type:
        """Задать время.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setTime_msg(system, **kwargs)

    def setDateTime(
        self, system: DateTime | DateTimeDict, **kwargs,
    ) -> SetDateTimeRep.annotation_type:
        """Задать дату и время.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setDateTime_msg(system, **kwargs)

    def sendSaveTime(
        self,  **kwargs,
    ) -> SendSaveTimeRep.annotation_type:
        """Отправить всем приборам команду сохранить время.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.sendSaveTime_msg(**kwargs)

