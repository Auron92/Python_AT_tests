from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *




@dataclass
class GetChunkReq(ReqMessage):
    """Описание аргументов команды core.pkg.getChunk."""

    # None
    offset: uint16_t
    # None
    size: uint16_t


class GetChunkRep(RepMessage):
    """Описание возможных ответов на команду core.pkg.getChunk."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.pkg.fixed_chunk_type import FixedChunk

    annotation_type = Union[Error, FixedChunk]
    return_types = ReturnTypes(Error, FixedChunk)




class GetMetaRep(RepMessage):
    """Описание возможных ответов на команду core.pkg.getMeta."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.pkg.package_meta_type import PackageMeta

    annotation_type = Union[Error, PackageMeta]
    return_types = ReturnTypes(Error, PackageMeta)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.getChunk_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetChunkRep.annotation_type](
            broker=broker, device_address=device_address, req_type=GetChunkReq, rep_type=GetChunkRep,
            name='core.pkg.getChunk', msg_id=2655395846, rep_id=3537967629,
        )
        self.getMeta_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetMetaRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetMetaRep,
            name='core.pkg.getMeta', msg_id=1283202554, rep_id=2140579920,
        )

    def getChunk(
        self, offset: int, size: int, **kwargs,
    ) -> GetChunkRep.annotation_type:
        """Выгрузить часть описания интерфейса.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getChunk_msg(offset, size, **kwargs)

    def getMeta(
        self,  **kwargs,
    ) -> GetMetaRep.annotation_type:
        """Запрос метаинформации.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getMeta_msg(**kwargs)

