from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.periph3.over_power_type import OverPower
from stw_gen_sample3_api.types.core.periph3.voltage_channels_type import VoltageChannels
from stw_gen_sample3_api.types.core.periph3.voltage_threshold_type import VoltageThreshold, VoltageThresholdDict



@dataclass
class SetVoltageThresholdReq(ReqMessage):
    """Описание аргументов команды core.periph3.setVoltageThreshold."""

    # Канал напряжения
    channel: VoltageChannels
    # Значения порогов напряжения
    value: VoltageThreshold


class SetVoltageThresholdRep(RepMessage):
    """Описание возможных ответов на команду core.periph3.setVoltageThreshold."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetPowerThresholdReq(ReqMessage):
    """Описание аргументов команды core.periph3.setPowerThreshold."""

    # Верхний порог мощности
    value: OverPower


class SetPowerThresholdRep(RepMessage):
    """Описание возможных ответов на команду core.periph3.setPowerThreshold."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.setVoltageThreshold_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetVoltageThresholdRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetVoltageThresholdReq, rep_type=SetVoltageThresholdRep,
            name='core.periph3.setVoltageThreshold', msg_id=2822070637, rep_id=2218144340,
        )
        self.setPowerThreshold_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetPowerThresholdRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetPowerThresholdReq, rep_type=SetPowerThresholdRep,
            name='core.periph3.setPowerThreshold', msg_id=542310239, rep_id=3762708982,
        )

    def setVoltageThreshold(
        self, channel: VoltageChannels, value: VoltageThreshold | VoltageThresholdDict, **kwargs,
    ) -> SetVoltageThresholdRep.annotation_type:
        """Задать пороги для каналов напряжения.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setVoltageThreshold_msg(channel, value, **kwargs)

    def setPowerThreshold(
        self, value: OverPower, **kwargs,
    ) -> SetPowerThresholdRep.annotation_type:
        """Задать верхний порог мощности.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setPowerThreshold_msg(value, **kwargs)

