from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.can.can_bus_type import CanBus
from stw_gen_sample3_api.types.core.can.mode_type import Mode
from stw_gen_sample3_api.types.core.time.s_1_6u_type import s16u



@dataclass
class SetActiveCanReq(ReqMessage):
    """Описание аргументов команды core.can.setActiveCan."""

    # Активная CAN-шина
    activeCan: CanBus


class SetActiveCanRep(RepMessage):
    """Описание возможных ответов на команду core.can.setActiveCan."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class SaveActiveCanRep(RepMessage):
    """Описание возможных ответов на команду core.can.saveActiveCan."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class GetCanInfoRep(RepMessage):
    """Описание возможных ответов на команду core.can.getCanInfo."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.can.can_info_type import CanInfo

    annotation_type = Union[Error, CanInfo]
    return_types = ReturnTypes(Error, CanInfo)




class GetCanErrorInfoRep(RepMessage):
    """Описание возможных ответов на команду core.can.getCanErrorInfo."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.can.can_error_info_type import CanErrorInfo

    annotation_type = Union[Error, CanErrorInfo]
    return_types = ReturnTypes(Error, CanErrorInfo)


@dataclass
class SetModeReq(ReqMessage):
    """Описание аргументов команды core.can.setMode."""

    # CAN-шина
    can: CanBus
    # Режим работы CAN-драйвера
    mode: Mode


class SetModeRep(RepMessage):
    """Описание возможных ответов на команду core.can.setMode."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetRecoveryTimeBusOffReq(ReqMessage):
    """Описание аргументов команды core.can.setRecoveryTimeBusOff."""

    # CAN-шина
    can: CanBus
    # Время
    value: s16u


class SetRecoveryTimeBusOffRep(RepMessage):
    """Описание возможных ответов на команду core.can.setRecoveryTimeBusOff."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.setActiveCan_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetActiveCanRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetActiveCanReq, rep_type=SetActiveCanRep,
            name='core.can.setActiveCan', msg_id=2080911527, rep_id=468592322,
        )
        self.saveActiveCan_msg: CmdCatcherAPI = broker.cmd_catcher_class[SaveActiveCanRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SaveActiveCanRep,
            name='core.can.saveActiveCan', msg_id=497217563, rep_id=3015197709,
        )
        self.getCanInfo_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetCanInfoRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetCanInfoRep,
            name='core.can.getCanInfo', msg_id=1953717288, rep_id=755604196,
        )
        self.getCanErrorInfo_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetCanErrorInfoRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetCanErrorInfoRep,
            name='core.can.getCanErrorInfo', msg_id=1022415950, rep_id=3033233961,
        )
        self.setMode_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetModeRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetModeReq, rep_type=SetModeRep,
            name='core.can.setMode', msg_id=322990817, rep_id=857915721,
        )
        self.setRecoveryTimeBusOff_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetRecoveryTimeBusOffRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetRecoveryTimeBusOffReq, rep_type=SetRecoveryTimeBusOffRep,
            name='core.can.setRecoveryTimeBusOff', msg_id=2523638424, rep_id=1294843921,
        )

    def setActiveCan(
        self, activeCan: CanBus, **kwargs,
    ) -> SetActiveCanRep.annotation_type:
        """Установить активную CAN-шину.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setActiveCan_msg(activeCan, **kwargs)

    def saveActiveCan(
        self,  **kwargs,
    ) -> SaveActiveCanRep.annotation_type:
        """Сохранить настройку активной CAN-шины.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.saveActiveCan_msg(**kwargs)

    def getCanInfo(
        self,  **kwargs,
    ) -> GetCanInfoRep.annotation_type:
        """Получить информацию по CAN-шинам.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getCanInfo_msg(**kwargs)

    def getCanErrorInfo(
        self,  **kwargs,
    ) -> GetCanErrorInfoRep.annotation_type:
        """Получить информацию об ошибках по CAN-шинам.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getCanErrorInfo_msg(**kwargs)

    def setMode(
        self, can: CanBus, mode: Mode, **kwargs,
    ) -> SetModeRep.annotation_type:
        """Установить режим работы CAN.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setMode_msg(can, mode, **kwargs)

    def setRecoveryTimeBusOff(
        self, can: CanBus, value: s16u, **kwargs,
    ) -> SetRecoveryTimeBusOffRep.annotation_type:
        """Установить таймаут восстановления из состояния Bus Off.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setRecoveryTimeBusOff_msg(can, value, **kwargs)

