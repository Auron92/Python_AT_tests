from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.sw.hardware_id_type import HardwareId
from stw_gen_sample3_api.types.core.sw.serial_type import Serial





class ResetRep(RepMessage):
    """Описание возможных ответов на команду core.sw.reset."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class GetVersionRep(RepMessage):
    """Описание возможных ответов на команду core.sw.getVersion."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.sw.version_type import Version

    annotation_type = Union[Error, Version]
    return_types = ReturnTypes(Error, Version)




class GetSerialRep(RepMessage):
    """Описание возможных ответов на команду core.sw.getSerial."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.core.sw.serial_type import Serial

    annotation_type = Union[Error, Serial]
    return_types = ReturnTypes(Error, Serial)


@dataclass
class SetSerialReq(ReqMessage):
    """Описание аргументов команды core.sw.setSerial."""

    # Строка серийного номера
    newSerial: Serial


class SetSerialRep(RepMessage):
    """Описание возможных ответов на команду core.sw.setSerial."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class SaveSerialRep(RepMessage):
    """Описание возможных ответов на команду core.sw.saveSerial."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class ResetRebootCountRep(RepMessage):
    """Описание возможных ответов на команду core.sw.resetRebootCount."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class ResetTotalTimeRep(RepMessage):
    """Описание возможных ответов на команду core.sw.resetTotalTime."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetHardwareIdReq(ReqMessage):
    """Описание аргументов команды core.sw.setHardwareId."""

    # Программный идентификатор платы
    value: HardwareId


class SetHardwareIdRep(RepMessage):
    """Описание возможных ответов на команду core.sw.setHardwareId."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class SaveHardwareIdRep(RepMessage):
    """Описание возможных ответов на команду core.sw.saveHardwareId."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.reset_msg: CmdCatcherAPI = broker.cmd_catcher_class[ResetRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=ResetRep,
            name='core.sw.reset', msg_id=2637245084, rep_id=4110164112,
        )
        self.getVersion_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetVersionRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetVersionRep,
            name='core.sw.getVersion', msg_id=2477740967, rep_id=2156693116,
        )
        self.getSerial_msg: CmdCatcherAPI = broker.cmd_catcher_class[GetSerialRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=GetSerialRep,
            name='core.sw.getSerial', msg_id=3110741602, rep_id=4262713390,
        )
        self.setSerial_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetSerialRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetSerialReq, rep_type=SetSerialRep,
            name='core.sw.setSerial', msg_id=1212560671, rep_id=2326598754,
        )
        self.saveSerial_msg: CmdCatcherAPI = broker.cmd_catcher_class[SaveSerialRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SaveSerialRep,
            name='core.sw.saveSerial', msg_id=4084866926, rep_id=1135870806,
        )
        self.resetRebootCount_msg: CmdCatcherAPI = broker.cmd_catcher_class[ResetRebootCountRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=ResetRebootCountRep,
            name='core.sw.resetRebootCount', msg_id=1846504339, rep_id=3098963946,
        )
        self.resetTotalTime_msg: CmdCatcherAPI = broker.cmd_catcher_class[ResetTotalTimeRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=ResetTotalTimeRep,
            name='core.sw.resetTotalTime', msg_id=1109952736, rep_id=2189807847,
        )
        self.setHardwareId_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetHardwareIdRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetHardwareIdReq, rep_type=SetHardwareIdRep,
            name='core.sw.setHardwareId', msg_id=4288594362, rep_id=1580289889,
        )
        self.saveHardwareId_msg: CmdCatcherAPI = broker.cmd_catcher_class[SaveHardwareIdRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=SaveHardwareIdRep,
            name='core.sw.saveHardwareId', msg_id=914871950, rep_id=1101612654,
        )

    def reset(
        self,  **kwargs,
    ) -> ResetRep.annotation_type:
        """Перезагрузить прибор.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.reset_msg(**kwargs)

    def getVersion(
        self,  **kwargs,
    ) -> GetVersionRep.annotation_type:
        """Запросить версию ПО прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getVersion_msg(**kwargs)

    def getSerial(
        self,  **kwargs,
    ) -> GetSerialRep.annotation_type:
        """Запросить серийный номер прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.getSerial_msg(**kwargs)

    def setSerial(
        self, newSerial: Serial, **kwargs,
    ) -> SetSerialRep.annotation_type:
        """Установить серийный номер прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setSerial_msg(newSerial, **kwargs)

    def saveSerial(
        self,  **kwargs,
    ) -> SaveSerialRep.annotation_type:
        """Сохранить серийный номер прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.saveSerial_msg(**kwargs)

    def resetRebootCount(
        self,  **kwargs,
    ) -> ResetRebootCountRep.annotation_type:
        """Сбросить счетчик перезагрузок прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.resetRebootCount_msg(**kwargs)

    def resetTotalTime(
        self,  **kwargs,
    ) -> ResetTotalTimeRep.annotation_type:
        """Сбросить счетчик общего времени работы прибора.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.resetTotalTime_msg(**kwargs)

    def setHardwareId(
        self, value: HardwareId, **kwargs,
    ) -> SetHardwareIdRep.annotation_type:
        """Установить программный идентификатор платы.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setHardwareId_msg(value, **kwargs)

    def saveHardwareId(
        self,  **kwargs,
    ) -> SaveHardwareIdRep.annotation_type:
        """Сохранить программный идентификатор платы.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.saveHardwareId_msg(**kwargs)

