from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from stw_gen_sample3_api.types.core.time.ms_1_6u_type import ms16u
from stw_gen_sample3_api.types.core.tm.freq_type import Freq
from stw_gen_sample3_api.types.core.tm.msg_id_type import MsgId





class EnableRep(RepMessage):
    """Описание возможных ответов на команду core.tm.enable."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class DisableRep(RepMessage):
    """Описание возможных ответов на команду core.tm.disable."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class SetPeriodsReq(ReqMessage):
    """Описание аргументов команды core.tm.setPeriods."""

    # Часто
    often: ms16u
    # Обычно
    ordinary: ms16u
    # Редко
    rare: ms16u


class SetPeriodsRep(RepMessage):
    """Описание возможных ответов на команду core.tm.setPeriods."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class EnableMsgReq(ReqMessage):
    """Описание аргументов команды core.tm.enableMsg."""

    # Идентификатор сообщения
    msgId: MsgId
    # Частота отправки ТМ-сообщения
    freq: Freq


class EnableMsgRep(RepMessage):
    """Описание возможных ответов на команду core.tm.enableMsg."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class ReqMsgOnceReq(ReqMessage):
    """Описание аргументов команды core.tm.reqMsgOnce."""

    # Идентификатор сообщения
    msgId: MsgId


class ReqMsgOnceRep(RepMessage):
    """Описание возможных ответов на команду core.tm.reqMsgOnce."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)


@dataclass
class ReqMsgReq(ReqMessage):
    """Описание аргументов команды core.tm.reqMsg."""

    # Идентификатор сообщения
    msgId: MsgId


class ReqMsgRep(RepMessage):
    """Описание возможных ответов на команду core.tm.reqMsg."""

    from stw_gen_sample3_api.types.repstub.error_type import Error

    annotation_type = Union[Error, bytes_type]
    return_types = ReturnTypes(Error, bytes_type)


@dataclass
class DisableMsgReq(ReqMessage):
    """Описание аргументов команды core.tm.disableMsg."""

    # Идентификатор сообщения
    msgId: MsgId


class DisableMsgRep(RepMessage):
    """Описание возможных ответов на команду core.tm.disableMsg."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)




class DisableAllMsgsRep(RepMessage):
    """Описание возможных ответов на команду core.tm.disableAllMsgs."""

    from stw_gen_sample3_api.types.repstub.error_type import Error    from stw_gen_sample3_api.types.repstub.ok_type import Ok

    annotation_type = Union[Error, Ok]
    return_types = ReturnTypes(Error, Ok)



class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""

        self.enable_msg: CmdCatcherAPI = broker.cmd_catcher_class[EnableRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=EnableRep,
            name='core.tm.enable', msg_id=2342766287, rep_id=975172817,
        )
        self.disable_msg: CmdCatcherAPI = broker.cmd_catcher_class[DisableRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=DisableRep,
            name='core.tm.disable', msg_id=2352070910, rep_id=2870373020,
        )
        self.setPeriods_msg: CmdCatcherAPI = broker.cmd_catcher_class[SetPeriodsRep.annotation_type](
            broker=broker, device_address=device_address, req_type=SetPeriodsReq, rep_type=SetPeriodsRep,
            name='core.tm.setPeriods', msg_id=4273814161, rep_id=1497218200,
        )
        self.enableMsg_msg: CmdCatcherAPI = broker.cmd_catcher_class[EnableMsgRep.annotation_type](
            broker=broker, device_address=device_address, req_type=EnableMsgReq, rep_type=EnableMsgRep,
            name='core.tm.enableMsg', msg_id=407587363, rep_id=2973258671,
        )
        self.reqMsgOnce_msg: CmdCatcherAPI = broker.cmd_catcher_class[ReqMsgOnceRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMsgOnceReq, rep_type=ReqMsgOnceRep,
            name='core.tm.reqMsgOnce', msg_id=488104690, rep_id=2665441116,
        )
        self.reqMsg_msg: CmdCatcherAPI = broker.cmd_catcher_class[ReqMsgRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMsgReq, rep_type=ReqMsgRep,
            name='core.tm.reqMsg', msg_id=2734488589, rep_id=2956356589,
        )
        self.disableMsg_msg: CmdCatcherAPI = broker.cmd_catcher_class[DisableMsgRep.annotation_type](
            broker=broker, device_address=device_address, req_type=DisableMsgReq, rep_type=DisableMsgRep,
            name='core.tm.disableMsg', msg_id=1975095405, rep_id=1600410269,
        )
        self.disableAllMsgs_msg: CmdCatcherAPI = broker.cmd_catcher_class[DisableAllMsgsRep.annotation_type](
            broker=broker, device_address=device_address, req_type=ReqMessage, rep_type=DisableAllMsgsRep,
            name='core.tm.disableAllMsgs', msg_id=2667231316, rep_id=144037336,
        )

    def enable(
        self,  **kwargs,
    ) -> EnableRep.annotation_type:
        """Разрешить передачу ТМ-сообщений (восстановление после применения команды disable).

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.enable_msg(**kwargs)

    def disable(
        self,  **kwargs,
    ) -> DisableRep.annotation_type:
        """Временно отключает отправку ТМ-сообщений (очередь при этом не очищается).

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.disable_msg(**kwargs)

    def setPeriods(
        self, often: ms16u, ordinary: ms16u, rare: ms16u, **kwargs,
    ) -> SetPeriodsRep.annotation_type:
        """Задать целевые периоды отправки ТМ-сообщений.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.setPeriods_msg(often, ordinary, rare, **kwargs)

    def enableMsg(
        self, msgId: MsgId, freq: Freq, **kwargs,
    ) -> EnableMsgRep.annotation_type:
        """Задать частоту отправки ТМ-сообщения.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.enableMsg_msg(msgId, freq, **kwargs)

    def reqMsgOnce(
        self, msgId: MsgId, **kwargs,
    ) -> ReqMsgOnceRep.annotation_type:
        """Однократно запросить ТМ-сообщение (устарело, следует пользоваться .reqMsg{}).

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.reqMsgOnce_msg(msgId, **kwargs)

    def reqMsg(
        self, msgId: MsgId, **kwargs,
    ) -> ReqMsgRep.annotation_type:
        """Однократно запросить ТМ-сообщение.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.reqMsg_msg(msgId, **kwargs)

    def disableMsg(
        self, msgId: MsgId, **kwargs,
    ) -> DisableMsgRep.annotation_type:
        """Удалить из очереди на отправку ТМ-сообщения с заданным msgId.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.disableMsg_msg(msgId, **kwargs)

    def disableAllMsgs(
        self,  **kwargs,
    ) -> DisableAllMsgsRep.annotation_type:
        """Очистить все очереди отправки ТМ-сообщений.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        return self.disableAllMsgs_msg(**kwargs)

