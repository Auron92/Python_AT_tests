from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from stw_gen_sample3_api.basic_types import *

from .core_module.next_level import time
from .core_module.next_level import can
from .core_module.next_level import frm
from .core_module.next_level import tm
from .core_module.next_level import dtc
from .core_module.next_level import sw
from .core_module.next_level import nodeid2
from .core_module.next_level import periph3
from .core_module.next_level import pkg
from .core_module.next_level import rmtx
from .core_module.next_level import metainfo
from .core_module.next_level import service
from .core_module.next_level import sync




class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""
        self.time: time.CommandSender = time.CommandSender(device_address, broker)
        self.can: can.CommandSender = can.CommandSender(device_address, broker)
        self.frm: frm.CommandSender = frm.CommandSender(device_address, broker)
        self.tm: tm.CommandSender = tm.CommandSender(device_address, broker)
        self.dtc: dtc.CommandSender = dtc.CommandSender(device_address, broker)
        self.sw: sw.CommandSender = sw.CommandSender(device_address, broker)
        self.nodeid2: nodeid2.CommandSender = nodeid2.CommandSender(device_address, broker)
        self.periph3: periph3.CommandSender = periph3.CommandSender(device_address, broker)
        self.pkg: pkg.CommandSender = pkg.CommandSender(device_address, broker)
        self.rmtx: rmtx.CommandSender = rmtx.CommandSender(device_address, broker)
        self.metainfo: metainfo.CommandSender = metainfo.CommandSender(device_address, broker)
        self.service: service.CommandSender = service.CommandSender(device_address, broker)
        self.sync: sync.CommandSender = sync.CommandSender(device_address, broker)


