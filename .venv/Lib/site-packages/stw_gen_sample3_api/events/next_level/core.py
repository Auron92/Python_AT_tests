from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenEvent
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, EventCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from .core_module.next_level import can
from .core_module.next_level import frm
from .core_module.next_level import sw
from .core_module.next_level import periph3
from .core_module.next_level import debug
from .core_module.next_level import metainfo
from .core_module.next_level import sync


class Event(GenEvent):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля событий."""
        self.can: can.Event = can.Event(device_address, broker, pygen_device)
        self.frm: frm.Event = frm.Event(device_address, broker, pygen_device)
        self.sw: sw.Event = sw.Event(device_address, broker, pygen_device)
        self.periph3: periph3.Event = periph3.Event(device_address, broker, pygen_device)
        self.debug: debug.Event = debug.Event(device_address, broker, pygen_device)
        self.metainfo: metainfo.Event = metainfo.Event(device_address, broker, pygen_device)
        self.sync: sync.Event = sync.Event(device_address, broker, pygen_device)

