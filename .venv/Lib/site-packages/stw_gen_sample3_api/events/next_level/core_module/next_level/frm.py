from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenEvent
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, EventCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.catchers.event_catcher import EventCatcher
from stw_py_api_runtime.gen_classes.telemetry.parse import EventMessage
from stw_gen_sample3_api.basic_types import *


@dataclass
class BurnEventsEvent(EventMessage):
    """Событие прожига прошивки"""
    # События прожига прошивки
    from stw_gen_sample3_api.types.core.frm.burn_events_type import BurnEvents
    event: BurnEvents


class Event(GenEvent):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля событий."""

        self.burnEvents = broker.event_catcher_class[BurnEventsEvent](
            device_address=device_address, broker=broker, pygen_device=pygen_device, msg_type=BurnEventsEvent, name='core.frm.burnEvents', msg_id=3872609590,
        )
