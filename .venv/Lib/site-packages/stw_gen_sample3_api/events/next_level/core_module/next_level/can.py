from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenEvent
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, EventCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.catchers.event_catcher import EventCatcher
from stw_py_api_runtime.gen_classes.telemetry.parse import EventMessage
from stw_gen_sample3_api.basic_types import *


@dataclass
class ErrorEvent(EventMessage):
    """Данные об ошибке"""
    # Ошибка CAN
    from stw_gen_sample3_api.types.core.can.error_type import Error
    event: Error


@dataclass
class DetectedBusOffEvent(EventMessage):
    """Зафиксировано состояние Bus Off"""
    # Шина CAN
    from stw_gen_sample3_api.types.core.can.can_bus_type import CanBus
    event: CanBus
    # Статистика ошибок
    from stw_gen_sample3_api.types.core.can.bus_off_stats_type import BusOffStats
    value: BusOffStats


class Event(GenEvent):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля событий."""

        self.error = broker.event_catcher_class[ErrorEvent](
            device_address=device_address, broker=broker, pygen_device=pygen_device, msg_type=ErrorEvent, name='core.can.error', msg_id=3030241274,
        )
        self.detectedBusOff = broker.event_catcher_class[DetectedBusOffEvent](
            device_address=device_address, broker=broker, pygen_device=pygen_device, msg_type=DetectedBusOffEvent, name='core.can.detectedBusOff', msg_id=1957905667,
        )
