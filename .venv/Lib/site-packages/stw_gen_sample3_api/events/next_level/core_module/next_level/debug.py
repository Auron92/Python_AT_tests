from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenEvent
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, EventCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
from stw_py_api_runtime.gen_classes.catchers.event_catcher import EventCatcher
from stw_py_api_runtime.gen_classes.telemetry.parse import EventMessage
from stw_gen_sample3_api.basic_types import *


@dataclass
class AssertReportEvent(EventMessage):
    """Данные о ошибке"""
    # Тип ошибки
    from stw_gen_sample3_api.types.core.debug.error_type_type import ErrorType
    event: ErrorType
    # Данные assert
    errorString: uint8_t


@dataclass
class HardFaultReportEvent(EventMessage):
    """Данные о ошибке"""
    # Тип ошибки
    from stw_gen_sample3_api.types.core.debug.error_type_type import ErrorType
    event: ErrorType
    # Данные о hard fault
    from stw_gen_sample3_api.types.core.debug.hard_fault_data_type import HardFaultData
    hardFaultData: HardFaultData


class Event(GenEvent):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля событий."""

        self.assertReport = broker.event_catcher_class[AssertReportEvent](
            device_address=device_address, broker=broker, pygen_device=pygen_device, msg_type=AssertReportEvent, name='core.debug.assertReport', msg_id=4234923831,
        )
        self.hardFaultReport = broker.event_catcher_class[HardFaultReportEvent](
            device_address=device_address, broker=broker, pygen_device=pygen_device, msg_type=HardFaultReportEvent, name='core.debug.hardFaultReport', msg_id=1207069556,
        )
