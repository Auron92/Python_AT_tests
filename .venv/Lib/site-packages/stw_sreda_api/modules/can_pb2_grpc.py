"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from .. import common_pb2 as common__pb2
from ..modules import can_pb2 as modules_dot_can__pb2
from .. import timbrel_messages_pb2 as timbrel__messages__pb2

class CanModuleServiceStub(object):
    """Апи для can-модулей (ixxat, sreda(CanOverUDP), network-can, socket-can)

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AvailableDevices = channel.unary_unary('/sreda.grpc.gen.timbrel.v2.CanModuleService/AvailableDevices', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=modules_dot_can__pb2.CanAvailableDevices.FromString)
        self.TimbrelSync = channel.stream_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelSync', request_serializer=timbrel__messages__pb2.TimbrelTimeSyncRequest.SerializeToString, response_deserializer=timbrel__messages__pb2.TimbrelTimeSyncRequest.FromString)
        self.TimbrelReqRep = channel.stream_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelReqRep', request_serializer=timbrel__messages__pb2.TimbrelReqRepMessage.SerializeToString, response_deserializer=timbrel__messages__pb2.TimbrelReqRepMessage.FromString)
        self.TimbrelTelemetry = channel.stream_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelTelemetry', request_serializer=timbrel__messages__pb2.TimbrelTelemetryMessage.SerializeToString, response_deserializer=timbrel__messages__pb2.TimbrelTelemetryMessage.FromString)
        self.TimbrelEvent = channel.stream_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelEvent', request_serializer=timbrel__messages__pb2.TimbrelEventMessage.SerializeToString, response_deserializer=timbrel__messages__pb2.TimbrelEventMessage.FromString)
        self.CanFrames = channel.stream_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/CanFrames', request_serializer=modules_dot_can__pb2.CanFrameMessage.SerializeToString, response_deserializer=modules_dot_can__pb2.CanFrameMessage.FromString)
        self.Statistics = channel.unary_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/Statistics', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=timbrel__messages__pb2.TimbrelStatisticsMessage.FromString)
        self.GuestTimeSync = channel.unary_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/GuestTimeSync', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=timbrel__messages__pb2.GuestTimeSyncMessage.FromString)
        self.StatusDetails = channel.unary_stream('/sreda.grpc.gen.timbrel.v2.CanModuleService/StatusDetails', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=modules_dot_can__pb2.StatusDetailsMessage.FromString)

class CanModuleServiceServicer(object):
    """Апи для can-модулей (ixxat, sreda(CanOverUDP), network-can, socket-can)

    """

    def AvailableDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimbrelSync(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimbrelReqRep(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimbrelTelemetry(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimbrelEvent(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanFrames(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Statistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GuestTimeSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatusDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_CanModuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {'AvailableDevices': grpc.unary_unary_rpc_method_handler(servicer.AvailableDevices, request_deserializer=common__pb2.Empty.FromString, response_serializer=modules_dot_can__pb2.CanAvailableDevices.SerializeToString), 'TimbrelSync': grpc.stream_stream_rpc_method_handler(servicer.TimbrelSync, request_deserializer=timbrel__messages__pb2.TimbrelTimeSyncRequest.FromString, response_serializer=timbrel__messages__pb2.TimbrelTimeSyncRequest.SerializeToString), 'TimbrelReqRep': grpc.stream_stream_rpc_method_handler(servicer.TimbrelReqRep, request_deserializer=timbrel__messages__pb2.TimbrelReqRepMessage.FromString, response_serializer=timbrel__messages__pb2.TimbrelReqRepMessage.SerializeToString), 'TimbrelTelemetry': grpc.stream_stream_rpc_method_handler(servicer.TimbrelTelemetry, request_deserializer=timbrel__messages__pb2.TimbrelTelemetryMessage.FromString, response_serializer=timbrel__messages__pb2.TimbrelTelemetryMessage.SerializeToString), 'TimbrelEvent': grpc.stream_stream_rpc_method_handler(servicer.TimbrelEvent, request_deserializer=timbrel__messages__pb2.TimbrelEventMessage.FromString, response_serializer=timbrel__messages__pb2.TimbrelEventMessage.SerializeToString), 'CanFrames': grpc.stream_stream_rpc_method_handler(servicer.CanFrames, request_deserializer=modules_dot_can__pb2.CanFrameMessage.FromString, response_serializer=modules_dot_can__pb2.CanFrameMessage.SerializeToString), 'Statistics': grpc.unary_stream_rpc_method_handler(servicer.Statistics, request_deserializer=common__pb2.Empty.FromString, response_serializer=timbrel__messages__pb2.TimbrelStatisticsMessage.SerializeToString), 'GuestTimeSync': grpc.unary_stream_rpc_method_handler(servicer.GuestTimeSync, request_deserializer=common__pb2.Empty.FromString, response_serializer=timbrel__messages__pb2.GuestTimeSyncMessage.SerializeToString), 'StatusDetails': grpc.unary_stream_rpc_method_handler(servicer.StatusDetails, request_deserializer=common__pb2.Empty.FromString, response_serializer=modules_dot_can__pb2.StatusDetailsMessage.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler('sreda.grpc.gen.timbrel.v2.CanModuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class CanModuleService(object):
    """Апи для can-модулей (ixxat, sreda(CanOverUDP), network-can, socket-can)

    """

    @staticmethod
    def AvailableDevices(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/AvailableDevices', common__pb2.Empty.SerializeToString, modules_dot_can__pb2.CanAvailableDevices.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TimbrelSync(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelSync', timbrel__messages__pb2.TimbrelTimeSyncRequest.SerializeToString, timbrel__messages__pb2.TimbrelTimeSyncRequest.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TimbrelReqRep(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelReqRep', timbrel__messages__pb2.TimbrelReqRepMessage.SerializeToString, timbrel__messages__pb2.TimbrelReqRepMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TimbrelTelemetry(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelTelemetry', timbrel__messages__pb2.TimbrelTelemetryMessage.SerializeToString, timbrel__messages__pb2.TimbrelTelemetryMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TimbrelEvent(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/TimbrelEvent', timbrel__messages__pb2.TimbrelEventMessage.SerializeToString, timbrel__messages__pb2.TimbrelEventMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CanFrames(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/CanFrames', modules_dot_can__pb2.CanFrameMessage.SerializeToString, modules_dot_can__pb2.CanFrameMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Statistics(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/Statistics', common__pb2.Empty.SerializeToString, timbrel__messages__pb2.TimbrelStatisticsMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GuestTimeSync(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/GuestTimeSync', common__pb2.Empty.SerializeToString, timbrel__messages__pb2.GuestTimeSyncMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatusDetails(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.timbrel.v2.CanModuleService/StatusDetails', common__pb2.Empty.SerializeToString, modules_dot_can__pb2.StatusDetailsMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)