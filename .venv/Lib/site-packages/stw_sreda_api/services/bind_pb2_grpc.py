"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from .. import common_pb2 as common__pb2
from ..services import bind_pb2 as services_dot_bind__pb2

class BindServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_stream('/sreda.grpc.gen.BindService/GetInfo', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=common__pb2.ServerInfo.FromString)
        self.GetAccessToken = channel.unary_unary('/sreda.grpc.gen.BindService/GetAccessToken', request_serializer=services_dot_bind__pb2.NewClientInfo.SerializeToString, response_deserializer=services_dot_bind__pb2.AccessToken.FromString)
        self.Bind = channel.stream_stream('/sreda.grpc.gen.BindService/Bind', request_serializer=services_dot_bind__pb2.BindClientMessage.SerializeToString, response_deserializer=services_dot_bind__pb2.BindServerMessage.FromString)

class BindServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetInfo(self, request, context):
        """Called by client or discovery service to get information about server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccessToken(self, request, context):
        """Called by client to register and get a access token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bind(self, request_iterator, context):
        """Only allowed with ClientToken in metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_BindServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {'GetInfo': grpc.unary_stream_rpc_method_handler(servicer.GetInfo, request_deserializer=common__pb2.Empty.FromString, response_serializer=common__pb2.ServerInfo.SerializeToString), 'GetAccessToken': grpc.unary_unary_rpc_method_handler(servicer.GetAccessToken, request_deserializer=services_dot_bind__pb2.NewClientInfo.FromString, response_serializer=services_dot_bind__pb2.AccessToken.SerializeToString), 'Bind': grpc.stream_stream_rpc_method_handler(servicer.Bind, request_deserializer=services_dot_bind__pb2.BindClientMessage.FromString, response_serializer=services_dot_bind__pb2.BindServerMessage.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler('sreda.grpc.gen.BindService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class BindService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetInfo(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.BindService/GetInfo', common__pb2.Empty.SerializeToString, common__pb2.ServerInfo.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccessToken(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.BindService/GetAccessToken', services_dot_bind__pb2.NewClientInfo.SerializeToString, services_dot_bind__pb2.AccessToken.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Bind(request_iterator, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sreda.grpc.gen.BindService/Bind', services_dot_bind__pb2.BindClientMessage.SerializeToString, services_dot_bind__pb2.BindServerMessage.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)