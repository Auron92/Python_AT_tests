"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from .. import common_pb2 as common__pb2
from ..services import subnet_service_pb2 as services_dot_subnet__service__pb2

class SubnetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSubnet = channel.unary_unary('/sreda.grpc.gen.SubnetService/AddSubnet', request_serializer=services_dot_subnet__service__pb2.AddSubnetMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.RemoveSubnet = channel.unary_unary('/sreda.grpc.gen.SubnetService/RemoveSubnet', request_serializer=services_dot_subnet__service__pb2.RemoveSubnetAndMoveModulesMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.RenameSubnet = channel.unary_unary('/sreda.grpc.gen.SubnetService/RenameSubnet', request_serializer=services_dot_subnet__service__pb2.RenameSubnetMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.MoveModules = channel.unary_unary('/sreda.grpc.gen.SubnetService/MoveModules', request_serializer=services_dot_subnet__service__pb2.MoveModulesMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.GetSubnets = channel.unary_stream('/sreda.grpc.gen.SubnetService/GetSubnets', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=services_dot_subnet__service__pb2.Subnets.FromString)

class SubnetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveModules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubnets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_SubnetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {'AddSubnet': grpc.unary_unary_rpc_method_handler(servicer.AddSubnet, request_deserializer=services_dot_subnet__service__pb2.AddSubnetMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'RemoveSubnet': grpc.unary_unary_rpc_method_handler(servicer.RemoveSubnet, request_deserializer=services_dot_subnet__service__pb2.RemoveSubnetAndMoveModulesMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'RenameSubnet': grpc.unary_unary_rpc_method_handler(servicer.RenameSubnet, request_deserializer=services_dot_subnet__service__pb2.RenameSubnetMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'MoveModules': grpc.unary_unary_rpc_method_handler(servicer.MoveModules, request_deserializer=services_dot_subnet__service__pb2.MoveModulesMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'GetSubnets': grpc.unary_stream_rpc_method_handler(servicer.GetSubnets, request_deserializer=common__pb2.Empty.FromString, response_serializer=services_dot_subnet__service__pb2.Subnets.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler('sreda.grpc.gen.SubnetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class SubnetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddSubnet(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.SubnetService/AddSubnet', services_dot_subnet__service__pb2.AddSubnetMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSubnet(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.SubnetService/RemoveSubnet', services_dot_subnet__service__pb2.RemoveSubnetAndMoveModulesMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameSubnet(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.SubnetService/RenameSubnet', services_dot_subnet__service__pb2.RenameSubnetMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MoveModules(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.SubnetService/MoveModules', services_dot_subnet__service__pb2.MoveModulesMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubnets(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.SubnetService/GetSubnets', common__pb2.Empty.SerializeToString, services_dot_subnet__service__pb2.Subnets.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)