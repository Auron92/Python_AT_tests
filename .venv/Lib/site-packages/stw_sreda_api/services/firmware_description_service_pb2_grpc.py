"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from .. import common_pb2 as common__pb2
from ..services import firmware_description_service_pb2 as services_dot_firmware__description__service__pb2

class FirmwareDescriptionServiceStub(object):
    """
    Сервис используется для хранения описания прошивки (ОП) устройств, которые сейчас доступны на сервере.
    По сути этой информации должно быть достаточно для клиента, что бы отобразить доступные
    для прибора команды, телеметрию и настройки.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Info = channel.unary_unary('/sreda.grpc.gen.FirmwareDescriptionService/Info', request_serializer=common__pb2.FirmwareDescriptionId.SerializeToString, response_deserializer=services_dot_firmware__description__service__pb2.FirmwareDescription.FromString)
        self.RequestFirmwareDescription = channel.unary_unary('/sreda.grpc.gen.FirmwareDescriptionService/RequestFirmwareDescription', request_serializer=services_dot_firmware__description__service__pb2.FirmwareDescriptionUpdateRequest.SerializeToString, response_deserializer=common__pb2.FirmwareDescriptionId.FromString)
        self.GetRawData = channel.unary_unary('/sreda.grpc.gen.FirmwareDescriptionService/GetRawData', request_serializer=common__pb2.FirmwareDescriptionId.SerializeToString, response_deserializer=services_dot_firmware__description__service__pb2.RawFirmwareDescription.FromString)

class FirmwareDescriptionServiceServicer(object):
    """
    Сервис используется для хранения описания прошивки (ОП) устройств, которые сейчас доступны на сервере.
    По сути этой информации должно быть достаточно для клиента, что бы отобразить доступные
    для прибора команды, телеметрию и настройки.

    """

    def Info(self, request, context):
        """По хэшу ОП можем вытащить интерфейс для построения моделей
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestFirmwareDescription(self, request, context):
        """Добавить в хранилище ОП, в случае успеха возвращаем уникальный id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawData(self, request, context):
        """Получить ОП в виде ямла
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_FirmwareDescriptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {'Info': grpc.unary_unary_rpc_method_handler(servicer.Info, request_deserializer=common__pb2.FirmwareDescriptionId.FromString, response_serializer=services_dot_firmware__description__service__pb2.FirmwareDescription.SerializeToString), 'RequestFirmwareDescription': grpc.unary_unary_rpc_method_handler(servicer.RequestFirmwareDescription, request_deserializer=services_dot_firmware__description__service__pb2.FirmwareDescriptionUpdateRequest.FromString, response_serializer=common__pb2.FirmwareDescriptionId.SerializeToString), 'GetRawData': grpc.unary_unary_rpc_method_handler(servicer.GetRawData, request_deserializer=common__pb2.FirmwareDescriptionId.FromString, response_serializer=services_dot_firmware__description__service__pb2.RawFirmwareDescription.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler('sreda.grpc.gen.FirmwareDescriptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class FirmwareDescriptionService(object):
    """
    Сервис используется для хранения описания прошивки (ОП) устройств, которые сейчас доступны на сервере.
    По сути этой информации должно быть достаточно для клиента, что бы отобразить доступные
    для прибора команды, телеметрию и настройки.

    """

    @staticmethod
    def Info(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.FirmwareDescriptionService/Info', common__pb2.FirmwareDescriptionId.SerializeToString, services_dot_firmware__description__service__pb2.FirmwareDescription.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestFirmwareDescription(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.FirmwareDescriptionService/RequestFirmwareDescription', services_dot_firmware__description__service__pb2.FirmwareDescriptionUpdateRequest.SerializeToString, common__pb2.FirmwareDescriptionId.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRawData(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.FirmwareDescriptionService/GetRawData', common__pb2.FirmwareDescriptionId.SerializeToString, services_dot_firmware__description__service__pb2.RawFirmwareDescription.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)