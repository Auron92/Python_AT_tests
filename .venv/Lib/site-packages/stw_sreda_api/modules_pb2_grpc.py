"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from . import common_pb2 as common__pb2
from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2
from . import modules_pb2 as modules__pb2

class ModulesServiceStub(object):
    """TODO: These should only be allowed when bound to server

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetModules = channel.unary_stream('/sreda.grpc.gen.ModulesService/GetModules', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=modules__pb2.Modules.FromString)
        self.AddModule = channel.unary_unary('/sreda.grpc.gen.ModulesService/AddModule', request_serializer=modules__pb2.AddModuleMessage.SerializeToString, response_deserializer=common__pb2.ModuleId.FromString)
        self.RemoveModule = channel.unary_unary('/sreda.grpc.gen.ModulesService/RemoveModule', request_serializer=common__pb2.ModuleId.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.ImportConfiguration = channel.unary_unary('/sreda.grpc.gen.ModulesService/ImportConfiguration', request_serializer=google_dot_protobuf_dot_struct__pb2.Struct.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.ExportConfiguration = channel.unary_unary('/sreda.grpc.gen.ModulesService/ExportConfiguration', request_serializer=common__pb2.Empty.SerializeToString, response_deserializer=google_dot_protobuf_dot_struct__pb2.Struct.FromString)
        self.StartModule = channel.unary_unary('/sreda.grpc.gen.ModulesService/StartModule', request_serializer=common__pb2.ModuleId.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.StopModule = channel.unary_unary('/sreda.grpc.gen.ModulesService/StopModule', request_serializer=common__pb2.ModuleId.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.GetModuleSettings = channel.unary_unary('/sreda.grpc.gen.ModulesService/GetModuleSettings', request_serializer=common__pb2.ModuleId.SerializeToString, response_deserializer=common__pb2.ModuleSettings.FromString)
        self.SetModuleSettings = channel.unary_unary('/sreda.grpc.gen.ModulesService/SetModuleSettings', request_serializer=modules__pb2.SetModuleSettingsMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.UpdateModuleInfo = channel.unary_unary('/sreda.grpc.gen.ModulesService/UpdateModuleInfo', request_serializer=modules__pb2.UpdateModuleInfoMessage.SerializeToString, response_deserializer=common__pb2.Empty.FromString)
        self.CreateTimbrelModules = channel.unary_unary('/sreda.grpc.gen.ModulesService/CreateTimbrelModules', request_serializer=modules__pb2.CreateTimbrelModulesMessage.SerializeToString, response_deserializer=modules__pb2.ModuleIdList.FromString)

class ModulesServiceServicer(object):
    """TODO: These should only be allowed when bound to server

    """

    def GetModules(self, request, context):
        """
        GetModules возвращает список модулей при подключении
        и дальнейшем добавлении/удалении модулей.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModuleSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetModuleSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModuleInfo(self, request, context):
        """rpc ConnectModules(ModulesConnection) returns (Empty);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimbrelModules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_ModulesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {'GetModules': grpc.unary_stream_rpc_method_handler(servicer.GetModules, request_deserializer=common__pb2.Empty.FromString, response_serializer=modules__pb2.Modules.SerializeToString), 'AddModule': grpc.unary_unary_rpc_method_handler(servicer.AddModule, request_deserializer=modules__pb2.AddModuleMessage.FromString, response_serializer=common__pb2.ModuleId.SerializeToString), 'RemoveModule': grpc.unary_unary_rpc_method_handler(servicer.RemoveModule, request_deserializer=common__pb2.ModuleId.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'ImportConfiguration': grpc.unary_unary_rpc_method_handler(servicer.ImportConfiguration, request_deserializer=google_dot_protobuf_dot_struct__pb2.Struct.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'ExportConfiguration': grpc.unary_unary_rpc_method_handler(servicer.ExportConfiguration, request_deserializer=common__pb2.Empty.FromString, response_serializer=google_dot_protobuf_dot_struct__pb2.Struct.SerializeToString), 'StartModule': grpc.unary_unary_rpc_method_handler(servicer.StartModule, request_deserializer=common__pb2.ModuleId.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'StopModule': grpc.unary_unary_rpc_method_handler(servicer.StopModule, request_deserializer=common__pb2.ModuleId.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'GetModuleSettings': grpc.unary_unary_rpc_method_handler(servicer.GetModuleSettings, request_deserializer=common__pb2.ModuleId.FromString, response_serializer=common__pb2.ModuleSettings.SerializeToString), 'SetModuleSettings': grpc.unary_unary_rpc_method_handler(servicer.SetModuleSettings, request_deserializer=modules__pb2.SetModuleSettingsMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'UpdateModuleInfo': grpc.unary_unary_rpc_method_handler(servicer.UpdateModuleInfo, request_deserializer=modules__pb2.UpdateModuleInfoMessage.FromString, response_serializer=common__pb2.Empty.SerializeToString), 'CreateTimbrelModules': grpc.unary_unary_rpc_method_handler(servicer.CreateTimbrelModules, request_deserializer=modules__pb2.CreateTimbrelModulesMessage.FromString, response_serializer=modules__pb2.ModuleIdList.SerializeToString)}
    generic_handler = grpc.method_handlers_generic_handler('sreda.grpc.gen.ModulesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

class ModulesService(object):
    """TODO: These should only be allowed when bound to server

    """

    @staticmethod
    def GetModules(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sreda.grpc.gen.ModulesService/GetModules', common__pb2.Empty.SerializeToString, modules__pb2.Modules.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddModule(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/AddModule', modules__pb2.AddModuleMessage.SerializeToString, common__pb2.ModuleId.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveModule(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/RemoveModule', common__pb2.ModuleId.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportConfiguration(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/ImportConfiguration', google_dot_protobuf_dot_struct__pb2.Struct.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportConfiguration(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/ExportConfiguration', common__pb2.Empty.SerializeToString, google_dot_protobuf_dot_struct__pb2.Struct.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartModule(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/StartModule', common__pb2.ModuleId.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopModule(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/StopModule', common__pb2.ModuleId.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModuleSettings(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/GetModuleSettings', common__pb2.ModuleId.SerializeToString, common__pb2.ModuleSettings.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetModuleSettings(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/SetModuleSettings', modules__pb2.SetModuleSettingsMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateModuleInfo(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/UpdateModuleInfo', modules__pb2.UpdateModuleInfoMessage.SerializeToString, common__pb2.Empty.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimbrelModules(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sreda.grpc.gen.ModulesService/CreateTimbrelModules', modules__pb2.CreateTimbrelModulesMessage.SerializeToString, modules__pb2.ModuleIdList.FromString, options, channel_credentials, insecure, call_credentials, compression, wait_for_ready, timeout, metadata)