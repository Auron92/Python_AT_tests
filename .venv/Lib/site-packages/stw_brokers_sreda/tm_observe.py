"""Модуль для наблюдения и подписки на телеметрию."""
from dataclasses import dataclass
from typing import Optional, Union

from stw_py_api_runtime.gen_classes.telemetry.predicates import (
    MessagePredicate, StreamMsgChannel,
)
from stw_py_api_runtime.sdk.exceptions import PredicateError
from stw_sreda_api.timbrel_messages_pb2 import (
    TimbrelEventMessage, TimbrelReqRepMessage, TimbrelTelemetryMessage,
)

from stw_brokers_sreda.message import AddressConverter

TimbrelAnyMessage = TimbrelTelemetryMessage | TimbrelEventMessage | TimbrelReqRepMessage


@dataclass
class ProtobufTimbrelPredicate(MessagePredicate):
    """Идентификатор подписки на PROTOBUF Timbrel-сообщение."""

    def is_match(self, message: TimbrelAnyMessage, channel: Optional[StreamMsgChannel] = None) -> bool:
        """Соответствует ли Timbrel..Message сообщение подписке."""
        if self.channel and channel and self.channel != channel:
            return False

        if isinstance(message, TimbrelReqRepMessage):
            return self._is_match_req_rep(message)
        elif isinstance(message, (TimbrelEventMessage, TimbrelTelemetryMessage)):
            return self._is_match_popular(message)

        raise PredicateError(f'Неизвестный тип сообщения {type(message)}')

    def _is_match_req_rep(self, msg: TimbrelReqRepMessage) -> bool:
        if self.channel and self.channel != StreamMsgChannel.REQ_REP:
            return False
        if self.message_id and self.message_id != msg.header.message_id:
            return False
        device = msg.header.sender_id if self.is_from_device else msg.header.receiver_id
        received_device_address = AddressConverter.transport_to_runtime(device)
        if self._device_address is not None and self._device_address != received_device_address:
            return False
        return True

    def _is_match_popular(self, msg: Union[TimbrelEventMessage, TimbrelTelemetryMessage]) -> bool:
        if self.channel:
            if isinstance(msg, TimbrelTelemetryMessage) and self.channel != StreamMsgChannel.TM:
                return False
            if isinstance(msg, TimbrelEventMessage) and self.channel != StreamMsgChannel.EVENT:
                return False
        if self.message_id and self.message_id != msg.header.message_id:
            return False
        received_device_address = AddressConverter.transport_to_runtime(msg.header.sender_id)
        if self._device_address is not None and self._device_address != received_device_address:
            return False
        return True
