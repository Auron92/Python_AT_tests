from typing import Optional, Union, Tuple

from stw_py_api_runtime.general import get_gps_time_nano_sec
from stw_py_api_runtime.gen_classes.telemetry.predicates import StreamMsgChannel
from stw_py_api_runtime.sdk.brokers.broker_api import MessageCreatorAPI
from stw_py_api_runtime.sdk.brokers.message import (
    DeviceAddress, MessageKey, Priority,
)
from stw_sreda_api.timbrel_messages_pb2 import (
    TimbrelHeader, TimbrelReqRepMessage, TimbrelTelemetryMessage, TimbrelEventMessage,
)
from stw_sreda_api.common_pb2 import TimbrelAddress

from stw_brokers_sreda.message import (
    AddressConverter, SredaPriorityConverter,
)

TimbrelMessage = TimbrelReqRepMessage | TimbrelTelemetryMessage


class ProtobufMessageCreator(MessageCreatorAPI):
    """Создание и обработка protobuf сообщений."""

    by_over_ip = False

    def create_command_message(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
        message_id: int,
        counter: int,
        args_data: bytes,
        priority: Priority,
        need_rep: bool,
    ) -> Union[TimbrelReqRepMessage]:
        """Создать сообщение - команду (req)."""
        sender_id, receiver_id = self.get_sender_and_receiver(sender_address, receiver_address)

        return TimbrelReqRepMessage(
            header=TimbrelHeader(
                message_id=message_id,
                cti=counter,
                sender_id=sender_id,
                receiver_id=receiver_id,
                priority=SredaPriorityConverter.protocol_to_transport(priority),
            ),
            is_rep=False,
            no_reply=not need_rep,
            data=args_data,
        )

    def create_command_message_rep(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
        message_id: int,
        counter: int,
        rep_data: bytes,
        priority: Priority,
        timestamp: Optional[int] = None,
    ) -> TimbrelReqRepMessage:
        """Создать сообщение - ответ на команду (rep)."""
        sender_id, receiver_id = self.get_sender_and_receiver(sender_address, receiver_address)

        return TimbrelReqRepMessage(
            header=TimbrelHeader(
                message_id=message_id,
                cti=counter,
                sender_id=sender_id,
                receiver_id=receiver_id,
                priority=SredaPriorityConverter.protocol_to_transport(priority),
                timestamp=timestamp or get_gps_time_nano_sec(),
            ),
            is_rep=True,
            no_reply=False,
            data=rep_data,
        )

    def create_tm_message(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
        message_id: int,
        counter: int,
        data: bytes,
        priority: Priority,
        timestamp: Optional[int] = None,
    ):
        """Создать сообщение - телеметрию."""
        sender_id, receiver_id = self.get_sender_and_receiver(sender_address, receiver_address)

        return TimbrelTelemetryMessage(
            header=TimbrelHeader(
                message_id=message_id,
                cti=counter,
                sender_id=sender_id,
                receiver_id=receiver_id,
                priority=SredaPriorityConverter.protocol_to_transport(priority),
                timestamp=timestamp or get_gps_time_nano_sec(),
            ),
            data=data,
        )

    def create_event_message(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
        message_id: int,
        counter: int,
        data: bytes,
        priority: Priority,
        timestamp: Optional[int] = None,
    ):
        """Создать сообщение - событие."""
        sender_id, receiver_id = self.get_sender_and_receiver(sender_address, receiver_address)

        return TimbrelEventMessage(
            header=TimbrelHeader(
                message_id=message_id,
                cti=counter,
                sender_id=sender_id,
                receiver_id=receiver_id,
                priority=SredaPriorityConverter.protocol_to_transport(priority),
                timestamp=timestamp or get_gps_time_nano_sec(),
            ),
            data=data,
        )

    @staticmethod
    def get_in_message_key(message: TimbrelReqRepMessage) -> MessageKey:
        """Получить ключ-идентификатор пришедшего в брокер сообщения по его полям.

        Здесь receiver_id - мы (клиент), а sender_id - то, откуда пришло (сервер).
        """
        return MessageKey(
            client_id=AddressConverter.transport_to_base(message.header.receiver_id),
            server_id=AddressConverter.transport_to_base(message.header.sender_id),
            cti=message.header.cti,
        )

    @staticmethod
    def get_out_message_key(message: TimbrelReqRepMessage) -> MessageKey:
        """Получить ключ-идентификатор отправляемого брокером сообщения по его полям.

        Здесь sender_id - мы (клиент), а receiver_id - то, куда отправляем (сервер).
        """
        return MessageKey(
            client_id=AddressConverter.transport_to_base(message.header.sender_id),
            server_id=AddressConverter.transport_to_base(message.header.receiver_id),
            cti=message.header.cti,
        )

    @staticmethod
    def get_message_id(message: TimbrelReqRepMessage) -> int:
        """Получить id сообщения из его тела."""
        return message.header.message_id

    @staticmethod
    def get_device_id(message: TimbrelMessage) -> int | str:
        """Получить id прибора из тела сообщения."""
        return AddressConverter.transport_to_base(message.header.sender_id)

    @staticmethod
    def get_channel(message: TimbrelMessage) -> StreamMsgChannel:
        """Получить канал, по которому пришло сообщение."""
        if isinstance(message, TimbrelReqRepMessage):
            return StreamMsgChannel.REQ_REP
        if isinstance(message, TimbrelEventMessage):
            return StreamMsgChannel.EVENT
        if isinstance(message, TimbrelTelemetryMessage):
            return StreamMsgChannel.TM
        raise ValueError(f'Timbrel message {type(message)} from unknown channel')

    @staticmethod
    def is_rep(message: TimbrelMessage) -> bool:
        """Получить is_rep сообщения."""
        return message.is_rep

    def _create_req_cmd_message(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
        message_id: int,
        counter: int,
        args_data: bytes,
        priority: Priority,
        timestamp: Optional[int] = None,
    ) -> TimbrelReqRepMessage:
        """Создать сообщение для команды по req rep каналу."""
        sender_id, receiver_id = self.get_sender_and_receiver(sender_address, receiver_address)
        return TimbrelReqRepMessage(
            header=TimbrelHeader(
                message_id=message_id,
                cti=counter,
                sender_id=sender_id,
                receiver_id=receiver_id,
                priority=SredaPriorityConverter.protocol_to_transport(priority),
                timestamp=timestamp or get_gps_time_nano_sec(),
            ),
            is_rep=False,
            data=args_data,
        )

    def get_sender_and_receiver(
        self,
        sender_address: DeviceAddress,
        receiver_address: DeviceAddress,
    ) -> Tuple[TimbrelAddress, TimbrelAddress]:
        """Получить адреса получателя и отправителя для транспортного уровня."""
        sender_id = AddressConverter.runtime_to_transport(sender_address, self.by_over_ip)
        receiver_id = AddressConverter.runtime_to_transport(receiver_address, self.by_over_ip)
        return sender_id, receiver_id
