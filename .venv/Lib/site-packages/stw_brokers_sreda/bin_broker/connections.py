"""Описание работы с модулями."""
import threading
from queue import SimpleQueue
from typing import Any, Callable, Tuple, Type

import grpc
from stw_py_api_runtime.gen_classes.telemetry.predicates import StreamMsgChannel
from stw_py_api_runtime.sdk.exceptions import ConnectError
from stw_sreda_api.modules.can_pb2_grpc import CanModuleServiceStub
from stw_sreda_api.modules.mcc_pb2_grpc import MccModuleServiceStub
from stw_sreda_api.modules.timbrel_over_ip_pb2_grpc import (
    TimbrelOverIpModuleServiceStub,
)
from stw_sreda_api.modules_pb2 import ModuleType

from stw_brokers_sreda.bistream import create_bistream
from stw_brokers_sreda.exceptions import ModuleError

SredaModuleStub = CanModuleServiceStub | MccModuleServiceStub | TimbrelOverIpModuleServiceStub


def get_stub_class(module_type: int) -> Type[SredaModuleStub]:
    """Определить класс для создания stub в зависимости от типа модуля.

    Args:
        module_type (int): тип подключаемого модуля

    Raises:
        ModuleError: Если указан неподдерживаемый тип модуля.
    """
    match module_type:
        case ModuleType.CanModuleType | ModuleType.NetworkCanModuleType:
            stub_class = CanModuleServiceStub
        case ModuleType.MccModuleType:
            stub_class = MccModuleServiceStub
        case ModuleType.TimbrelOverIpModuleType:
            stub_class = TimbrelOverIpModuleServiceStub
        case _:
            module_name = ModuleType.Name(module_type)
            raise ModuleError(f'Неподдерживаемый SREDA модуль: {module_name}')

    return stub_class


def init_server_connections(sreda_server_connection: str, module_type: int) -> Tuple[grpc.Channel, SredaModuleStub]:
    """Установка подключения к ModuleService.

    Args:
        sreda_server_connection (str): Строка с адресом подключения к серверу SREDA.
        module_type (int): Тип модуля.

    Returns:
        channel, stub

    Raises:
        ConnectError: В случае ошибки подключения к серверу SREDA.
    """
    try:
        channel = grpc.insecure_channel(sreda_server_connection)
    except Exception as exc:
        raise ConnectError(f'Не удалось подключиться к SREDA серверу: {sreda_server_connection}', str(exc))

    stub_class = get_stub_class(module_type)
    stub = stub_class(channel)
    return channel, stub


def init_handlers_threads(
    *,
    req_send_queue: SimpleQueue,
    req_rep_recv: Callable,
    req_rep_rpc: grpc.StreamStreamMultiCallable,
    event_queue: SimpleQueue,
    event_recv: Callable,
    event_rpc: grpc.StreamStreamMultiCallable,
    tm_queue: SimpleQueue,
    tm_recv: Callable,
    tm_rpc: grpc.StreamStreamMultiCallable,
    metadata: Any,
    stop_event: threading.Event,
):
    """Запустить потоки для обработки стримов сообщений.

    Args:
        req_send_queue (SimpleQueue): Очередь для отправки req.
        req_rep_recv (Callable): Функция для обработки полученных req-rep.
        req_rep_rpc (grpc.StreamStreamMultiCallable): gRPC для стрима req-rep.
        event_queue (SimpleQueue): Очередь для получения event.
        event_recv (Callable): Функция для обработки полученных event.
        event_rpc (grpc.StreamStreamMultiCallable): gRPC для стрима event.
        tm_queue (SimpleQueue): Очередь для получения tm.
        tm_recv (Callable): Функция для обработки полученных tm сообщений.
        tm_rpc (grpc.StreamStreamMultiCallable): gRPC для стрима tm.
        metadata (Any): Метаданные.
    """
    req_rep_thread = create_bistream(
        out_queue=req_send_queue,
        msg_handler=req_rep_recv,
        rpc=req_rep_rpc,
        metadata=metadata,
        thread_name='Req-rep handler of TimbrelReqRep stream',
        channel=StreamMsgChannel.REQ_REP,
        stop_event=stop_event,
    )
    event_thread = create_bistream(
        out_queue=event_queue,
        msg_handler=event_recv,
        rpc=event_rpc,
        metadata=metadata,
        thread_name='Event handler of TimbrelEvent stream',
        channel=StreamMsgChannel.EVENT,
        stop_event=stop_event,
    )
    tm_thread = create_bistream(
        out_queue=tm_queue,
        msg_handler=tm_recv,
        rpc=tm_rpc,
        metadata=metadata,
        thread_name='Telemetry handler of TimbrelTelemetry stream',
        channel=StreamMsgChannel.TM,
        stop_event=stop_event,
    )
    return req_rep_thread, event_thread, tm_thread
