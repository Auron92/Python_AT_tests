import requests
import argparse
import os
import hashlib
import json

class GraveyardUploadException(Exception):
    pass

class GraveyardDownloadException(Exception):
    pass

class GraveyardDownload:
    def __init__(self, token, firmwareId, version, graveyardUrl):
        self.headers = {
            'Authorization': f'Bearer {token}'
        }
        self.version = version
        self.firmwareId = firmwareId
        self.graveyardUrl = graveyardUrl
        self.response = requests.request("GET", self.graveyardUrl + '/api/search/byFirmwareId/' 
                                    + self.firmwareId + '/version/' + self.version, headers=self.headers)
        print("code:",self.response.status_code)
        try:
            os.mkdir("download")
        except FileExistsError:
            print("Directory exists")

        self.response_json = json.loads(self.response.text)
        print("binary id:", self.response_json["id"])
        for zpaq_id in self.response_json["zpaqArtifacts"]:
            print("zpaq id:", zpaq_id["id"])

    def download(self):
        self.downloadBin()
        self.downloadZpaq()

    def downloadBin(self):
        binFileName = self.response_json["firmwareArtifact"]["fileName"]
        url = self.graveyardUrl+ "/api/download/version/" + str(self.response_json["id"]) + "/firmware"
        r = requests.get(url, allow_redirects=True, headers=self.headers)
        r.raise_for_status()
        print("Download bin code:", r.status_code)
        with open('download/'+binFileName, 'wb') as f:
            f.write(r.content)
        self.compareHashDownloaded(self.response_json["firmwareArtifact"]["hash"], binFileName)

    def downloadZpaq(self):
        for zpaqs in self.response_json["zpaqArtifacts"]:
            zpaqFileName = zpaqs['fileName']
            zpaqDownloadUrl = self.graveyardUrl + "/api/download/zpaq/" + str(zpaqs['id'])
            r = requests.get(zpaqDownloadUrl, allow_redirects=True, headers=self.headers)
            r.raise_for_status()
            print("Download zpaq code:", r.status_code)
            with open('download/'+zpaqFileName, 'wb') as f:
                f.write(r.content)
            self.compareHashDownloaded(zpaqs['hash'], zpaqFileName)

    def compareHashDownloaded(self, remoteHash, fileName):
        hashFile = hashlib.sha3_512(open('download/'+fileName,'rb').read()).hexdigest()
        if hashFile == remoteHash:
            print('Hash match for ', fileName)
        else:
            raise GraveyardDownloadException('Hash mismatch for', fileName)

    def writeMetaDataToFile(self):
        with open('graveyard.json', 'w') as f:
            json.dump(self.response_json, f)

class GraveyardUploderFactory:
    def __init__(self, token, branch, commitHash, firmwareFilePath, graveyardUrl):
        self.graveyardUrl = graveyardUrl
        self.headers = {
            'Authorization': f'Bearer {token}'
        }
        self.token = token
        self.branch = branch
        self.commitHash = commitHash
        self.firmwareFilePath = firmwareFilePath
        self.firmwareFileName = os.path.basename(firmwareFilePath)
        self.set_version()
        self.set_firmwareId()
        self.firmwareFileHash = self.get_hash_of_file(self.firmwareFilePath)
        self.uploadParams = self.return_uploadParams()
        self.uploadFiles = self.return_uploadFiles()

    def set_version(self):
        self.version = self.parse_version()

    def parse_version(self):
        return self.firmwareFileName[self.firmwareFileName.rfind('-')+1:self.firmwareFileName.rfind('.')]
    
    def set_firmwareId(self):
        self.firmwareId = self.parse_FirmwareId()

    def parse_FirmwareId(self):
        return self.firmwareFileName[self.firmwareFileName.index('-')+1: self.firmwareFileName.rfind('-')]

    def upload_firmware_return_response(self):
        print('Version:',self.version)
        print('firmwareId', self.firmwareId)
        print("Params:", self.uploadParams)
        print("Files:", self.uploadFiles)
        response = requests.request("POST", self.graveyardUrl + '/service/upload', headers=self.headers, files=self.uploadFiles, params=self.uploadParams)
        return response.raise_for_status()

    def get_hash_of_file(self,filePath):
        return hashlib.sha3_512(open(filePath,'rb').read()).hexdigest()

    def return_uploadParams(self):
        pass

    def return_uploadFiles(self):
        pass

class GraveyardUploaderFirmware(GraveyardUploderFactory):
    def __init__(self, token, firmwareFilePath, branch, commitHash, graveyardUrl, zpaqFilePath):
        self.zpaqFilePath = zpaqFilePath
        self.zpaqFileName = os.path.basename(zpaqFilePath)
        self.zpaqHash = self.get_hash_of_file(self.zpaqFilePath)
        super().__init__(token, branch, commitHash, firmwareFilePath, graveyardUrl)

    def return_uploadParams(self):
        return {"zpaqHashes": self.zpaqHash, "firmwareFileHash": self.firmwareFileHash, "firmwareId": self.firmwareId, "version": self.version, "branch": self.branch,
                   "commitHash": self.commitHash}

    def return_uploadFiles(self):
        return {"zpaqFiles": (self.zpaqFileName, open(self.zpaqFilePath, 'rb')),
                 "firmwareFile": (self.firmwareFileName, open(self.firmwareFilePath, 'rb'))
                 }

class GraveyardUploaderLinux(GraveyardUploderFactory):
    def __init__(self, token, branch, commitHash, firmwareFilePath, graveyardUrl, extension, zpaqFiles):
        self.extension = extension
        if zpaqFiles is not None:
            self.zpaqDict = { zpaqFile: self.get_hash_of_file(zpaqFile) for zpaqFile in zpaqFiles}
        else: self.zpaqDict = {}
        super().__init__(token, branch, commitHash, firmwareFilePath, graveyardUrl)

    def set_version(self):
        self.version = self.parse_version()

    def parse_version(self):
        if self.extension == 'tar':
            return self.firmwareFileName[self.firmwareFileName.rfind('-')+1:self.firmwareFileName.rfind('.',0,self.firmwareFileName.rfind('.'))]
        else:
            return self.firmwareFileName[self.firmwareFileName.rfind('-')+1:self.firmwareFileName.rfind('.')]

    def return_uploadParams(self):
        return { "firmwareFileHash": self.firmwareFileHash, "firmwareId": self.firmwareId, 
                "version": self.version, "branch": self.branch, "commitHash": self.commitHash, 
                "zpaqHashes": list(self.zpaqDict.values()) }

    def return_uploadFiles(self):
        uploadFiles = [('firmwareFile',open(self.firmwareFilePath, 'rb'))]
        for zpaqFile in self.zpaqDict.keys():
            uploadFiles.append(('zpaqFiles', open(zpaqFile, 'rb')))
        return uploadFiles

def main():
    parser = argparse.ArgumentParser(description='Upload to Graveyard')
    subparsers = parser.add_subparsers(dest='uploadType')

    parser_linux = subparsers.add_parser("linux")
    parser_linux.add_argument('-token', type=str, help='Keycloak token', required=True, dest='token')
    parser_linux.add_argument('-firmwareFile', type=str, help='Path to firmware files to upload.', required=True, dest='firmwareFile')
    parser_linux.add_argument('-zpaqFile', type=str, action='append', help='Zpaqs files. 0 or more', required=False, dest='zpaqFile')
    parser_linux.add_argument('-branch', type=str, help='Git branch', required=True, dest='branch')
    parser_linux.add_argument('-graveyard-url', type=str, help='Set graveyard URL. Default: https://graveyard.1440.space', default="https://graveyard.1440.space", dest='graveyardUrl'),
    parser_linux.add_argument('-commitHash', type=str, required=True, dest='commitHash')
    parser_linux.add_argument('-extension', type=str, help='File extension (tar/bin)', default="tar", dest='extension')

    parser_firmware = subparsers.add_parser("firmware")
    parser_firmware.add_argument('-token', type=str, help='Keycloak token', required=True, dest='token')
    parser_firmware.add_argument('-firmwareFile', type=str, help='Path to firmware file to upload', required=True, dest='firmwareFile')
    parser_firmware.add_argument('-zpaqFile', type=str, help='Path to zpaq file to upload', required=True, dest='zpaqFile')
    parser_firmware.add_argument('-branch', type=str, help='Git branch', required=True, dest='branch')
    parser_firmware.add_argument('-graveyard-url', type=str, help='Set graveyard URL. Default: https://graveyard.1440.space', default="https://graveyard.1440.space", dest='graveyardUrl'),
    parser_firmware.add_argument('-commitHash', type=str, required=True, dest='commitHash')

    parser_download = subparsers.add_parser('download')
    parser_download.add_argument('-token', type=str, help='Keycloak token', required=True, dest='token')
    parser_download.add_argument('-firmwareId', type=str, required=True, dest='firmwareId')
    parser_download.add_argument('-version', type=str, required=True, dest='version')
    parser_download.add_argument('-graveyard-url', type=str, help='Set graveyard URL. Default: https://graveyard.1440.space', default="https://graveyard.1440.space", dest='graveyardUrl'),

    args = parser.parse_args()

    if args.uploadType == 'linux':
        uploader = GraveyardUploaderLinux(args.token, args.branch, args.commitHash, args.firmwareFile, args.graveyardUrl, args.extension, args.zpaqFile )
        print(uploader.upload_firmware_return_response())
    elif args.uploadType == 'firmware':
        uploader = GraveyardUploaderFirmware(args.token, args.firmwareFile, args.branch, args.commitHash, args.graveyardUrl, args.zpaqFile )
        print(uploader.upload_firmware_return_response())
    else:
        downloader = GraveyardDownload(args.token, args.firmwareId, args.version, args.graveyardUrl)
        print(downloader.download())
        downloader.writeMetaDataToFile()

