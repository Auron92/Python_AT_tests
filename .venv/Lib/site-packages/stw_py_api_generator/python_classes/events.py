"""Классы для описания событий."""
from dataclasses import dataclass, field
from typing import List, Optional

from stw_py_api_generator.build_python_code.types.manipulation import c_to_python_type, unwrap
from stw_py_api_generator.naming import command_name_to_upper
from stw_py_api_generator.python_classes.generic import PythonClass


@dataclass
class EventsRootPythonClass(PythonClass):
    """Класс, лежащий в папке events."""


@dataclass
class EventParameterPythonClass(PythonClass):
    """Класс под параметр телеметрического типа."""

    param_type: str = 'str'
    type_module_name: str = 'str'

    @classmethod
    def from_yaml(cls, yaml_element):
        """Конструирование из yaml описания."""
        real_type = unwrap(yaml_element.type)
        param_type = real_type.name.name
        if real_type.kind == 'system':
            param_type = c_to_python_type(real_type.name.name)

        return cls(
            name=yaml_element.name,
            param_type=param_type,
            type_module_name=real_type.name.module,
            docstring=yaml_element.info,
        )


@dataclass
class EventTypePythonClass(PythonClass):
    """Класс, в котором содержится информация о типе события."""

    params: List[EventParameterPythonClass] = field(default_factory=list)
    type_name: str = ''
    module_name: str = ''
    tm_name: str = ''
    msg_name: str = ''
    msg_id: Optional[int] = None

    @classmethod
    def from_yaml(cls, yaml_module, yaml_ev):
        """Конструирование из yaml описания."""
        event_name = command_name_to_upper(yaml_ev.name)
        return cls(
            type_name=f'{event_name}Event',
            module_name=yaml_module.name,
            tm_name=yaml_ev.name,
            docstring=yaml_ev.info,
            params=[EventParameterPythonClass.from_yaml(ev_param) for ev_param in yaml_ev.params],
            msg_name=f'{yaml_ev.module}.{yaml_ev.name}',
            msg_id=yaml_ev.msg_id,
        )


@dataclass
class EventsPythonClass(PythonClass):
    """Класс для переходов внутри папки events."""

    next_levels: List[str] = field(default_factory=list)
    items: List[EventTypePythonClass] = field(default_factory=list)


def events_from_yaml_module(yaml_module):
    """Конструирование массива события из yaml описания."""
    return [EventTypePythonClass.from_yaml(yaml_module, yaml_ev) for yaml_ev in yaml_module.events]
