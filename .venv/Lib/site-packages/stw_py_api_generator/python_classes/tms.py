"""Классы для генерации ТМИ."""
from dataclasses import dataclass, field
from typing import List, Optional

from stw_py_api_generator.build_python_code.types.manipulation import c_to_python_type, unwrap
from stw_py_api_generator.naming import command_name_to_upper
from stw_py_api_generator.python_classes.generic import PythonClass


@dataclass
class TmsRootPythonClass(PythonClass):
    """Класс, лежащий в папке tms."""


@dataclass
class TmTypePythonClass(PythonClass):
    """Класс, в котором содержится информация о телеметрическом типе."""

    params: List['TmParameterPythonClass'] = field(default_factory=list)
    type_name: str = ''
    module_name: str = ''
    tm_name: str = ''
    msg_name: str = ''
    msg_id: Optional[int] = None
    req_id: Optional[int] = None
    rep_id: Optional[int] = None

    @classmethod
    def from_yaml(cls, yaml_module, yaml_tm):
        """Конструирование из yaml описания."""
        tm_name = command_name_to_upper(yaml_tm.name)
        return cls(
            type_name=f'{tm_name}Tm',
            module_name=yaml_module.name,
            tm_name=yaml_tm.name,
            docstring=yaml_tm.info,
            params=[TmParameterPythonClass.from_yaml(param) for param in yaml_tm.params],
            msg_name=f'{yaml_tm.module}.{yaml_tm.name}',
            msg_id=yaml_tm.msg_id,
            req_id=yaml_tm.req_id,
            rep_id=yaml_tm.rep_id,
        )


@dataclass
class TmParameterPythonClass(PythonClass):
    """Класс под параметр телеметрического типа."""

    param_type: str = 'str'
    type_module_name: str = 'str'

    @classmethod
    def from_yaml(cls, yaml_element):
        """Конструирование из yaml описания."""
        real_type = unwrap(yaml_element.type)
        param_type = real_type.name.name

        if real_type.kind == 'system':
            param_type = c_to_python_type(real_type.name.name)

        return cls(
            name=yaml_element.name,
            param_type=param_type,
            type_module_name=real_type.name.module,
            docstring=yaml_element.info,
        )


@dataclass
class TmsPythonClass(PythonClass):
    """Класс для переходов внутри папки tms."""

    next_levels: List[str] = field(default_factory=list)
    items: List[TmTypePythonClass] = field(default_factory=list)


def tms_from_yaml_module(yaml_module):
    """Конструирование tms объектов из yaml описания."""
    return [TmTypePythonClass.from_yaml(yaml_module, yaml_tm) for yaml_tm in yaml_module.tms]
