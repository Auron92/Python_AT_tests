"""Описание типа variant."""
from dataclasses import dataclass, field
from typing import List

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import type_description, unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import TypeVariant
from stw_py_api_generator.parsing.inspections import prepare_to_as_import
from stw_py_api_generator.python_classes.generic import PythonClass
from stw_py_api_generator.python_classes.types.struct_python_class import import_string


@dataclass
class VariantPythonClass(PythonClass):
    """Класс для создания типа variant."""

    variable_types: List[str] = field(default_factory=list)

    @classmethod
    def from_yaml_type(cls, orig_type: TypeVariant):   # noqa: WPS210
        """Конструирование из yaml."""
        name = orig_type.name.name
        file_name = naming.upper_to_snake(name)

        imports = set()
        variable_types = []

        types_names = [unwrap(type_field.type).name.name for type_field in orig_type.fields]
        uniq_names = list(set(type_name for type_name in types_names))  # noqa: C401
        is_collision = len(uniq_names) != len(types_names)

        for type_field in orig_type.fields:
            base_type = unwrap(type_field.type)
            desc = type_description(base_type)
            import_str = import_string(base_type)
            type_name = desc['type_name']

            if is_collision:
                modules = base_type.name.module.split('.') if base_type.name.module else []
                type_name, import_str = prepare_to_as_import(type_name, import_str, modules)

            imports.add(import_str)
            variable_types.append(type_name)

        return cls(
            name=name,
            custom_file_name=f'{file_name}_type.py',
            imports=imports,
            docstring=orig_type.info or '',
            variable_types=variable_types,
        )
