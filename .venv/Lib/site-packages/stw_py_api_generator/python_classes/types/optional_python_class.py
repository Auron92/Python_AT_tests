"""Описание типа optional."""
from dataclasses import dataclass

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import type_description, unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import TypeOptional
from stw_py_api_generator.python_classes.generic import PythonClass
from stw_py_api_generator.python_classes.types.struct_python_class import import_string


@dataclass
class OptionalPythonClass(PythonClass):
    """Класс для создания типа optional."""

    element_type: str = ''

    @classmethod
    def from_yaml_type(cls, orig_type: TypeOptional):
        """Конструирование из yaml."""
        name = orig_type.name.name
        file_name = naming.upper_to_snake(name)

        base_type = unwrap(orig_type.base)
        desc = type_description(base_type)
        base_ims = import_string(base_type)
        imports = {base_ims} if base_ims else set()

        return cls(
            name=name,
            custom_file_name=f'{file_name}_type.py',
            imports=imports,
            docstring=orig_type.info or '',
            element_type=desc['type_name'],
        )
