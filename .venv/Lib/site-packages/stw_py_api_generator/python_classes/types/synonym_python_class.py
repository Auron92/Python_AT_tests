"""Описание типа synonim."""
from dataclasses import dataclass

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import TypeSynonym
from stw_py_api_generator.python_classes.generic import PythonClass


@dataclass
class SynonymPythonClass(PythonClass):
    """Класс для типов-синонимов."""

    synonym_name: str = ''

    @classmethod
    def from_yaml_type(cls, yaml_type: TypeSynonym):
        """Конструирование из yaml описания."""
        base_type = get_base_type(yaml_type)
        name = yaml_type.name.name
        file_name = naming.upper_to_snake(name)
        synonym_name = base_type.name.name
        return cls(
            synonym_name=synonym_name,
            name=name,
            custom_file_name=f'{file_name}_type.py',
        )


def get_base_type(primary_type, step=0):
    """Рекурсивное получение базового типа от основного с максимальной глубиной."""
    max_step = 10
    if step <= max_step and getattr(primary_type, 'base', None):
        base_type = unwrap(primary_type.base)
        step += 1
        primary_type = get_base_type(base_type, step)
    return primary_type
