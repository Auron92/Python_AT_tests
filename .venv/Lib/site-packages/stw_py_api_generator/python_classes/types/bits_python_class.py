"""Описание типа bits."""
from dataclasses import dataclass, field
from typing import List, TypedDict

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import BitField, TypeBits
from stw_py_api_generator.python_classes.generic import PythonClass


class BitsItem(TypedDict):
    """Одна строка внутри Enum-a."""

    name: str
    size: int
    info: str

    @classmethod
    def from_yaml(cls, yaml_field: BitField):
        """Формирование класса из yaml описания."""
        type_name = unwrap(yaml_field.type).name.name
        size = int(type_name.replace('__u', ''))
        return cls(
            name=yaml_field.name,
            size=size,
            info=yaml_field.info or '',
        )


@dataclass
class BitsPythonClass(PythonClass):
    """Класс, содержащий информацию о типе bits."""

    fields: List[BitsItem] = field(default_factory=list)
    base_type: str | None = None

    @classmethod
    def from_yaml_type(cls, yaml_type: TypeBits):
        """Формирование класса из yaml описания."""
        name = yaml_type.name.name
        file_name = naming.upper_to_snake(name)
        base = unwrap(yaml_type.base)
        return cls(
            name=name,
            custom_file_name=f'{file_name}_type.py',
            fields=[
                BitsItem.from_yaml(yaml_field)
                for yaml_field in yaml_type.fields
            ],
            base_type=base.name.name if base else None,
        )
