"""Описание типа struct."""
from typing import List, Set

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import type_description, unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import Type, TypeStruct
from stw_py_api_generator.python_classes.generic import PythonClass, TypePythonClass, TypesItem


class StructPythonClass(TypePythonClass):
    """Класс для создания типа struct."""

    @classmethod
    def from_yaml_type(cls, struct_type: TypeStruct) -> PythonClass:
        """Конструирование из yaml описания."""
        name = struct_type.name.name
        file_name = naming.upper_to_snake(name)
        real_type = unwrap(struct_type)

        return cls(
            name=name,
            docstring=struct_type.info,
            custom_file_name=f'{file_name}_type.py',
            inner_types=_inner_types(real_type),
            imports=_imports_for_struct(struct_type),
        )


def import_string(tm_type: Type) -> str:
    """Строка - импорт вложенных типов для основного типа."""
    if tm_type.kind == 'system':
        return ''
    self_name = tm_type.name.name
    return 'from gen_device.types.{modules}.{file_name}_type import {self_name}'.format(
        modules=tm_type.name.module,
        self_name=self_name,
        file_name=naming.upper_to_snake(self_name),
    )


def _imports_for_struct(struct_type) -> Set[str]:
    """Импорты для типа struct (нужно включить все импорты для полей)."""
    return {
        import_string(unwrap(field.type))
        for field in struct_type.fields
    }


def _types_item(field: TypeStruct) -> TypesItem:
    name = field.name
    docstring = field.info
    desc = type_description(field.type)

    return TypesItem(
        type_module=desc['type_module'],
        type_name=desc['type_name'],
        name=name,
        docstring=docstring,
    )


def _inner_types(struct_type: TypeStruct) -> List[TypesItem]:
    fields = struct_type.fields

    types_items = []
    for field in fields:
        types_items.append(_types_item(field))
    return types_items
