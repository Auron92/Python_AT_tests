"""Описание типа vector."""
from dataclasses import dataclass

from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import type_description, unwrap
from stw_py_api_generator.legacy.stw_yaml_gen import TypeVector
from stw_py_api_generator.python_classes.generic import PythonClass
from stw_py_api_generator.python_classes.types.struct_python_class import import_string


@dataclass
class VectorPythonClass(PythonClass):
    """Класс для создания типа vector."""

    count: int = 0
    element_type: str = ''

    @classmethod
    def from_yaml_type(cls, array_type: TypeVector):
        """Конструирование из yaml."""
        name = array_type.name.name
        file_name = naming.upper_to_snake(name)

        base_type = unwrap(array_type.base)
        desc = type_description(base_type)
        base_ims = import_string(base_type)
        imports = {base_ims} if base_ims else set()

        return cls(
            name=name,
            custom_file_name=f'{file_name}_type.py',
            imports=imports,
            docstring=array_type.info or '',
            count=array_type.count,
            element_type=desc['type_name'],
        )
