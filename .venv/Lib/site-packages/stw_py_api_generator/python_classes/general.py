"""Общие инструменты для генерации классов."""
from stw_py_api_generator import naming
from stw_py_api_generator.build_python_code.types.manipulation import py_basic_data_types


def _used_custom_types(tms):
    types = []
    for tm in tms:
        types.extend(_types_from_tm_params(tm))
    return types


def _types_from_tm_params(tm):
    """Описания используемых типов для импорта в виде: ('core.tm', 'settings', 'Settings')."""
    types = []

    for tm_param in tm.params:
        # Правильной проверкой было бы узнать по имени не встроен ли
        # этот тип в type_registry, но здесь type_registry не доступен
        is_basic = tm_param.type_module_name is None
        if tm_param.param_type not in py_basic_data_types and not is_basic:
            upper_param_type = naming.upper_to_snake(tm_param.param_type)
            tm_type_desc = tm_param.type_module_name, upper_param_type, tm_param.param_type
            types.append(tm_type_desc)
    return types


def types_imports(tms):
    """Собрать импорты типов для ТМ или событий."""
    types = _used_custom_types(tms)
    return {
        'from gen_device.types.{modules}.{file_name}_type import {self_name}'.format(
            modules=type_[0],
            file_name=type_[1],
            self_name=type_[2],
        ) for type_ in types
    }
