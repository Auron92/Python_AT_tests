"""Классы для генерации ТМИ."""
from dataclasses import dataclass, field
from typing import List, Optional

from stw_py_api_generator.build_python_code.types.manipulation import c_to_python_type, unwrap
from stw_py_api_generator.naming import command_name_to_upper
from stw_py_api_generator.python_classes.generic import PythonClass


@dataclass
class CfgRootPythonClass(PythonClass):
    """Класс, лежащий в папке cfg."""


@dataclass
class CfgTypePythonClass(PythonClass):
    """Класс, в котором содержится информация о cfg."""

    params: List['CfgParameterPythonClass'] = field(default_factory=list)
    type_name: str = ''
    module_name: str = ''
    cfg_name: str = ''
    msg_name: str = ''
    msg_id: Optional[int] = None

    @classmethod
    def from_yaml(cls, yaml_module, yaml_cfg):
        """Конструирование из yaml описания."""
        cfg_name = command_name_to_upper(yaml_cfg.name)
        return cls(
            type_name=f'{cfg_name}Cfg',
            module_name=yaml_module.name,
            msg_name=f'{yaml_module.name}.{yaml_cfg.name}',
            msg_id=yaml_cfg.msg_id,
            cfg_name=yaml_cfg.name,
            docstring=yaml_cfg.info,
            params=[CfgParameterPythonClass.from_yaml(param) for param in yaml_cfg.params],
        )


@dataclass
class CfgParameterPythonClass(PythonClass):
    """Класс под параметр конфига."""

    param_type: str = 'str'
    type_module_name: str = 'str'

    @classmethod
    def from_yaml(cls, yaml_element):
        """Конструирование из yaml описания."""
        real_type = unwrap(yaml_element.type)
        param_type = real_type.name.name
        if real_type.kind == 'system':
            param_type = c_to_python_type(real_type.name.name)

        return cls(
            name=yaml_element.name,
            param_type=param_type,
            type_module_name=real_type.name.module,
            docstring=yaml_element.info,
        )


@dataclass
class CfgPythonClass(PythonClass):
    """Класс для переходов внутри папки cfg."""

    next_levels: List[str] = field(default_factory=list)
    items: List[CfgTypePythonClass] = field(default_factory=list)


def cfg_from_yaml_module(yaml_module):
    """Конструирование cfg объектов из yaml описания."""
    return [CfgTypePythonClass.from_yaml(yaml_module, yaml_cfg) for yaml_cfg in yaml_module.cfg]
