"""Нормализация типов."""
import builtins
import re
from keyword import iskeyword, kwlist

import inflect
from loguru import logger

# запрещённые слова - это список встроенных типов и ключевых слов языка
bad_words = dir(builtins)  # noqa: WPS421
bad_words.extend(kwlist)
extended_kwlist = {kw.lower() for kw in kwlist}


def is_keyword(some_string):
    """Проверка ключевых слов."""
    return iskeyword(some_string) or some_string.lower() in extended_kwlist


def replace_keywords(yml_tree):
    """Замена keyword элементов в yml файле на валидные значения."""
    for yml_module in yml_tree['modules']:
        _inspect_module(yml_module)


def _inspect_module(yml_module):
    """Проверка имени модуля."""
    yml_module['name'] = norm_module_name(yml_module['name'])
    _inspect_cmds(yml_module)
    _inspect_tms(yml_module)
    _inspect_types(yml_module)


def _inspect_cmds(yml_module):
    """Проверка команд."""
    for command in yml_module.get('cmds', []):
        command['name'] = norm_cmd_name(command['name'])
        if isinstance(command['rep'], list):  # noqa: WPS204
            for idx, some_rep in enumerate(command['rep']):
                command['rep'][idx] = norm_type_name(some_rep)
        else:
            command['rep'] = norm_type_name(command['rep'])


def _inspect_tms(yml_module):
    """Проверка ТМ."""
    for tm_one in yml_module.get('tms', []):
        tm_one['name'] = norm_tm_msg_name(tm_one['name'])
        for tm_param in tm_one['params']:
            tm_param['name'] = norm_tm_param_name(tm_param['name'])
            tm_param['type'] = norm_type_name(tm_param['type'])


def _inspect_types(yml_module):
    """Проверка типов."""
    items_names = ('fields', 'values')

    for some_type in yml_module.get('types', []):
        some_type['name'] = norm_type_name(some_type['name'])

        for items_name in items_names:
            for item in some_type.get(items_name, []):
                item['name'] = norm_type_item_name(item['name'])


def norm_module_name(module_name):
    """Нормализация имени модуля."""
    if is_keyword(module_name):
        return f'{module_name}_mod'
    return module_name


def norm_cmd_name(command_name):
    """Нормализация команды."""
    if is_keyword(command_name):
        return f'{command_name}_cmd'
    return command_name


def norm_tm_msg_name(msg_name):
    """Нормализация ТМ сообщения."""
    if is_keyword(msg_name):
        return f'{msg_name}_tm'
    return msg_name


def norm_tm_param_name(param_name):
    """Нормализация параметра."""
    if is_keyword(param_name):
        return f'{param_name}_param'
    return param_name


def norm_type_item_name(item_name):
    """Нормализация типа."""
    if is_keyword(item_name):
        return f'{item_name}_type'
    return item_name


def sort_lines(lines):
    """Сортировка линий.

    Сортируются так, что бы слово, индекс которого меньше
    не содержался в словах, индекс которых больше.
    """
    i_index = 0
    size = len(lines)
    while i_index < size:
        current = lines[i_index]
        for j_index in range(i_index + 1, size):
            next_line = lines[j_index]
            if current in next_line and current != next_line:
                # next_line содержит в себе current и больше её
                j_item = lines.pop(j_index)
                lines.insert(i_index, j_item)
        i_index += 1


def norm_type_name(some_name: str) -> str:
    """Перевод имени типа, если оно в списке запрещённных."""
    if some_name in bad_words:
        return f'{some_name}_type'
    return some_name


def keyword_frequency(key_word: str, entries_count: int) -> str:
    """Сообщение сколько раз встретилось ключевое слово."""
    word = inflect.engine()
    plural_time = word.plural('time', entries_count)
    return f'Word \"{key_word}\" - {entries_count} {plural_time}'


def normalize_error_message(invalid_types: list):
    """Нормализация сообщения об запрещенных типах."""
    if len(invalid_types) == 0:  # noqa: WPS507
        logger.debug('Yml не содержит ключевых типов.')
        return
    message = 'Founded invalid names In yaml:\n'
    for invalid_type in invalid_types:  # noqa: WPS519
        message += f'{invalid_type}'  # noqa: WPS336
    logger.warning(message)


def normalize_device_file(file_content):
    """Нормализовать содержимое файла с описанием прошивки.

    Заменить имя - ключевое слово для python - на валидное.
    """
    invalid_types = []
    for key_word in kwlist:
        invalid_type_desc = f'name: {key_word}\n'
        valid_type_desc = f'name: {key_word}_\n'

        entries_count = len(list(re.finditer(invalid_type_desc, file_content)))
        if not entries_count:
            continue

        message = keyword_frequency(key_word, entries_count)
        invalid_types.extend(message)
        file_content = file_content.replace(invalid_type_desc, valid_type_desc)

    normalize_error_message(invalid_types)

    return file_content
