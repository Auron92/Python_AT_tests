"""Парсинг ямла."""
from dataclasses import dataclass, field
from functools import cmp_to_key
from typing import Any, Dict, List

import oyaml

from stw_py_api_generator.general import encoding
from stw_py_api_generator.parsing.descriptions import CommandDesc, ModuleDesc, TelemetryDesc, build_type_description
from stw_py_api_generator.parsing.type_index import TypeIndex


def _element_order(first, second):
    """Отсортировать импорты."""
    in_first = 'import' in first
    in_second = 'import' in second

    order_map = {
        (False, False): 0,
        (False, True): -1,
        (True, False): 1,
    }
    if (in_first, in_second) in order_map:
        return order_map.get((in_first, in_second))

    if second['name'] in first['import']:
        return 1
    if first['name'] in second['import']:
        return -1
    return len(first['import']) - len(second['import'])


def module_from_yaml_element(yaml_element, type_index, module_index) -> ModuleDesc:
    """Создание описания модуля из элемента yaml."""
    module_types = _get_types(yaml_element, type_index)
    return ModuleDesc(
        name=yaml_element['name'],
        imports=_get_imports(yaml_element, module_index),
        info=yaml_element.get('info', ''),
        cmds=_get_commands(yaml_element),
        tms=_get_tmi(yaml_element),
        types=module_types,
        events=_get_events(yaml_element),
        cfg=_get_config(yaml_element),
    )


def _get_imports(yaml_element, type_index) -> List[str]:
    yaml_imports = yaml_element.get('import')
    if yaml_imports is None:
        return []

    if 'import' in yaml_element:
        import_elements = yaml_element.get('import')
        if isinstance(import_elements, str):
            import_elements = [import_elements]

    _verify_imports(import_elements, type_index)

    return import_elements


def _verify_imports(
    import_names, module_index,
) -> None:
    """
    Сопоставление импортов с содержанием type_index.

    Если импорта нет в index - падаем с KeyError.
    """
    for import_name in import_names:
        if import_name not in module_index:
            raise ValueError(f'module not found: {import_name}')


def _get_types(yaml_element, type_index):
    """Получить типы."""
    yaml_types = yaml_element.get('types')
    if yaml_types is None:
        return []
    for yaml_type in yaml_types:
        gen_type = build_type_description(yaml_type, type_index)
        type_index.add(gen_type)
    return type_index


def _get_commands(yaml_element) -> List[CommandDesc]:
    """Формирование описания команд."""
    yaml_commands = yaml_element.get('cmds')
    if yaml_commands is None:
        return []
    return yaml_commands


def _get_tmi(yaml_element) -> List[TelemetryDesc]:
    """Получить описание ТМИ."""
    yaml_tmi = yaml_element.get('tms')
    if yaml_tmi is None:
        return []
    return yaml_tmi


def _get_events(yaml_element) -> Any:
    """Получить описание событий."""
    yaml_events = yaml_element.get('events')
    if yaml_events is None:
        return []
    return yaml_events


def _get_config(yaml_element) -> Any:
    """Получить описание конфига."""
    yaml_cfg = yaml_element.get('cfg')
    if yaml_cfg is None:
        return []
    return yaml_cfg


class YmlFileParser(object):
    """Разбор файла .yml."""

    def __init__(self, file_name):
        self.modules: Dict[str, ModuleDesc] = {}
        self.type_index = TypeIndex()

        with open(file_name, 'rt', encoding=encoding) as file_object:
            loaded = oyaml.load(file_object, Loader=oyaml.FullLoader)
        sorted_list = sorted(loaded['modules'], key=cmp_to_key(_element_order))

        for yaml_element in sorted_list:
            gen_module = module_from_yaml_element(
                yaml_element, self.type_index, self.modules,
            )
            self.modules[gen_module.name] = gen_module


class Module(object):
    """Описание модуля."""


class Device(object):
    """Описание прибора."""


@dataclass
class DummyYamlModule(object):
    """Yaml модуль для переходов по уровням."""

    name: str
    imports: List[str] = field(default_factory=list)
    cmds: List[str] = field(default_factory=list)
    tms: List[str] = field(default_factory=list)
    events: List[str] = field(default_factory=list)
    types: List[str] = field(default_factory=list)
    cfg: List[str] = field(default_factory=list)

    def __str__(self):
        return f'dummy: {self.name}'

    def __repr__(self):
        return f'dummy: {self.name}'
