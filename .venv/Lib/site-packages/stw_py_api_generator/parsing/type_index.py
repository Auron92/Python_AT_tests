"""Работа с реестром типов."""
from dataclasses import dataclass, field
from typing import Any, Dict

from stw_py_api_generator.parsing.type_descriptions import SystemType


@dataclass
class TypeIndex(object):
    """Реестр всех известных типов."""

    registry: Dict[str, Any] = field(default_factory=dict)

    def __post_init__(self):
        """Заполняем системными типами."""
        for s_type in system_types():
            self.registry[s_type.alias] = s_type.python_type

    def __getitem__(self, item):
        try:
            return self.registry[item]
        except KeyError as exc:
            raise KeyError(
                f'requested type ({item}) not found in index',
            ) from exc

    def add(self, new_item) -> None:
        """Добавление нового типа."""
        self.registry[new_item.full_path] = new_item


def system_types():
    """Типы, которые сводятся к стандартным python типам данных."""
    return (   # noqa: WPS227
        SystemType(python_type=bool, alias='bool', size=8),
        SystemType(python_type=str, alias='char', size=8),
        SystemType(python_type=float, alias='float', size=8),
        SystemType(python_type=float, alias='double', size=8),
        SystemType(python_type=int, alias='int16_t', size=8),
        SystemType(python_type=int, alias='uint16_t', size=8),
        SystemType(python_type=int, alias='int32_t', size=8),
        SystemType(python_type=int, alias='uint32_t', size=8),
    )
