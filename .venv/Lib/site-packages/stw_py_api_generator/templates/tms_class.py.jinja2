from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenTm
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, TmCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress
{% if items %}
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from {{ self_import }}.basic_types import *
{% for type_import in imports  %}
{{ type_import }}
{% endfor %}
{% endif %}
{% for next_name in next_levels %}
from .{{ my_module_name }}.next_level import {{ next_name }}
{% endfor %}


{% for item in items  %}
@dataclass
class {{ item.type_name }}(_Message):
    """{{ item.docstring }}."""

    {% for param in item.params %}
    # {{ param.docstring }}
    {% if param.local_import %}
    {{ param.local_import }}
    {% endif %}
    {{ param.name }}: {{ param.param_type }}
    {% endfor %}


{% endfor %}
class Tm(GenTm):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI, pygen_device):
        """Конструктор модуля телеметрии."""
{% for next_name in next_levels %}
        self.{{ next_name }}: {{ next_name }}.Tm = {{ next_name }}.Tm(device_address, broker, pygen_device)
{% endfor %}

{% for item in items %}
        self.{{ item.tm_name }} = broker.tm_catcher_class[{{ item.type_name }}](
            device_address=device_address, broker=broker, pygen_device=pygen_device,msg_type={{ item.type_name }}, name='{{ item.module_name }}.{{ denormalize_name(item.tm_name) }}',
            msg_id={{ item.msg_id }}, req_id={{ item.req_id }}, rep_id={{ item.rep_id }},
        )
{% endfor %}
