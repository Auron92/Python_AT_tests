from dataclasses import asdict, dataclass, is_dataclass
from typing import Union

from stw_py_api_runtime.gen_classes.gen_device import GenCommandSender
from stw_py_api_runtime.gen_classes.telemetry.parse import RepMessage, ReqMessage
from stw_py_api_runtime.gen_classes.types.returned_types import ReturnTypes
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI, CmdCatcherAPI
from stw_py_api_runtime.sdk.brokers.message import DeviceAddress

from {{ root_dir_name }}{{ packet_name }}.basic_types import *

{% for next_name in next_level %}
from .{{ my_module_name }}.next_level import {{ next_name }}
    {% endfor %}
{% for import in imports %}
{{ import }}
{% endfor %}


{% for method in methods %}

{% if method.gen_req_type %}
@dataclass
class {{ method.req_type }}(ReqMessage):
    """Описание аргументов команды {{ method.method_path }}."""

    {% for arg in method.args %}
    # {{ arg.docstring }}
    {% if arg.local_import %}
    {{ arg.local_import }}
    {% endif %}
    {{ arg.argument_name }}: {{ arg.argument_type }}
    {% endfor %}
{% endif %}


class {{ method.rep_type }}(RepMessage):
    """Описание возможных ответов на команду {{ method.method_path }}."""

    {{ method.return_type.rep | return_types_imports_filter(import_base) }}

    annotation_type = {{ method.return_type.rep | return_type_annotation }}
    return_types = ReturnTypes({{ method.return_type.rep | return_types_names }})

{% endfor %}


class CommandSender(GenCommandSender):
    def __init__(self, device_address: DeviceAddress, broker: BrokerAPI):
        """Конструктор модуля команд."""
{% for next_name in next_level %}
        self.{{ next_name }}: {{ next_name }}.CommandSender = {{ next_name }}.CommandSender(device_address, broker)
{% endfor %}

{% for method in methods %}
        self.{{ method.method_name }}_msg: CmdCatcherAPI = broker.cmd_catcher_class[{{ method.rep_type }}.annotation_type](
            broker=broker, device_address=device_address, req_type={{ method.req_type }}, rep_type={{ method.rep_type }},
            name='{{ method.method_path }}', msg_id={{ method.msg_id }}, rep_id={{ method.rep_id }},
        )
{% endfor %}

{% if methods %}
{% for method in methods %}
    def {{ method.method_name }}(
        self, {{ method.args | method_args_filter }}{% if method.args %},{% endif %} **kwargs,
    ) -> {{ method.rep_type }}.annotation_type:
        """{{ method.docstring }}.

        :key extra_retry: (``bool``) -- если True, при отсутствии ответа отправлять команду повторно. Количество повторных попыток определено у брокера в атрибуте sending_tries_count. По умолчанию 3.
        :key extra_priority: (``Priority``) -- приоритет команды с которым она отправляется на устройство. Находится в stw_py_api_runtime.sdk.brokers.message.Priority
        :key extra_need_rep: (``bool``) -- если True, требуется ответ на команду со стороны прибора
        :key extra_wait_rep: (``bool``) -- если True, нужно дождаться ответ от прибора
        :key extra_timeout: (``int | None``) -- сколько (сек) ждать ответ
        """
        {% if method.args %}
        return self.{{ method.method_name }}_msg({{ method.args | method_args_names }}, **kwargs)
        {% else %}
        return self.{{ method.method_name }}_msg(**kwargs)
        {% endif %}

{% endfor %}
{% endif %}
