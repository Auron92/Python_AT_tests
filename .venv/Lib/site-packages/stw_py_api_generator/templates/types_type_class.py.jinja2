from dataclasses import dataclass
from typing import TypedDict, Union

from {{ self_import }}.basic_types import *
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message

{% for import in imports %}
{{ import }}
{% endfor %}


@dataclass
class {{ class_name }}(_Message):
{% if docstring %}
    """{{ docstring }}"""
{% endif %}
{% if not items %}
    ...
{% endif %}

{% for item in items %}
    # {{ item.docstring }}
    {% if item.local_import %}
    {{ item.local_import }}
    {% endif %}
    {{ item.name }}: {{ item.type }}
{% endfor %}


class {{ class_name }}Dict(TypedDict):
{% if docstring %}
    """{{ docstring }}"""
{% endif %}
{% if not items %}
    ...
{% endif %}

{% for item in items %}
    # {{ item.docstring }}
    {% if item.local_import %}
    {{ item.local_import }}
    {% endif %}
    {{ item.name }}: Union[{{ item.type }}{% if item.type_in_typed_dict %}, {{ item.type_in_typed_dict }} {% endif %}]

{% endfor %}

