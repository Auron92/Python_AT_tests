from dataclasses import dataclass

from stw_py_api_runtime.gen_classes.gen_device import GenCfg
from stw_py_api_runtime.sdk.brokers.broker_api import BrokerAPI
{% if items %}
from stw_py_api_runtime.gen_classes.telemetry.parse import Message as _Message
from {{ self_import }}.basic_types import *
{% for type_import in imports  %}
{{ type_import }}
{% endfor %}
{% endif %}
{% for next_name in next_levels %}
from .{{ my_module_name }}.next_level import {{ next_name }}
{% endfor %}


{% for item in items  %}
@dataclass
class {{ item.type_name }}(_Message):
    """{{ item.docstring }}"""
    {% for param in item.params %}
    # {{ param.docstring }}
    {% if param.local_import %}
    {{ param.local_import }}
    {% endif %}
    {{ param.name }}: {{ param.param_type }}
    {% endfor %}


{% endfor %}
class Cfg(GenCfg):
    def __init__(self, device, broker: BrokerAPI):
{% for next_name in next_levels %}
        self.{{ next_name }} = {{ next_name }}.Cfg(device, broker)
{% endfor %}

{% for item in items %}
        self.{{ item.cfg_name }} = broker.tm_catcher_class[{{ item.type_name }}](device, broker, '{{ item.module_name }}.{{ item.tm_name }}', {{ item.type_name }})
{% endfor %}
