import json

    {% if class.creatable %}
from stw_py_api_runtime.gen_classes import GenBase
from stw_py_api_runtime.gen_classes.brokers import *
from stw_py_api_runtime.gen_classes.get_tm_msg import get_tm_msg
    {% endif %}

# class imports
    {% if class.imports %}
    {% for import_item in class.imports %}
{{ import_item }}
    {% endfor %}
    {% endif %}

# next level imports
    {% for nl_item in class.next_levels %}
{{ nl_item.import_string }}
    {% endfor %}

    {% if class.creatable %}
class {{ class.name }}(GenBase):
    async def get_tm_msg(self, msg_name: str):
        """Получить один кадр телеметрии с именем msg_name."""
        return await get_tm_msg(self.broker, self.device_id, msg_name)
    {% else %}
class {{ class.name }}({{ based }}):
    {% endif %}
    """{{ class.docstring }}"""
    {# поля класса #}
            {% if class.fields %}
            {%  for field in class.fields %}
    {{ field.name }}: {{ field.field_type }}
    """{{ field.docstring }}"""
            {% endfor %}
            {% endif %}

    {# next level Поля (для перехода) #}
            {% for nl_item in class.next_levels %}
    {{ nl_item.item_name }}: {{ nl_item.class_name }}
            {% endfor %}

    {# Enum Items #}
            {% for enum_item in class.enum_items %}
    {{ enum_item.enum_name }} = {{ enum_item.enum_value }}
    """{{ enum_item.docstring }}"""
            {% endfor %}

{# def __init__ #}
        {% if class.creatable %}
    def __init__(self, device_id: int, broker: Broker):
        super().__init__(device_id, broker)
        self.broker = broker
        {% else %}
            {% if class.fields %}
    def __init__(self{{ class.fields | fields_in_init }}, *args, **kwargs):
        """constructor"""
        super().__init__(*args, **kwargs)
            {% endif %}
        {% endif %}

{# __init__ for tag=ArrayBase #}
        {% if class.tags | have_item('ArrayBase') %}
    def __init__(self, *args, **kwargs):
        """ArrayBase based class constructor"""
        super().__init__({{ class.context.array_type }}, {{ class.context.array_size }})
        {% endif %}

        {# присвоение значений полей #}
            {% for field in class.fields %}
        self.{{ field.name }} = {{ field.name }}
            {% endfor %}

        {# next level переходы (объекты) #}
            {% for nl_item in class.next_levels %}
        self.{{ nl_item.item_name }} = {{ nl_item.class_name }}(device_id, broker)
            {% endfor %}

{# methods #}
        {% for method in class.methods %}
    async def {{ method.method_name }}(
        self{{ method.args | method_args_filter }}
    ) -> {{ method.return_type | return_type_annotation }}:
        """{{ method.docstring }}"""
        response_message = await self.broker.send_command(
            self.device_id, '{{ method.method_path }}',
            {{ method.args | call_method_args_filter }}
        )
        return response_message
{#        return self.send_command(#}
{#            {#}
{#                'deviceid': self.device_id,#}
{#                'func': '{{ method.mcc_method }}',#}
{##}
{#                'args': {#}
{#                        {% for arg in method.args %}#}
{#                    '{{ arg.argument_name }}':  {{ arg | method_argument_value }}#}
{#                        {% endfor %}#}
{#                },#}
{#            },#}
{#            return_type={{ method.return_type }},#}
{#            msg_id={{ method.msg_id }},#}
{#        )#}

        {% endfor %}


{% for inner_class in inner_classes %}
    self.{inner_class.member_name}: {{ inner_class.full_name }} = {{ inner_class.full_name }}(device_id, ste)
{% endfor %}
