import hashlib
from functools import cached_property, partialmethod
from pathlib import Path

import zpaq
from humanfriendly.terminal import message
from loguru import logger
from stw_py_api_runtime.gen_classes.simulator import DeviceSim
from stw_py_api_runtime.gen_classes.telemetry.generator import TmFrequency

from {{ import_base_path }}.basic_types import *
{% for import in imports %}{{ import }}
{% endfor %}

from .entities import entity_message_map
from .types.repstub.error_type import Error
from .types.repstub.ok_type import Ok


class {{ device_name | snake_to_upper }}DeviceSim(DeviceSim):

    @property
    def _entity_message_map(self):
        return entity_message_map

    @property
    def yml_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.yml').open('rb') as file:
            return file.read()

    @cached_property
    def zpaq_firmware_data(self) -> bytes:
        with Path(__file__).with_name('firmware.zpaq').open('rb') as file:
            return file.read()

    {% for message in messages.values() %}
    {% if message["path_name"] == "core.tm.setPeriods" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_tm_set_periods, return_types={{ message["return_types"] }})
    {% elif message["path_name"] == "core.heartbeat.status" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_heartbeat_status)
    {% elif message["path_name"] == "core.dtc.activeEvents" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_dtc_activeEvents)
    {% elif message["path_name"] in ("core.tm.enableMsg", "core.rmtx.execPeriodic") %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_tm_enable_msg, return_types={{ message["return_types"] }})
    {% elif message["path_name"] == "core.tm.disableMsg" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_tm_disable_msg, return_types={{ message["return_types"] }})
    {% elif message["path_name"] == "core.pkg.getMeta" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_pkg_get_meta, return_types={{ message["return_types"] }})
    {% elif message["path_name"] == "core.pkg.getChunk" %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._core_pkg_get_chunk, return_types={{ message["return_types"] }})
    {% elif message["docstring"].startswith("EVENT:") %}
    {{ message["method_name"] }} = partialmethod(DeviceSim._event_handler, message_name="{{ message['path_name'] }}")
    {% else %}
    def {{ message["method_name"] }}(self{% if message["args"] %}{% for arg_name, arg_type in message["args"] %}, {{ arg_name }}: {{ arg_type }}{% endfor %}{% endif %}) -> {{ message["annotation"] }}:
        """{{ message["docstring"] }}"""
        {% if message["return"] %}{{ message["return"] }}{% endif -%}

    {% endif -%}{% endfor -%}
