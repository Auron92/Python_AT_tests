"""Рендер шаблонов jinja."""
import os
from typing import List, Union

import jinja2

from stw_py_api_generator import __file__ as module_file_path
from stw_py_api_generator.build_python_code.yaml_utils import (
    add_local_imports_to_tm_params, add_local_imports_to_types, get_tms_items, get_type_import_map, get_type_items,
)
from stw_py_api_generator.custom_types import ModuleRegistry
from stw_py_api_generator.general import encoding
from stw_py_api_generator.jinja_renders.template_utils import jinja_globals
from stw_py_api_generator.python_classes.cfg import CfgPythonClass, CfgRootPythonClass
from stw_py_api_generator.python_classes.cmds import CommandSenderClass
from stw_py_api_generator.python_classes.device import SyncDevicePythonClass
from stw_py_api_generator.python_classes.events import EventsPythonClass, EventsRootPythonClass
from stw_py_api_generator.python_classes.generic import PythonClass, PythonModule, TypePythonClass
from stw_py_api_generator.python_classes.tms import TmsPythonClass, TmsRootPythonClass, TmTypePythonClass
from stw_py_api_generator.python_classes.types.array_python_class import ArrayPythonClass
from stw_py_api_generator.python_classes.types.bits_python_class import BitsPythonClass
from stw_py_api_generator.python_classes.types.enum_python_class import EnumPythonClass
from stw_py_api_generator.python_classes.types.not_implemented_python_class import NotImplementedPythonClass
from stw_py_api_generator.python_classes.types.optional_python_class import OptionalPythonClass
from stw_py_api_generator.python_classes.types.string_python_class import StringPythonClass
from stw_py_api_generator.python_classes.types.synonym_python_class import SynonymPythonClass
from stw_py_api_generator.python_classes.types.variant_python_class import VariantPythonClass
from stw_py_api_generator.python_classes.types.vector_python_class import VectorPythonClass

module_path = os.path.dirname(module_file_path)
template_dir = os.path.join(module_path, 'templates')


def jinja_render(template_path):
    """Отрисовка jinja шаблона с именем template_path."""
    def caller(method):
        def _render_template(*args, **kwargs):
            context = method(*args, **kwargs)

            imports = context.get('imports')
            if imports:
                context['imports'] = sorted(imports)

            tmplt_path = os.path.join(template_dir, template_path)
            with open(tmplt_path, encoding=encoding) as template_file:
                template_txt = template_file.read()

            template = jinja2.Template(
                template_txt, trim_blocks=True, lstrip_blocks=True,
            )
            template.globals = jinja_globals
            return template.render(context)
        return _render_template
    return caller


def find_inner_modules(
    registry: ModuleRegistry,
    parent: PythonModule,
) -> ModuleRegistry:
    """Найти все модули, вложенные в указанный (новый реестр)."""
    return {
        mod_path: module
        for mod_path, module in registry.items()
        if module.parent == parent
    }


def replace_gen_device_in_imports(imports: set, gen_module_name: str, root_dir_name: str) -> set:
    """Заменить в строке импорта root папку на соответствую прошивке."""
    if root_dir_name:
        correct_from = f'from {root_dir_name}.{gen_module_name}.'
    else:
        correct_from = f'from {gen_module_name}.'
    return {imp.replace('from gen_device.', correct_from) for imp in imports}


@jinja_render('init.py.jinja2')
def render_init_file(
    registry: ModuleRegistry,
    module: PythonModule,
    class_file_names: List[str],
    class_names: List[str],
):
    """Формирование __init__.py файла."""
    inner_modules = list(find_inner_modules(registry, module).values())
    in_files = [
        {
            'file_name': file_name,
            'class_name': class_name,
        }
        for file_name, class_name in zip(class_file_names, class_names)
    ]
    return {
        'inner_modules': inner_modules,
        'inner_files': in_files,
    }


@jinja_render('class_file.py.jinja2')
def render_class(packet: PythonModule, python_class: PythonClass):
    """Рендер классов."""
    return {
        'class': python_class,
        'inner_classes': [],
        'based': ', '.join(python_class.base_classes),
        'packet_name': packet.name if packet else '',
    }


@jinja_render('device_class_sync.py.jinja2')
def render_device_class_sync(device_class: SyncDevicePythonClass, *args):
    """Рендер DevicePythonClass."""
    return _render_device_class(device_class)


def _render_device_class(device_class):
    return {'device_name': device_class.device_name}


def render_cmd(sender_class: CommandSenderClass, root: PythonModule):
    """Рендер CommandSenderClass."""
    file_name = sender_class.custom_file_name[:-3]
    root_dir = f'{root.root_dir_name}.' if root.root_dir_name else ''

    import_base = f'{root_dir}{root.name}'

    return {
        'root_dir_name': root_dir,
        'my_module_name': f'{file_name}_module',
        'next_level': sender_class.next_levels,
        'methods': sender_class.methods,
        'imports': replace_gen_device_in_imports(sender_class.imports, root.name, root.root_dir_name),
        'packet_name': root.name,
        'import_base': import_base,
    }


@jinja_render('cmd_sender_class.py.jinja2')
def render_command_sender_class(sender_class: CommandSenderClass, root: PythonModule, *args):
    """Рендер CommandSenderClass."""
    return render_cmd(sender_class, root)


@jinja_render('tms_root_class.py.jinja2')
def render_tms_root_class(root_class: TmsRootPythonClass, *args):
    """Рендер TmsRootPythonClass."""
    return {
        'next_levels': root_class.next_levels,
    }


def render_tm(
    tms_class: Union[TmsPythonClass, CfgPythonClass, EventsPythonClass],
    root: PythonModule,
):
    """Рендер TmsPythonClass."""
    file_name = tms_class.custom_file_name[:-3]
    all_imports = replace_gen_device_in_imports(tms_class.imports, root.name, root.root_dir_name)
    type_imports_map = get_type_import_map(all_imports)
    local_imports = add_local_imports_to_tm_params(tms_class.items, type_imports_map)
    tms_items = get_tms_items(tms_class.items, type_imports_map)
    imports = all_imports - local_imports

    return {
        'next_levels': tms_class.next_levels,
        'items': tms_items,
        'imports': imports,
        'my_module_name': f'{file_name}_module',
        'self_import': root.self_import_name,
    }


@jinja_render('tms_class.py.jinja2')
def render_tms_class(tms_class: TmsPythonClass, root: PythonModule, *args):
    """Рендер TmsPythonClass."""
    return render_tm(tms_class, root)


@jinja_render('cfg_root_class.py.jinja2')
def render_cfg_root_class(cfg_class: CfgRootPythonClass, *args):
    """Рендер CfgRootPythonClass."""
    return {
        'next_levels': cfg_class.next_levels,
    }


@jinja_render('cfg_class.py.jinja2')
def render_cfg_class(cfg_class: CfgPythonClass, root: PythonModule, *args):
    """Рендер CfgPythonClass."""
    return render_tm(cfg_class, root)


@jinja_render('tm_type_class.py.jinja2')
def render_tm_type_class(tm_type_class: TmTypePythonClass, *args):
    """Рендер TmTypePythonClass."""
    param_list = [
        {
            'name': type_param.name,
            'type': type_param.param_type,
        } for type_param in tm_type_class.params
    ]
    return {
        'name': tm_type_class,
        'params': param_list,
    }


@jinja_render('events_root_class.py.jinja2')
def render_events_root_class(root_class: EventsRootPythonClass, *args):
    """Рендер EventsRootPythonClass."""
    return {
        'next_levels': root_class.next_levels,
    }


@jinja_render('events_class.py.jinja2')
def render_events_class(events_class: EventsPythonClass, root: PythonModule, *args):
    """Рендер EventsPythonClass."""
    return render_tm(events_class, root)


@jinja_render('types_type_class.py.jinja2')
def render_types_type_class(types_type: TypePythonClass, root: PythonModule):
    """Рендер TypePythonClass."""
    all_imports = replace_gen_device_in_imports(types_type.imports, root.name, root.root_dir_name)
    type_imports_map = get_type_import_map(all_imports)
    local_imports = add_local_imports_to_types(types_type.inner_types, type_imports_map)
    type_items = get_type_items(types_type.inner_types, type_imports_map)
    imports = all_imports - local_imports

    return {
        'class_name': types_type.name,
        'items': type_items,
        'imports': imports,
        'self_import': root.self_import_name,
    }


@jinja_render('types_synonym_class.py.jinja2')
def render_synonym_class(synonym_class: SynonymPythonClass, root: PythonModule, *args):
    """Рендер SynonymPythonClass."""
    return {
        'name': synonym_class.name,
        'synonym_name': synonym_class.synonym_name,
        'self_import': root.self_import_name,
    }


@jinja_render('types_bits_class.py.jinja2')
def render_bits_class(bits_class: BitsPythonClass, root: PythonModule, *args):
    """Рендер BitsPythonClass."""
    return {
        'docstring': bits_class.docstring,
        'name': bits_class.name,
        'fields': bits_class.fields,
        'self_import': root.self_import_name,
        'base_type': bits_class.base_type,
    }


@jinja_render('types_array_class.py.jinja2')
def render_array_class(array_class: ArrayPythonClass, root: PythonModule, *args):
    """Рендер ArrayPythonClass."""
    return {
        'name': array_class.name,
        'imports': replace_gen_device_in_imports(array_class.imports, root.name, root.root_dir_name),
        'element_type': array_class.array_type_name,
        'count': array_class.count,
        'docstring': array_class.docstring or '',
        'self_import': root.self_import_name,
    }


@jinja_render('types_optional_class.py.jinja2')
def render_optional_class(opt_class: OptionalPythonClass, root: PythonModule, *args):
    """Рендер ArrayPythonClass."""
    return {
        'name': opt_class.name,
        'imports': replace_gen_device_in_imports(opt_class.imports, root.name, root.root_dir_name),
        'element_type': opt_class.element_type,
        'docstring': opt_class.docstring or '',
        'self_import': root.self_import_name,
    }


@jinja_render('types_variant_class.py.jinja2')
def render_variant_class(orig_class: VariantPythonClass, root: PythonModule, *args):
    """Рендер VariantPythonClass."""
    return {
        'name': orig_class.name,
        'imports': replace_gen_device_in_imports(orig_class.imports, root.name, root.root_dir_name),
        'variable_types': orig_class.variable_types,
        'docstring': orig_class.docstring or '',
        'self_import': root.self_import_name,
    }


@jinja_render('types_vector_class.py.jinja2')
def render_vector_class(vector_class: VectorPythonClass, root: PythonModule, *args):
    """Рендер VectorPythonClass."""
    return {
        'name': vector_class.name,
        'imports': replace_gen_device_in_imports(vector_class.imports, root.name, root.root_dir_name),
        'element_type': vector_class.element_type,
        'count': vector_class.count,
        'docstring': vector_class.docstring or '',
        'self_import': root.self_import_name,
    }


@jinja_render('types_string_class.py.jinja2')
def render_string_class(string_class: StringPythonClass, root: PythonModule, *args):
    """Рендер StringPythonClass."""
    return {
        'name': string_class.name,
        'docstring': string_class.docstring or '',
        'bytes_size': string_class.bytes_size,
        'base_type': string_class.base_type,
        'self_import': root.self_import_name,
    }


@jinja_render('types_enum_class.py.jinja2')
def render_enum_class(enum_class: EnumPythonClass, root: PythonModule, *args):
    """Рендер EnumPythonClass."""
    return {
        'name': enum_class.name,
        'docstring': enum_class.docstring,
        'imports': enum_class.imports,
        'enum_items': enum_class.enum_items,
        'self_import': root.self_import_name,
        'base_type': enum_class.base_type,
    }


@jinja_render('types_nimpl_class.py.jinja2')
def render_nimpl_class(nimpl_class: NotImplementedPythonClass, *args):
    """Рендер NotImplementedPythonClass класса."""
    return {
        'type_name': nimpl_class.type_name,
        'location': nimpl_class.location,
    }
