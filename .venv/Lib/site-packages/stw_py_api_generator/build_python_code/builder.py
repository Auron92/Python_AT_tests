"""Генерация код. Вход."""
from collections import defaultdict
from typing import Optional

from stw_py_api_generator.build_python_code import yaml_map_builder
from stw_py_api_generator.build_python_code.build_cmd_module import add_cmds
from stw_py_api_generator.build_python_code.build_device_sim import DeviceSimCreator
from stw_py_api_generator.build_python_code.build_general import build_modules
from stw_py_api_generator.build_python_code.file_writer import make_basic_type_files, make_files_by_map
from stw_py_api_generator.build_python_code.messages_map import MessageMapCreator
from stw_py_api_generator.build_python_code.types import types_builder
from stw_py_api_generator.custom_types import ModuleMap
from stw_py_api_generator.legacy.stw_yaml_gen import Device
from stw_py_api_generator.naming import name_to_snake_case, snake_to_upper, upper_to_snake
from stw_py_api_generator.python_classes.device import SyncDevicePythonClass
from stw_py_api_generator.python_classes.generic import PythonModule


def build_map(device: Device, packet_name: Optional[str] = None) -> ModuleMap:
    """Корневой модуль для пакета."""
    device_module = _device_module(device, packet_name)
    maps = {
        'cmds_map': _cmds_map(device, device_module),
        'tms_map': _tms_map(device, device_module),
        'types_map': types_builder.build_types(device, device_module),
        'events_map': _events_map(device, device_module),
        'cfg_map': _cfg_map(device, device_module),
    }
    return _total_map(device_module, **maps)


def build(parser, out_dir, source_info, **kwargs):
    """Генерация кода."""
    module_map = {}
    packet_name = kwargs.get('packet', None)
    packet_dir_name = name_to_snake_case(packet_name) if packet_name else None
    for device in parser.devices:
        module_map = build_map(device, packet_dir_name)

    full_out_dir = make_files_by_map(out_dir, module_map, source_info, **kwargs)
    make_basic_type_files(module_map, out_dir)

    messages_creator = MessageMapCreator(module_map, out_dir)
    messages_creator.create()
    DeviceSimCreator(
        messages_creator.entity_messages_map, parser.devices[0], messages_creator.collision_names, module_map, out_dir,
    ).create()
    return full_out_dir


def _device_module(device: Device, packet_name: Optional[str] = None) -> PythonModule:
    device_name = upper_to_snake(device.name)
    class_name = snake_to_upper(device.name)

    py_packet = PythonModule(
        name=packet_name if packet_name else f'gen_{device_name}',
        parent=None,
        packet=None,
        init_file_content=f'from .device_class import {class_name}Device',
        is_root_module=True,
    )
    device_class = SyncDevicePythonClass(
        name=f'{class_name}Device',
        custom_file_name='device_class.py',
        device_name=device_name,
    )
    py_packet.classes.append(device_class)
    return py_packet


def _cmds_map(device, device_module):
    """Карта содержимого будущей папки cmds."""
    cmds_yaml_map = yaml_map_builder.validated_yaml_module_map(
        device.modules, 'cmds',
    )
    cmds_map = defaultdict(list)
    add_cmds(cmds_yaml_map, cmds_map, device_module)
    return cmds_map


def _tms_map(device, device_module):
    """Карта модулей для будущей папки tms."""
    tms_yaml_map = yaml_map_builder.validated_yaml_module_map(
        device.modules, 'tms',
    )
    tm_type = 'tms'
    return build_modules(tms_yaml_map, device_module, tm_type)


def _events_map(device, device_module):
    """Карта модулей для будущей папки events."""
    events_yaml_map = yaml_map_builder.validated_yaml_module_map(
        device.modules, 'events',
    )
    return build_modules(events_yaml_map, device_module, 'events')


def _cfg_map(device, device_module):
    """Карта модулей для будущей папки cfg."""
    yaml_map = yaml_map_builder.validated_yaml_module_map(
        device.modules, 'cfg',
    )
    return build_modules(yaml_map, device_module, 'cfg')


def _total_map(device_module, **modules_maps):  # noqa: WPS211
    """Композиция всего в одну карту для генерации файлов."""
    total_map = defaultdict(list)
    total_map[0].append(device_module)

    for module_map in modules_maps.values():
        for level, level_items in module_map.items():
            total_map[level + 1].extend(level_items)

    return total_map
