"""Создание файла с описанием имитатора прибора."""
from stw_py_api_generator.build_python_code.build_general import get_import_path_and_name, get_imports
from stw_py_api_generator.build_python_code.file_writer import write_device_sim_file
from stw_py_api_generator.jinja_renders.rendering import replace_gen_device_in_imports
from stw_py_api_generator.naming import base_import_path, dotted_to_snake
from stw_py_api_generator.python_classes.cmds import imports_for_cmds


class DeviceSimCreator:  # noqa: WPS230
    """Создает файл с классом - описанием сообщений прибора."""

    def __init__(self, entity_messages_map, device, collision_names, module_map, out_dir):  # noqa: WPS211
        self.entity_messages_map = entity_messages_map
        self.python_module_map = module_map
        self.collision_names = collision_names
        self.out_dir = out_dir
        self.device = device

        self.message_method_map = {}
        self._imports = set()
        self.root = module_map[0][0]

    def create(self):
        """Создать файл с классом - описанием сообщений прибора."""
        self._get_message_method_map()
        self._save_to_file()

    def _get_message_method_map(self):
        """Получить карту методов сообщений."""
        for entity, messages in self.entity_messages_map.items():
            for message in messages:
                msg_imports = get_imports(entity, message, self.collision_names)
                self._imports.update(msg_imports)
                if entity == 'cmds':
                    args_imports = imports_for_cmds([message])
                    self._imports.update(args_imports)

                msg_method = self._msg_method(entity, message)
                if msg_method is None:
                    continue
                self.message_method_map[msg_method['method_name']] = msg_method

    def _msg_method(self, entity: str, msg):
        """Создать описание метода сообщения для заданной сущности."""
        return_str = message_type_return(entity)
        docstring = f'{entity_name_for_doc(entity)}: {msg.docstring}.'  # noqa: WPS237
        if entity in ('tms', 'events'):  # noqa: WPS510
            _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
            return {
                'path_name': msg.msg_name,
                'method_name': dotted_to_snake(msg.msg_name),
                'annotation': type_name,
                'docstring': docstring,
                'args': [],
                'return': return_str,
            }
        elif entity == 'cmds':
            entity_import = f'{entity}.command_sender_module'
            _, req_type_name = get_import_path_and_name(entity_import, msg, 'req_type', self.collision_names)
            _, rep_type_name = get_import_path_and_name(entity_import, msg, 'rep_type', self.collision_names)
            return {
                'path_name': msg.method_path,
                'method_name': dotted_to_snake(msg.method_path),
                'annotation': f'{rep_type_name}.annotation_type',
                'return_types': f'{rep_type_name}.return_types',
                'docstring': docstring,
                'args': [(arg.argument_name, arg.argument_type_hint) for arg in msg.args],
                'return': return_str,
            }

    def _save_to_file(self):
        """Сохранить файл с описанием имитатора прибора."""
        imports = replace_gen_device_in_imports(self._imports, self.root.name, self.root.root_dir_name)
        import_base_path = base_import_path(packet_name=self.root.name, root_name=self.root.root_dir_name)
        device_sim_content = {
            'import_base_path': import_base_path,
            'device_name': self.device.name,
            'imports': imports,
            'messages': self.message_method_map,
        }
        write_device_sim_file(module_map=self.python_module_map, out_dir=self.out_dir, content=device_sim_content)


def message_type_return(entity_name: str) -> str:
    """Обработать возвращаемый тип."""
    if entity_name == 'cmds':
        return 'return Error.NotImplemented'
    return ''


def entity_name_for_doc(entity_name: str) -> str:
    """Преобразовать имя сущности в вид для докстринги."""
    names_map = {
        'events': 'EVENT',
        'cmds': 'CMD',
        'tms': 'TM',
    }
    name = names_map.get(entity_name, entity_name)
    return name.upper()
