"""Создание карты сообщений."""
from enum import Enum

from loguru import logger

from stw_py_api_generator.build_python_code.build_general import get_import_path_and_name, get_imports
from stw_py_api_generator.build_python_code.file_writer import write_entities_map_file, write_messages_map_file
from stw_py_api_generator.general import Priority
from stw_py_api_generator.jinja_renders.rendering import replace_gen_device_in_imports
from stw_py_api_generator.jinja_renders.template_utils import denormalize_dotted_name
from stw_py_api_generator.python_classes.cfg import CfgPythonClass
from stw_py_api_generator.python_classes.cmds import CommandSenderClass
from stw_py_api_generator.python_classes.events import EventsPythonClass
from stw_py_api_generator.python_classes.tms import TmsPythonClass


class EntityType(Enum):
    """Тип функционала."""

    tms = 'tms'
    events = 'events'
    cmds = 'cmds'
    cfg = 'cfg'


class MessageMapCreator(object):  # noqa: WPS230, WPS338
    """Класс, создающий карту сообщений на основе модулей и объектов прошивки."""

    def __init__(self, module_map, out_dir):
        self.python_module_map = module_map
        self.entity_messages_map = {
            'tms': [],
            'events': [],
            'cmds': [],
            'cfg': [],
        }
        self.message_id_name_map = {}
        self.message_name_params_map = {}
        self.message_method_map = {}
        self.out_dir = out_dir
        self.root_module = self.python_module_map[0][0]
        self._imports = set()
        self.collision_names = set()
        self._all_names = []

    def create(self):
        """Создать файл - карту сообщений с их id и типом для десериализации."""
        self._get_entity_messages_map()
        self.collision_names = {name for name in self._all_names if self._all_names.count(name) > 1}  # noqa: WPS221
        self._create_messages_id_map_file()
        self._create_messages_name_map_file()

    def _create_messages_id_map_file(self):
        """Создать и сохранить карту сообщений с их id."""
        self._get_messages_id_map()
        self._save_map_to_file('id')

    def _create_messages_name_map_file(self):
        """Создать и сохранить карту сообщений с их именами и параметрами."""
        self._get_messages_name_map()
        self._save_map_to_file('name')

    def _get_messages_id_map(self):
        """Получить карту сообщений с их id и типом."""
        for entity, messages in self.entity_messages_map.items():
            for message in messages:
                msg_imports = get_imports(entity, message, self.collision_names)
                self._imports.update(msg_imports)

                msg_id_desc = self._get_entity_messages_id_and_desc(entity, message)
                self.message_id_name_map.update(msg_id_desc)

    def _get_messages_name_map(self):
        """Получить карту сообщений с их именами и параметрами."""
        for entity, messages in self.entity_messages_map.items():
            for message in messages:
                msg_imports = get_imports(entity, message, self.collision_names)
                self._imports.update(msg_imports)

                msg_params = self._msg_params(entity, message)
                self.message_name_params_map.update(msg_params)

    def _save_map_to_file(self, map_type):
        """Сохранить карту в файл."""
        imports = replace_gen_device_in_imports(self._imports, self.root_module.name, self.root_module.root_dir_name)
        content = {
            'imports': imports,
            'messages': self.message_id_name_map if map_type == 'id' else self.message_name_params_map,
        }
        if map_type == 'id':
            write_messages_map_file(module_map=self.python_module_map, out_dir=self.out_dir, content=content)
        else:
            write_entities_map_file(module_map=self.python_module_map, out_dir=self.out_dir, content=content)

    def _get_entity_messages_map(self):
        """Получить карту сообщений для каждой сущности."""
        for modules in self.python_module_map.values():
            for module in modules:
                self._get_module_items(module)

    def _get_module_items(self, module):
        """Получить элементы модуля."""
        for inner_file_cls in module.classes:
            entity, items = self._get_entity_items(inner_file_cls)
            if entity is None:
                continue

            for item in items:
                _denormalize_message_name(entity, item)

            self.entity_messages_map[entity].extend(items)

    def _get_entity_items(self, inner_file_cls):
        """Получить элементы для каждой сущности."""
        names = []
        class_entity_map = {
            CommandSenderClass: 'cmds',
            TmsPythonClass: 'tms',
            EventsPythonClass: 'events',
            CfgPythonClass: 'cfg',
        }

        entity = class_entity_map.get(type(inner_file_cls), None)
        if entity is None:
            return None, []

        if entity == 'cmds':
            items = inner_file_cls.methods
            for cmd_item in items:
                if cmd_item.req_type != 'ReqMessage':
                    names.append(cmd_item.req_type)
                names.append(cmd_item.rep_type)
        else:
            items = inner_file_cls.items
            names = [item.type_name for item in items]

        self._all_names.extend(names)
        return entity, items

    def _msg_params(self, entity, msg):
        """Получить параметры сообщения для заданной сущности (для серверной генерации)."""
        match entity:
            case EntityType.tms.name:
                return self.tms_params(msg, entity)
            case EntityType.events.name:
                return self.events_params(msg, entity)
            case EntityType.cmds.name:
                return self.cmd_params(msg, entity)
            case EntityType.cfg.name:
                return self.cfg_params(msg, entity)
            case _:
                return {}

    def _get_priority(self, msg_name: str):
        """Костыль приоритета от имени метода."""
        priority_map = {
            'core.heartbeat.status': Priority.HIGH,
        }
        return priority_map.get(msg_name, Priority.LOW)

    def tms_params(self, msg, entity):
        """Tms entity."""
        _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
        priority = self._get_priority(msg.msg_name)
        return {
            msg.msg_name: (
                'TmParams', {
                    'msg_id': msg.msg_id,
                    'req_id': msg.req_id,
                    'rep_id': msg.rep_id,
                    'msg_type': type_name,
                    'priority': priority,
                },
            ),
        }

    def events_params(self, msg, entity):
        """Events entity."""
        _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
        return {
            msg.msg_name: (
                'EventParams', {
                    'msg_id': msg.msg_id,
                    'msg_type': type_name,
                },
            ),
        }

    def cmd_params(self, msg, entity):
        """Создать параметры для команды."""
        entity_import = f'{entity}.command_sender_module'
        _, req_type_name = get_import_path_and_name(entity_import, msg, 'req_type', self.collision_names)
        _, rep_type_name = get_import_path_and_name(entity_import, msg, 'rep_type', self.collision_names)

        params = {
            'msg_id': msg.msg_id,
            'args_type': req_type_name,
            'rep_type': rep_type_name,
            'rep_id': msg.rep_id,
        }

        if msg.rep_id is not None:
            params['rep_id'] = msg.rep_id
        else:
            logger.warning(f'rep_id команды {rep_type_name} не определена!')

        return {
            msg.method_path: (
                'CmdParams', params,
            ),
        }

    def cfg_params(self, msg, entity):
        """Cfg entity."""
        _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
        return {
            msg.msg_name: (
                'CfgParams', {
                    'msg_id': msg.msg_id,
                    'msg_type': type_name,
                },
            ),
        }

    def _get_entity_messages_id_and_desc(self, entity, msg):
        """Получить id и описание сообщения для заданной сущности."""
        entity_handlers = {
            EntityType.tms.name: self.tms_id_and_desc,
            EntityType.events.name: self.cfg_or_events_id_and_desc,
            EntityType.cfg.name: self.cfg_or_events_id_and_desc,
            EntityType.cmds.name: self.cmds_id_and_desc,
        }

        if handler := entity_handlers.get(entity):  # noqa: WPS332
            return handler(entity, msg)
        return {}

    def tms_id_and_desc(self, entity, msg):
        """Id and desc tms entity."""
        _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
        tms_dct = {}
        if msg.msg_id is not None:
            tms_dct[msg.msg_id] = (msg.msg_name, type_name)
        if msg.req_id is not None:
            tms_dct[msg.req_id] = (f'{msg.msg_name}.req', 'TmReq')
        if msg.rep_id is not None:
            tms_dct[msg.rep_id] = (f'{msg.msg_name}.rep', type_name)
        return tms_dct

    def cfg_or_events_id_and_desc(self, entity, msg):
        """Id and desc cfg or events entity."""
        _, type_name = get_import_path_and_name(entity, msg, 'type_name', self.collision_names)
        if msg.msg_id is not None:
            return {msg.msg_id: (msg.msg_name, type_name)}
        logger.warning(f'msg_id команды {msg.msg_name} не определена!')
        return {}

    def cmds_id_and_desc(self, entity, msg):
        """Id and desc cmds entity."""
        entities = {}
        entity_import = f'{entity}.command_sender_module'
        _, req_type_name = get_import_path_and_name(entity_import, msg, 'req_type', self.collision_names)
        _, rep_type_name = get_import_path_and_name(entity_import, msg, 'rep_type', self.collision_names)
        if msg.msg_id is not None:
            entities[msg.msg_id] = (msg.method_path, req_type_name)
        else:
            logger.warning(f'msg_id команды {req_type_name} не определена!')
        if msg.rep_id is None:
            logger.warning(f'rep_id команды {rep_type_name} не определена!')
        else:
            entities[msg.rep_id] = (msg.method_path, req_type_name)

        return entities


def _denormalize_message_name(entity, message):
    if entity == 'cmds':
        message.method_path = denormalize_dotted_name(message.method_path)
    else:
        message.msg_name = denormalize_dotted_name(message.msg_name)
