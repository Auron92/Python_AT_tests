"""Генерация одной команды."""
from typing import List

from loguru import logger

from stw_py_api_generator.c_types import matched_system_type
from stw_py_api_generator.legacy.stw_yaml_gen import CmdTmParam
from stw_py_api_generator.naming import command_name_to_upper
from stw_py_api_generator.parsing.normalising import bad_words
from stw_py_api_generator.python_classes.generic import MethodArgument, PythonMethod


def methods_from_yaml_module(yaml_module) -> List[PythonMethod]:
    """Создание методов для отправки команд из описания yaml."""
    return [
        _build_method(yaml_cmd, _build_args(yaml_cmd))
        for yaml_cmd in yaml_module.cmds
    ]


def _build_method(yaml_cmd, py_args: List[MethodArgument]) -> PythonMethod:
    """Конструирование одного метода."""
    gen_req_type = False
    req_type_name = 'ReqMessage'
    upper_method_name = command_name_to_upper(yaml_cmd.name)

    if py_args:
        req_type_name = f'{upper_method_name}Req'
        gen_req_type = True

    return PythonMethod(
        docstring=yaml_cmd.info,
        module_name=yaml_cmd.module,
        method_name=yaml_cmd.name,
        args=py_args,
        return_type=yaml_cmd,
        rep_type=f'{upper_method_name}Rep',
        req_type=req_type_name,
        msg_id=yaml_cmd.msg_id,
        rep_id=yaml_cmd.rep_id,
        method_path=f'{yaml_cmd.module}.{yaml_cmd.name}',
        gen_req_type=gen_req_type,
    )


def _build_args(yaml_command) -> List[MethodArgument]:
    """Создание аргументов команды по yaml описанию."""
    return [_build_argument(cmd_param) for cmd_param in yaml_command.params]


def _build_argument_type_hint(arg_type_name, kind_type):
    if kind_type == 'struct':
        return f'{arg_type_name} | {arg_type_name}Dict'
    return matched_system_type(arg_type_name) or arg_type_name


def _normalize_argument_name(argument_name: str) -> str:
    """Проверка имени аргумента на запрещённые слова."""
    if argument_name in bad_words:
        # я бы вбрасывал exception, но тогда не будет работать генерация
        # например, есть "id", который вроде норм работает
        logger.warning(f'Invalid argument name ({argument_name})')
    # переименовывание того, что ломает шаблон генерации
    if argument_name == 'device_id':
        return 'device_id_value'
    if argument_name == 'return_types':
        return 'return_types_list'
    if argument_name == 'command':
        return 'command_name'
    return argument_name


def _build_argument(cmd_param) -> MethodArgument:
    arg_type_name = cmd_param.type.name.alias
    kind_type = cmd_param.type.type.kind
    argument_type_hint = _build_argument_type_hint(arg_type_name, kind_type)

    return MethodArgument(
        docstring=cmd_param.info,
        argument_name=_normalize_argument_name(cmd_param.name),
        argument_type=arg_type_name,
        argument_type_hint=argument_type_hint,
        is_enum=kind_type == 'enum',
        type_module_name=cmd_param.type.name.module,
    )


def _arg_type_name(cmd_tm_param: CmdTmParam) -> str:
    """Имя параметра для type annotations."""
    arg_type_name = cmd_tm_param.type.name.alias
    is_system = cmd_tm_param.type.type.kind == 'system'
    if is_system:
        return matched_system_type(arg_type_name)
    return f'{arg_type_name}'
