"""Создание карты по yaml модулям."""
from collections import defaultdict

from stw_py_api_generator.parsing.yml_file_parser import DummyYamlModule


def validated_yaml_module_map(yaml_modules, attr_name):
    """Генерация карты yaml с заглушками для переходов."""
    yaml_module_map = _yaml_module_map(yaml_modules, attr_name)
    _validate_module_map(yaml_module_map)
    return yaml_module_map


def _yaml_module_map(yaml_modules, attr_name):
    """Построение схемы модулей по уровням.

    Например, если tms нет в конфиге модуля, то модуль в карту tms не попадет.
    """
    yaml_module_map = defaultdict(list)
    for yaml_module in yaml_modules:
        if not getattr(yaml_module, attr_name):
            continue
        level = yaml_module.name.count('.')
        yaml_module_map[level].append(yaml_module)
    return yaml_module_map


def _validate_module_map(yaml_module_map):
    """Проверка полноты списка модулей и дополнение.

    Например, если есть x.y.z модуль, должен быть модуль x.y.
    """
    if not yaml_module_map.keys():
        return {}
    max_level = max(yaml_module_map.keys())

    for level in range(max_level, 0, -1):
        for yaml_module in yaml_module_map[level]:
            _complete_module(yaml_module, yaml_module_map, level)


def _complete_module(yaml_module, yaml_module_map, level):
    mod_name = yaml_module.name
    prev_name = mod_name[:mod_name.rfind('.')]
    prev_level = yaml_module_map[level - 1]
    filtered_modules = filter(lambda mod: mod.name == prev_name, prev_level)
    prev_level_exists = bool(list(filtered_modules))
    if not prev_level_exists:
        yaml_module_map[level - 1].append(DummyYamlModule(name=prev_name))
