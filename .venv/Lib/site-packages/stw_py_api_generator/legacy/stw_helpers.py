from loguru import logger
from yaml.composer import *
from yaml.constructor import FullConstructor
from yaml.parser import *
from yaml.reader import *
from yaml.resolver import *
from yaml.scanner import *

from stw_py_api_generator.legacy.stw_types import MsgKind


# Create custom safe constructor class that inherits from SafeConstructor
class MySafeConstructor(FullConstructor):
    # Create new method handle boolean logic
    def add_bool(self, node):
        return self.construct_scalar(node)


# Inject the above boolean logic into the custom constuctor
MySafeConstructor.add_constructor('tag:yaml.org,2002:bool',
                                  MySafeConstructor.add_bool)


class CustomLoader(Reader, Scanner, Parser, Composer, MySafeConstructor, Resolver):
    def __init__(self, stream):
        Reader.__init__(self, stream)
        Scanner.__init__(self)
        Parser.__init__(self)
        Composer.__init__(self)
        MySafeConstructor.__init__(self)
        Resolver.__init__(self)


def check_message_ids(kind: MsgKind, full_name: str, msg_id: int, req_id: int, rep_id: int):
    """Проверить наличие нужных айдишников сообщений у команд, ТМ и событий."""
    message_ids_map = {
        'msg_id': msg_id,
        'req_id': req_id,
        'rep_id': rep_id,
    }
    entity_required_ids_map = {
        MsgKind.cmd: ('команда', ('msg_id', 'rep_id')),
        MsgKind.tm: ('телеметрия', ('msg_id', 'req_id', 'rep_id')),
        MsgKind.event: ('событие', ('msg_id', )),
        MsgKind.cfg: ('cfg', ('msg_id', )),
    }
    params = entity_required_ids_map[kind]

    entity_name = params[0]
    message_names = params[1]
    for message_name in message_names:
        message_id = message_ids_map.get(message_name, None)
        if message_id is None:
            logger.warning(
                f'У сущности "{entity_name}" {full_name} отсутствует необходимый {message_name}: '
                f'будут ошибки при работе в runtime',
            )
