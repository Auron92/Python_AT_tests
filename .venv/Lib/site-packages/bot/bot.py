"""VK teams bot for notification."""
import json
import time
from pathlib import Path
from typing import Any, Literal

import requests

ParseMode = Literal['MarkdownV2', 'HTML']


class Bot:
    """VKTeams bot."""

    def __init__(self, token: str, last_event_id: int = 0):
        """
        Vk Teams Bot instance.

        :param token: str token from "metabot"
        :param last_event_id: event id to start with.
        """
        self.token = token
        self.api_base = 'https://api.vkteams.1440.space/bot/v1'
        self._last_event_id = last_event_id
        self._state_file = Path(__file__).parent / 'last_state.json'

    def check_connection(self) -> bool:
        """Check if connection is established."""
        url = self.api_base + '/self/get'
        response = requests.get(
            url=url,
            params={'token': self.token},
            verify=False,  # noqa: S501, we don't afraid in this situation.
            timeout=1,
        )
        response.raise_for_status()
        return response.json()['ok'] is True

    def send_text(self, chat_id: str, text: str) -> bool:
        """
        Send text to given chat

        :param chat_id: u.ser@domen.com
        :param text: any text
        :return:
        """
        url = self.api_base + '/messages/sendText'
        response = requests.get(
            url=url,
            params={
                'token': self.token,
                'chatId': chat_id,
                'text': text,
            },
            verify=False,  # noqa: S501, we don't afraid in this situation.
            timeout=30,
        )
        response.raise_for_status()
        return response.json()['ok'] is True

    def send_file(self, chat_id: str, file_path: Path, text: str = '', parse_mode: ParseMode = 'MarkdownV2') -> bool:
        """
        Send file to given chat

        :param chat_id: u.ser@domen.com
        :param file_path: path to file
        :param text: any text
        :param parse_mode: MarkdownV2 or HTML
        """
        with open(file_path, 'rb') as file_to_send:
            as_bytes = file_to_send.read()

        response = requests.post(
            url=self.api_base + '/messages/sendFile',
            params={
                'token': self.token,
                'chatId': chat_id,
                'caption': text,
                'parseMode': parse_mode,
            },
            files={'file': as_bytes},
            timeout=30,
            verify=False,  # noqa: S501, we don't afraid in this situation.
        )
        response.raise_for_status()
        return response.json()['ok'] is True

    def get_updates(self, timeout: int = 60) -> list[dict[str, Any]]:
        """Get all updates."""
        url = self.api_base + '/events/get'
        try:
            response = requests.get(
                url=url,
                params={  # type: ignore # very cursed type expected
                    'token': self.token,
                    'pollTime': 60,
                    'lastEventId': self.last_event_id,
                },
                verify=False,  # noqa: S501, we don't afraid in this situation.
                timeout=timeout,
            )
        except requests.exceptions.ReadTimeout:
            return []

        response.raise_for_status()
        as_json = response.json()
        if 'events' not in as_json:
            return []
        events_list = as_json['events']
        if events_list:
            self.last_event_id = max(events_list, key=lambda event: event['eventId'])['eventId']
        return response.json()  # type: ignore

    @property
    def last_event_id(self) -> int:
        """ID of last event."""
        if not self._last_event_id:
            self._apply_old_state()
        return self._last_event_id

    @last_event_id.setter
    def last_event_id(self, event_id: int) -> None:
        self._last_event_id = event_id
        self._save_state()  # Yes, every time do this

    def _apply_old_state(self) -> None:
        """Load cache and update bot parameters from bot."""
        old_state = self._load_state()
        self._last_event_id = old_state['last_event_id']

    def _load_state(self) -> dict[str, int]:
        if not self._state_file.exists():
            return {'last_event_id': self._last_event_id}
        with open(self._state_file) as old_state:
            data = json.load(old_state)
        return data  # type: ignore

    def _save_state(self) -> None:
        """Save current bot state."""
        data_to_save = {
            'last_event_id': self._last_event_id,
            'last_update': int(time.time()),
        }
        with open(self._state_file, 'w') as old_state:
            json.dump(data_to_save, old_state)
